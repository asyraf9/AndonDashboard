[
    {
        "id": "327571d15da5aceb",
        "type": "tab",
        "label": "Calling System Flow",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "b7a483d0be44dbdd",
        "type": "tab",
        "label": "Telegram Messaging Flow",
        "disabled": false,
        "info": "",
        "env": [
            {
                "name": "Chat Ids",
                "value": "{\"asyraf\":21709557,\"Mgmt\":{\"id\":123,\"Press\":{\"id\":123,\"TRF\":{\"id\":123},\"Large\":{\"id\":123},\"Medium\":{\"id\":123},\"Rework\":{\"id\":123}},\"Assy\":{\"id\":123,\"AB\":{\"id\":123},\"C\":{\"id\":123},\"D\":{\"id\":123},\"EF\":{\"id\":123},\"H\":{\"id\":123}},\"QC\":{\"id\":123,\"Press\":{\"id\":123},\"Assy\":{\"id\":123},\"Incoming\":{\"id\":123},\"Delivery\":{\"id\":123}},\"FM\":{\"id\":123,\"Press\":{\"id\":-1001957517829},\"Assy\":{\"id\":123},\"Die\":{\"id\":123},\"Building\":{\"id\":123}},\"IT\":{\"id\":123}}}",
                "type": "json"
            }
        ]
    },
    {
        "id": "0ab2da76215ad380",
        "type": "tab",
        "label": "\"MQTT Dashboard\" App Setup",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "562197b4f4a67922",
        "type": "tab",
        "label": "Prodn Dashboard Flow",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "2924702c.b33a7",
        "type": "subflow",
        "name": "ui-table handler",
        "info": "# ui-table handler\nUniversal handler for ui-table.\n## features\n- buffer table data\n- add or update individual rows or cells of the table\n- delete rows\n- clear tableData\n- handle column width\n- handle column order\n- hide und unhide columns\n- hide and unhide rows\n- records row order\n- support for nested columns [(column groups)](http://tabulator.info/examples/4.7#column-groups)\n- support for child rows (_children) [(nested data trees)](http://tabulator.info/examples/4.7#tree)\n\nFor real life example see:\n\n**syslog server** for logfile like table with filters\n\n**remote device table** for dynamically updated table with context menues\n\n**irrigation system** for sortable rows\n\n## sending data to ui-tabel\n\n- sending an `array` as discribed in ui-table will replace the complete table and delete all table edits\n  \n  if `msg.keepEdits=true` is added the existing edits will be kept.\n- send an `object` containing the updated properties of a table row by sending msg.<tableDataProp>.\n\n  The table is updated using the `updateOrAddData` command. You can alter the command used by adding the `msg.tabulatorCommand` and `msg.tabulatorParameter`\n\n```\nmsg.tabulatorCommand=\"addData\";\nmsg.tabulatorParameter=[true];\n```\n## configuration\n- `tabulator` json formatted object containing configuration of the table. See ui-table for more details.\n- `property` property of the msg object that contains the data to be passed to ui-table. I.e. *state* `msg.state`\n- `index` index column to identify individual rows. Each message containing data must have a unique `msg.topic` to identify the row. Messages without this `msg.topic` will be droped. It is not nessesary but possible to display the index column in the table. Do not enable editing on this column otherwise you will loose the connection and another row will be added to the table as soon as a new message arrives!\n\n   Defaults to *$topic* `msg.state.$topic`\n- `maxRows`maximum number of rows held by table widget. If grater than **0** the amount of rows in ui-table is limited. For this to work the index row must be a Number. ´rows < currentID-maxRows´ will be deleted.\n- `maxStore`maximum number of rows stored by this node for replay if a client connects. If grater than **0** the amount of rows in flow context is limited. for this to work the index row must be a Number. ´rows < currentID-maxStore´ will be deleted.\n- `dashboard` name of the dashboard tab to only update the table if the dashboard is visible. If empty the table will be updated on every tab change and connect.\n- `context` configuration of context data. The subflow will save or cache data in the flows context using `$parent.`. \n   **tableData** caches the incoming data to restore it on `ui-control´ *change* messages.\n   **tableConfig** saves column width and order to save the interactive table layot\n   **tableEdit** saves edits on the table data otherwise it would be overwritten when new data arrives\n```json\n{\n    \"tableData\": {\n        \"name\": \"tableData\"\n    },\n    \"tableConfig\": {\n        \"name\": \"tableConfig\",\n        \"storage\": \"file\"\n    },\n    \"tableEdit\": {\n        \"name\": \"tableEdit\",\n        \"storage\": \"file\"\n    }\n}\n```\n\n## commands\ncommands can be passed by sending a object as `msg.payload`\n\n```json\n{\n    \"command\": \"delete\",\n    \"object\": \"columnOrder\"\n}\n```\n\n- `deleteTable` tableCache\n- `deleteRow` delete single row. `object` matching index property\n- `ignoreRow` delete single row and put it on an ignore list. `object` matching index property\n- `unIgnoreRow`remove row from the ignore list.  `object` matching index property\n- `unIgnoreRows`delte the ignore list. \n- `deleteRowOrder` delete custom row order\n- `deleteColumnOrder` delete custom column order\n  This is important if you add or delete columns in the tabulator config otherwise the columns most likely don`t show up\n- `deleteColumnWidth` delete custom column width\n- `columnHide` hide a column. `object` matching column field\n- `columnUnHide` unhide a column. `object` matching column field\n- `columnsUnHide` unhide all hidden columns.\n- `setMaxStore` set maximum amount of rows in cache\n- `setMaxDisplay` set maximum amout of rows in ui-table\n- `getTable` get table data (as displayed) as an array (on 2nd output)\n \n## background\nui-table warps the powerfull tabluator library.  This subflow makes it easier to unleash the powerfull features of ui-table",
        "category": "dashboard",
        "in": [
            {
                "x": 54,
                "y": 85,
                "wires": [
                    {
                        "id": "5eb0bd6b.74b794"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 360,
                "y": 85,
                "wires": [
                    {
                        "id": "5eb0bd6b.74b794",
                        "port": 1
                    }
                ]
            },
            {
                "x": 360,
                "y": 136,
                "wires": [
                    {
                        "id": "5eb0bd6b.74b794",
                        "port": 2
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "tabulator",
                "type": "json",
                "value": "{\"tabulator\":{\"responsiveLayout\":\"collapse\",\"responsiveLayoutCollapseStartOpen\":false,\"index\":\"$name\",\"layout\":\"fitColumns\",\"movableColumns\":true,\"groupBy\":\"\",\"columnResized\":\"function(column){     var newColumn = {         field: column._column.field,         visible: column._column.visible,         width: column._column.width,         widthFixed: column._column.widthFixed,         widthStyled: column._column.widthStyled     }; this.send({topic:this.config.topic,ui_control:{callback:'columnResized',columnWidths:newColumn}}); }\",\"columnMoved\":\"function(column, columns){     var newColumns=[];     columns.forEach(function (column) {         newColumns.push({'field': column._column.definition.field, 'title': column._column.definition.title});     });     this.send({topic:this.config.topic,ui_control:{callback:'columnMoved',columns:newColumns}}); }\",\"rowFormatter\":\"function(row){     var data = row.getData();     switch (data.$state) {         case \\\"lost\\\":             row.getElement().style.backgroundColor = \\\"#9e2e66\\\";             row.getElement().style.color = \\\"#a6a6a6\\\";             break;         case \\\"sleeping\\\":             row.getElement().style.backgroundColor = \\\"#336699\\\";             break;         case \\\"disconnected\\\":             row.getElement().style.backgroundColor = \\\"#cc3300\\\";             row.getElement().style.color = \\\"#a6a6a6\\\";             break;         case \\\"alert\\\":             row.getElement().style.backgroundColor = \\\"#A6A6DF\\\";             break;         case \\\"init\\\":             row.getElement().style.backgroundColor = \\\"#f2f20d\\\";             break;         case \\\"ready\\\":             row.getElement().style.backgroundColor = \\\"\\\";             row.getElement().style.color = \\\"\\\";             break;         } }\",\"columns\":[{\"formatter\":\"responsiveCollapse\",\"width\":30,\"minWidth\":30,\"align\":\"center\",\"resizable\":false,\"headerSort\":false,\"frozen\":true,\"title\":\"expand\",\"field\":\"expand\",\"headerVertical\":\"flip\"},{\"formatter\":\"function(cell, formatterParams, onRendered) {      var html = cell.getValue(); return html;  }\",\"title\":\"State\",\"field\":\"$stateIcon\",\"width\":100,\"frozen\":true,\"headerVertical\":\"flip\"},{\"formatter\":\"function(cell, formatterParams, onRendered) {     var html = cell.getValue(); return html;  }\",\"title\":\"Signal\",\"field\":\"signalIcon\",\"width\":100,\"frozen\":true,\"headerVertical\":\"flip\"},{\"title\":\"Name\",\"field\":\"$name\",\"width\":100,\"frozen\":true,\"headerVertical\":\"flip\"},{\"title\":\"State\",\"field\":\"$state\",\"width\":100,\"align\":\"center\",\"headerVertical\":\"flip\"},{\"title\":\"last-ready\",\"field\":\"lastSeenreadyFormatted\",\"width\":100,\"align\":\"left\",\"headerVertical\":\"flip\"},{\"title\":\"Homie\",\"field\":\"$homie\",\"width\":100,\"align\":\"left\",\"headerVertical\":\"flip\"},{\"title\":\"Platform\",\"field\":\"$implementation\",\"width\":100,\"align\":\"left\",\"headerVertical\":\"flip\"},{\"title\":\"Statistics\",\"columns\":[{\"title\":\"Interval\",\"field\":\"interval\",\"width\":100,\"headerVertical\":\"flip\"},{\"formatterParams\":{\"outputFormat\":\"d hh:mm:ss\",\"inputFormat\":\"seconds\",\"invalidPlaceholder\":\"(unknown)\"},\"title\":\"Uptime\",\"field\":\"uptime\",\"formatter\":\"function(cell, formatterParams, onRendered){     var pad = function (num) {         return (\\\"0\\\"+num).slice(-2);     };     var secs = Number(cell.getValue());     if (Number.isNaN(secs)) return;     var minutes = Math.floor(secs / 60);     secs = secs%60;     var hours = Math.floor(minutes/60);     minutes = minutes%60;     var days = Math.floor(hours/24);     hours = hours%24;     if (days>0)         return days+\\\"d \\\"+pad(hours)+\\\":\\\"+pad(minutes);     else         return pad(hours)+\\\":\\\"+pad(minutes)+\\\":\\\"+pad(secs); }\",\"width\":100,\"headerVertical\":\"flip\"},{\"formatterParams\":{\"min\":0,\"max\":100,\"color\":[\"red\",\"orange\",\"green\"],\"legend\":\"function (value) {if (value>0) return \\\"<span style='color:#FFFFFF;'>\\\"+value+\\\" %</span>\\\"; else return; }\",\"legendColor\":\"#FFFFFF\",\"legendAlign\":\"center\"},\"title\":\"Signal\",\"field\":\"signal\",\"formatter\":\"progress\",\"width\":100,\"headerVertical\":\"flip\"},{\"formatterParams\":{\"min\":2.5,\"max\":3.5,\"color\":[\"red\",\"green\",\"red\"],\"legend\":\"function (value) { if (value>0) return \\\"<span style='color:#FFFFFF;'>\\\"+value+\\\" V</span>\\\"; else return; }\",\"legendColor\":\"#101010\",\"legendAlign\":\"center\"},\"title\":\"Supply\",\"field\":\"supply\",\"formatter\":\"progress\",\"width\":100,\"headerVertical\":\"flip\"},{\"formatterParams\":{\"min\":0,\"max\":100,\"color\":[\"red\",\"orange\",\"green\"],\"legend\":\"function (value) {     if (value>0)         return \\\"<span style='color:#FFFFFF;'>\\\"+value+\\\" %</span>\\\";     else         return; }\",\"legendColor\":\"#101010\",\"legendAlign\":\"center\"},\"title\":\"Battery\",\"field\":\"battery\",\"formatter\":\"progress\",\"width\":100,\"headerVertical\":\"flip\"},{\"formatterParams\":{\"min\":0,\"max\":100000,\"color\":[\"red\",\"orange\",\"green\"],\"legend\":\"function (value) { if (value>0) return \\\"<span style='color:#FFFFFF;'>\\\"+(value/1024).toFixed(2)+\\\" kB</span>\\\"; else return; }\",\"legendColor\":\"#101010\",\"legendAlign\":\"center\"},\"title\":\"Memory\",\"field\":\"freeheap\",\"formatter\":\"progress\",\"width\":100,\"headerVertical\":\"flip\"},{\"formatterParams\":{\"target\":\"_blank\",\"min\":0,\"max\":100,\"color\":[\"red\",\"orange\",\"green\"],\"legend\":\"function (value) {     if (value>0)         return \\\"<span style='color:#FFFFFF;'>\\\"+value+\\\" %</span>\\\";     else         return; }\",\"legendColor\":\"#101010\",\"legendAlign\":\"center\"},\"title\":\"CPU load\",\"field\":\"cpuload\",\"formatter\":\"progress\",\"width\":100,\"headerVertical\":\"flip\"},{\"formatterParams\":{\"min\":20,\"max\":60,\"color\":[\"green\",\"orange\",\"red\"],\"legend\":\"function (value) { if (value>0) return \\\"<span style='color:#FFFFFF;'>\\\"+value+\\\" °C</span>\\\"; else return; }\",\"legendColor\":\"#101010\",\"legendAlign\":\"center\"},\"title\":\"CPU temp\",\"field\":\"cputemp\",\"formatter\":\"progress\",\"width\":100,\"headerVertical\":\"flip\"}]},{\"title\":\"Firmware\",\"columns\":[{\"formatter\":\"link\",\"formatterParams\":{\"labelField\":\"$localip\",\"urlPrefix\":\"http://\",\"target\":\"_blank\"},\"title\":\"IP\",\"field\":\"$localip\",\"width\":100},{\"title\":\"mac\",\"field\":\"$mac\",\"width\":100},{\"title\":\"Accsess Point\",\"field\":\"SSID\",\"width\":100},{\"title\":\"Firmware\",\"field\":\"name\",\"width\":100},{\"title\":\"Version\",\"field\":\"version\",\"width\":100},{\"title\":\"Last Boot Cause\",\"field\":\"lastBootCause\",\"width\":100},{\"title\":\"Reset Reason\",\"field\":\"resetReason\",\"width\":100}]}]},\"customHeight\":12}",
                "ui": {
                    "icon": "font-awesome/fa-table",
                    "label": {
                        "en-US": "Tabulator"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "json",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "tableDataProp",
                "type": "str",
                "value": "row",
                "ui": {
                    "icon": "font-awesome/fa-tag",
                    "label": {
                        "en-US": "rowProperty"
                    }
                }
            },
            {
                "name": "tableIndex",
                "type": "str",
                "value": "$topic",
                "ui": {
                    "icon": "font-awesome/fa-indent",
                    "label": {
                        "en-US": "Index"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "json",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "maxRows",
                "type": "num",
                "value": "0",
                "ui": {
                    "icon": "font-awesome/fa-list-ol",
                    "type": "input",
                    "opts": {
                        "types": [
                            "num",
                            "bool",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "maxStore",
                "type": "num",
                "value": "0",
                "ui": {
                    "icon": "font-awesome/fa-database",
                    "type": "input",
                    "opts": {
                        "types": [
                            "num",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "dashboard",
                "type": "str",
                "value": "Remote Device Table",
                "ui": {
                    "icon": "font-awesome/fa-dashboard",
                    "label": {
                        "en-US": "Dashboard"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "tableContext",
                "type": "json",
                "value": "{\"tableData\":{\"name\":\"tableData\"},\"tableConfig\":{\"name\":\"tableConfig\",\"storage\":\"file\"},\"tableEdit\":{\"name\":\"tableEdit\",\"storage\":\"file\"}}",
                "ui": {
                    "icon": "font-awesome/fa-database",
                    "label": {
                        "en-US": "Context"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "json",
                            "env"
                        ]
                    }
                }
            }
        ],
        "color": "#3FADB5",
        "icon": "node-red-dashboard/ui_slider.png",
        "status": {
            "x": 360,
            "y": 34,
            "wires": [
                {
                    "id": "5eb0bd6b.74b794",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "5958c5854f8ba7cd",
        "type": "subflow",
        "name": "Route & Process MQTT",
        "info": "Used for routing MQTT messages to the relevant database and table updates. \nAlso updates msg.caller with a 'type' property to be displayed on dashboards.\n\nThis is for multiple display handling within the call system\nfor example if you have the following displays within a system:\n 1.   1 dashboard for calling of SV, QC, Maintenance etc\n 2.   1 dashboard for displaying finished goods pickup queue\n 3.   1 dashboard for displaying child part supply queue\n  \nFor each of these displays create one of these nodes and specify the `Message Type` it needs to react to. This needs to be specified in comma separated string of message values. If the value of said message is present within the mqtt msg.payload, then the router will pass on msg to the next node. otherwise, msg stops here. for example: \n\n 1. \"SV,QC,FM\" for calling dashboard\n 2. \"FG\" for finished goods dashboard\n 3. \"CP\" for child parts supply dashboard\n\n",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "ca29863c4aa8e8c4"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1000,
                "y": 80,
                "wires": [
                    {
                        "id": "0a6feae435792b59",
                        "port": 0
                    },
                    {
                        "id": "2d346ea6aca78b20",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "Function Topic",
                "type": "str",
                "value": "call",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "Message Types",
                "type": "str",
                "value": "SV,QC,FM",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            },
            {
                "name": "Database Name",
                "type": "str",
                "value": "callList",
                "ui": {
                    "label": {
                        "en-US": "DataBase Name (list/queue name)"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            },
            {
                "name": "Database Type",
                "type": "str",
                "value": "list",
                "ui": {
                    "type": "select",
                    "opts": {
                        "opts": [
                            {
                                "l": {
                                    "en-US": "List"
                                },
                                "v": "list"
                            },
                            {
                                "l": {
                                    "en-US": "Queue"
                                },
                                "v": "queue"
                            }
                        ]
                    }
                }
            }
        ],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "da1f44dea6948311",
        "type": "subflow",
        "name": "Prepare Display",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 80,
                "y": 140,
                "wires": [
                    {
                        "id": "cbe7722c78ec5828"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 900,
                "y": 240,
                "wires": [
                    {
                        "id": "60e11389bb8c4eeb",
                        "port": 0
                    },
                    {
                        "id": "4b1dda8b64c7e08b",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "List/Queue Name",
                "type": "str",
                "value": "callList",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            },
            {
                "name": "Display Format",
                "type": "json",
                "value": "{}",
                "ui": {
                    "label": {
                        "en-US": "Display Format (JSON)"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "json",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "Refresh Interval",
                "type": "num",
                "value": "5",
                "ui": {
                    "label": {
                        "en-US": "Refresh Rate (secondss)"
                    },
                    "type": "spinner"
                }
            }
        ],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "fa9ee2fc5ce99563",
        "type": "subflow",
        "name": "Prepare Messaging",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 80,
                "y": 80,
                "wires": [
                    {
                        "id": "9c847bce7cbf0393"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 620,
                "y": 80,
                "wires": [
                    {
                        "id": "b5800b192ab7eeeb",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "List/Queue Name",
                "type": "str",
                "value": "callList",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "Recipients List",
                "type": "json",
                "value": "{\"SV\":\"Mgmt/Press\",\"QC\":\"Mgmt/QC/Press\",\"FM\":\"Mgmt/FM/Press\",\"DM\":\"Mgmt/FM/Die\"}",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "json"
                        ]
                    }
                }
            },
            {
                "name": "Escalation Time",
                "type": "num",
                "value": "5",
                "ui": {
                    "label": {
                        "en-US": "Escalation Time (mins)"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "num"
                        ]
                    }
                }
            }
        ],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "2df0c70bc86dd6ae",
        "type": "group",
        "z": "562197b4f4a67922",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "aed69bd7994a8096",
            "d3a0745948b821c9"
        ],
        "x": 34,
        "y": 619,
        "w": 232,
        "h": 122
    },
    {
        "id": "d2bd110790f6ae19",
        "type": "ui_base",
        "theme": {
            "name": "theme-dark",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0075a3",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#b01c1c",
                "baseFont": "Arial Black,Arial Black,Gadget,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "reset": false
            },
            "themeState": {
                "base-color": {
                    "default": "#097479",
                    "value": "#b01c1c",
                    "edited": true
                },
                "page-titlebar-backgroundColor": {
                    "value": "#b01c1c",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#111111",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#df3939",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#555555",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#eeeeee",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#b01c1c",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": false
                },
                "base-font": {
                    "value": "Arial Black,Arial Black,Gadget,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "true",
            "allowSwipe": "false",
            "lockMenu": "icon",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 10,
                "gy": 10,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "85b12cf0fa38d858",
        "type": "ui_group",
        "name": "Production Output",
        "tab": "d5e27fdb153bf0a3",
        "order": 2,
        "disp": false,
        "width": "26",
        "collapse": false,
        "className": ""
    },
    {
        "id": "d5e27fdb153bf0a3",
        "type": "ui_tab",
        "name": "Data",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "56edfd93d9c67181",
        "type": "mqtt-broker",
        "name": "",
        "broker": "8a8b53b135b04c51bbc202862a1eddc9.s2.eu.hivemq.cloud",
        "port": "8883",
        "tls": "",
        "clientid": "asyraf9-nodered",
        "autoConnect": true,
        "usetls": true,
        "protocolVersion": "5",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "AKSB/SA/CONNECTION",
        "birthQos": "0",
        "birthPayload": "Node Red Line F Connected",
        "birthMsg": {},
        "closeTopic": "AKSB/SA/CONNECTION",
        "closeQos": "0",
        "closePayload": "Node Red Line F Disconnecting",
        "closeMsg": {},
        "willTopic": "AKSB/SA/CONNECTION",
        "willQos": "0",
        "willPayload": "Node Red Line F Disconnected",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": "0"
    },
    {
        "id": "7f97a1b59fccc5ce",
        "type": "ui_tab",
        "name": "Alert",
        "icon": "dashboard",
        "order": 5,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "ea1829c43a6e8ad0",
        "type": "telegram bot",
        "botname": "Autokeen Official Bot",
        "usernames": "",
        "chatids": "",
        "baseapiurl": "",
        "updatemode": "none",
        "pollinterval": "1000",
        "usesocks": false,
        "sockshost": "",
        "socksprotocol": "socks5",
        "socksport": "6667",
        "socksusername": "anonymous",
        "sockspassword": "",
        "bothost": "",
        "botpath": "",
        "localbotport": "8443",
        "publicbotport": "8443",
        "privatekey": "",
        "certificate": "",
        "useselfsignedcertificate": false,
        "sslterminated": false,
        "verboselogging": true
    },
    {
        "id": "02f09ba258bf6625",
        "type": "ui_group",
        "name": "Call Queue",
        "tab": "7f97a1b59fccc5ce",
        "order": 2,
        "disp": true,
        "width": 20,
        "collapse": false,
        "className": ""
    },
    {
        "id": "db830ddbd85f76c5",
        "type": "ui_tab",
        "name": "FG Queue",
        "icon": "dashboard",
        "order": 3,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "569dc256923818f6",
        "type": "ui_group",
        "name": "FG Queue",
        "tab": "db830ddbd85f76c5",
        "order": 1,
        "disp": true,
        "width": 25,
        "collapse": false,
        "className": ""
    },
    {
        "id": "145f52da01ded04e",
        "type": "ui_tab",
        "name": "Kowake",
        "icon": "dashboard",
        "order": 4,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "e5276d6b5a48a00a",
        "type": "ui_group",
        "name": "Kowake Queue",
        "tab": "145f52da01ded04e",
        "order": 1,
        "disp": true,
        "width": 25,
        "collapse": false,
        "className": ""
    },
    {
        "id": "5eb0bd6b.74b794",
        "type": "function",
        "z": "2924702c.b33a7",
        "name": "handle tableData",
        "func": "var status = {fill:\"red\",shape:\"dot\",text: \"payload \"};\nvar tableIndex = env.get(\"tableIndex\") || \"$topic\";\nvar tableDataProp = env.get(\"tableDataProp\") || \"row\";\nvar tableContext = env.get(\"tableContext\");\nvar dashboard = env.get(\"dashboard\");\nvar maxRows = env.get(\"maxRows\") || 0;\nvar maxStore = env.get(\"maxStore\") || 0;\n\nif (!tableContext.hasOwnProperty(\"tableData\") || !tableContext.hasOwnProperty(\"tableConfig\")) {\n    status.text=\"tableContext not defined\";\n    node.error(status.text);\n    return [{payload:status},null];\n}\n\n// context store to cache table data (memoryOnly prefered)\nvar tableData = flow.get(\"$parent.\"+tableContext.tableData.name,tableContext.tableData.storage);\nif (tableData===undefined) {\n    node.warn(\"[ui-table handler] tableData initialized!\");\n    tableData={};\n    flow.set(\"$parent.\"+tableContext.tableData.name,tableData,tableContext.tableData.storage);\n}\n\n// context Store to save table configuration (file)\nvar tableConfig = flow.get(\"$parent.\"+tableContext.tableConfig.name,tableContext.tableConfig.storage);\nif (tableConfig===undefined) {\n    node.warn(\"[ui-table handler] tableConfig initialized!\");\n    tableConfig={ResponsiveLayout:true};\n    flow.set(\"$parent.\"+tableContext.tableConfig.name,tableConfig,tableContext.tableConfig.storage);\n}\n\nif (tableConfig.hasOwnProperty(\"maxStore\")) maxStore=tableConfig.maxStore;\nif (tableConfig.hasOwnProperty(\"maxRows\")) maxRows=tableConfig.maxRows;\n\n// context Store to save table configuration (file)\nvar tableEdit;\nif (tableContext.hasOwnProperty(\"tableEdit\")) {\n    tableEdit = flow.get(\"$parent.\"+tableContext.tableEdit.name,tableContext.tableEdit.storage);\n    if (tableEdit===undefined) {\n        node.warn(\"[ui-table handler] tableEdit initialized!\");\n        tableEdit={};\n        flow.set(\"$parent.\"+tableContext.tableEdit.name,tableEdit,tableContext.tableEdit.storage);\n    }\n}\n\n// function to merge partial data into existing table row\nvar mergeObject = function (destination, source, filter) {\n    for (let currentSource in source) {\n        if (source.hasOwnProperty(currentSource)) {\n            if (filter!==undefined && tableEdit && tableEdit.hasOwnProperty(filter) && tableEdit[filter].hasOwnProperty(currentSource)) {\n                destination[currentSource]= tableEdit[filter][currentSource];\n                source[currentSource]=tableEdit[filter][currentSource];\n            } else {\n                destination[currentSource]= source[currentSource];\n            }\n        }    \n    }\n    return source;\n};\n\n// merge edits into a destination object respecting _children\nvar mergeEdits = function(destination) {\n    \n    var mergeChildEdits = function(children) {\n        children.forEach(child => {\n            if (child.hasOwnProperty(tableIndex) && tableEdit.hasOwnProperty(child[tableIndex])) {\n//                node.warn([\"mergeChild\",child])\n                Object.keys(tableEdit[child[tableIndex]]).forEach(edit => {\n                    if (child.hasOwnProperty(edit)) {\n                        child[edit]=tableEdit[child[tableIndex]][edit];\n//                        node.warn([\"mergeChild edit \",edit,child[edit]])\n                    }\n                });\n            }\n            if (child.hasOwnProperty(\"_children\")) {\n                mergeChildEdits(child._children);\n            }\n        })\n    }\n    \n\n    Object.keys(destination).forEach(row => {\n        if (destination[row].hasOwnProperty(tableIndex)) {\n            if (tableEdit.hasOwnProperty(row)) {\n                Object.keys(tableEdit[row]).forEach(edit => {\n                    destination[row][edit]=tableEdit[row][edit];\n                });\n            }\n            if (destination[row].hasOwnProperty(\"_children\")) {\n                mergeChildEdits(destination[row]._children);\n            }\n       }\n    });\n}\n\n// deep search for a column including nested columns\nvar searchTabulatorColumn = function (columns,key,match) {\n    var result;\n    for (let column of columns) {\n        if (column.hasOwnProperty(\"columns\")) {\n            result = searchTabulatorColumn(column.columns,key,match);\n            if (result!==undefined) return result;\n        } else if (column.hasOwnProperty(key) && column[key]===match) {\n            return column;\n        }\n    }\n};\n\n// command message to update add or update data on ui-table\nvar msgToTable={};\nmsgToTable.payload={\n    \"command\":msg.tabulatorCommand || \"updateOrAddData\",\n    \"arguments\": [],\n    \"returnPromise\": false\n};\n\n// store data in tableData\nif (msg.hasOwnProperty(tableDataProp)) {\n    // store data for later recover\n    if (!msg.hasOwnProperty(\"topic\")) { // check if index existst\n        status.text=\"msg.topic not defined!\";\n        return [{payload:status},null];\n    }\n    if (!tableData.hasOwnProperty(msg.topic)){ // first seen\n        if (maxRows>0 && Object.keys(tableData).lenght===0) {\n            tableConfig.currentFirstRow=msg.topic;\n        }\n        tableData[msg.topic]={};\n        if (tableEdit && tableEdit.hasOwnProperty(msg.topic)) { // table edits available!\n            Object.keys(tableEdit[msg.topic]).forEach((key) => {\n                msg[tableDataProp][key]=tableEdit[msg.topic][key];\n                tableData[msg.topic][key]=tableEdit[msg.topic][key];\n            })\n        }\n        if (maxStore>0 && typeof msg.topic === \"number\") { // limit rows in tableData\n            let rowKeys = Object.keys(tableData);\n            if (rowKeys.length>maxStore) {\n                for (let i=0; i<(rowKeys.length-maxStore); i++) {\n                    delete tableData[rowKeys[i]];\n                }\n            }\n        }\n    }\n    if (!tableData[msg.topic].hasOwnProperty(tableIndex)) tableData[msg.topic][tableIndex]=msg.topic;\n    msg[tableDataProp]=mergeObject(tableData[msg.topic],msg[tableDataProp],msg.topic);\n    msg[tableDataProp][tableIndex]=msg.topic;\n    msgToTable.payload.arguments=[[msg[tableDataProp]]];\n    // add aditional parameters\n    if (msg.hasOwnProperty(\"tabulatorParameter\") && Array.isArray(msg.tabulatorParameter)) {\n        for (let arg in msg.tabulatorParameter) msgToTable.payload.arguments.push(arg);\n    }\n    // delete rows if rows exceed maxRows\n    /*\n    if (maxRows>0 && tableConfig.hasOwnProperty(\"currentFirstRow\") && typeof tableData[msg.topic][tableIndex]===\"number\") {\n        //node.warn([maxRows,tableConfig.hasOwnProperty(\"currentFirstRow\"),typeof tableData[msg.topic][tableIndex],tableConfig.currentFirstRow,tableData[msg.topic][tableIndex]-maxRows])\n        if (tableConfig.currentFirstRow<tableData[msg.topic][tableIndex]-maxRows) {\n            node.warn([\"maxRowExeeded\",tableConfig.currentFirstRow]);\n            node.send([null,{payload:{\"command\":\"deleteRow\",\"arguments\": [tableConfig.currentFirstRow],\"returnPromise\": false}},null]);\n            tableConfig.currentFirstRow++;\n        }\n    }*/\n    if (maxRows>0 && typeof tableData[msg.topic][tableIndex]===\"number\" && msg.topic-maxRows>0) {\n        node.send([null,{payload:{\"command\":\"deleteRow\",\"arguments\": [msg.topic-maxRows],\"returnPromise\": false}},null]);\n    }\n    status.fill=\"green\";\n    status.text=msg.topic+\" updated\";\n    return [{payload:status},msgToTable,null];\n} if (msg.payload===\"connect\" || (msg.payload===\"change\" && msg.name===dashboard) || (msg.hasOwnProperty(\"payload\") && msg.payload.hasOwnProperty(\"command\"))) { \n    if (!msg.hasOwnProperty(\"ui_control\")) {\n        msg.ui_control = env.get('tabulator');\n        status.text+=\" ui_control added\";\n    }\n    //process commands\n    //node.warn({\"command\":msg.payload.command,\"msg\":msg,\"object\":msg.payload.object})\n    if (msg.payload.hasOwnProperty(\"command\") && msg.payload.command!=='getTable') {\n        status.fill=\"blue\";\n        switch(msg.payload.command) {\n            case 'deleteTable':\n                flow.set(\"$parent.\"+tableContext.tableData.name,undefined,tableContext.tableData.storage);\n                tableData={};\n                status.text=\"tabledata deleted\";\n                node.warn(\"[ui-table handler] \"+\"tabledata deleted\");\n                break;\n            case 'deleteRow':\n            case 'deleteDevice':\n                var deleteRow = function(id) {\n                    // check if row is in root\n                    if (tableData.hasOwnProperty(id)) {\n                        delete tableData[id]\n                        return true;\n                    }\n                    // check if row is a child\n                    let deleteChildRow = function(children, id) {\n                        for(let i = 0; i < children.length; i++){\n                            if (children[i].hasOwnProperty(tableIndex) && children[i][tableIndex]===id) {\n                                children.splice(i, 1); \n                                return true; \n                            }\n                            if (children[i].hasOwnProperty(\"_children\")) {\n                                if (deleteChildRow(children[i]._children,id)) {\n                                    if (children[i]._children.length === 0) {\n                                        delete children[i]._children;\n                                    }\n                                    return true;\n                                }\n                            }\n                        }\n                        return false;\n                    };\n                    \n                    for (let row in tableData) {\n                        if (tableData[row].hasOwnProperty(\"_children\")) {\n                            if (deleteChildRow(tableData[row]._children,id)) return true;\n                        }\n                    }\n                    return false;\n                }\n                \n                if (deleteRow(msg.payload.object)) {\n                    status.text=msg.payload.object+\" deleted\";\n                } else {\n                    status.fill=\"yellow\";\n                    status.text=msg.payload.object+\" undefined\";\n                }\n                break;\n            case 'ignoreRow':\n            case 'ignoreDevice':\n                if (tableData.hasOwnProperty(msg.payload.object)) {\n                    delete tableData[msg.payload.object];\n                    status.text=msg.payload.object+\" will be ignored\";\n                    if (!tableConfig.hasOwnProperty('ignoreDevice')) tableConfig.ignoreDevice={};\n                    tableConfig.ignoreDevice[msg.payload.object]=true;\n                }\n                break;\n            case 'unIgnoreRow':\n            case 'unIgnoreDevice':\n                if (tableConfig.hasOwnProperty('ignoreDevice')) {\n                    delete tableConfig.ignoreDevice[msg.payload.object];\n                }\n                break;\n            case 'unIgnoreRows':\n            case 'unIgnoreDevices':\n                delete tableConfig.ignoreDevice;\n                break;\n            case 'updateData':\n                status.text=\"column \"+msg.payload.column+\" updated\";\n                delete msg.ui_control;\n                return [{payload:status},msg];\n            case 'updateTable':\n                status.text=msg.payload.command+\": \";\n                break;\n            case 'columnHide':\n                if (!tableConfig.hasOwnProperty('columnVisible')) tableConfig.columnVisible={};\n                tableConfig.columnVisible[msg.payload.object]=false;\n                break;\n            case 'columnUnHide':\n                if (!tableConfig.hasOwnProperty('columnVisible')) tableConfig.columnVisible={};\n                tableConfig.columnVisible[msg.payload.object]=true;\n                break;\n            case 'columnsUnHide':\n                for (let column in tableConfig.columnVisible) {\n                    if (tableConfig.columnVisible.hasOwnProperty(column)) tableConfig.columnVisible[column]=true;\n                }\n                break;\n            case 'refreshTable':\n                break;\n            case 'deleteColumnOrder':\n            case 'restoreColumnOrder':\n                delete tableConfig.columns;\n                break;\n            case 'deleteColumnWidth':\n            case 'resetColumnWidth':\n                delete tableConfig.columnWidths;\n                break;\n            case 'setResponsiveLayout':\n                tableConfig.ResponsiveLayout=!tableConfig.ResponsiveLayout;\n                break;\n            case 'deleteRowOrder':\n                delete tableConfig.rowOrder;\n                break;\n            case 'setMaxStore':\n                tableConfig.maxStore=msg.payload.object;\n                maxStore=msg.payload.object;\n                break;\n            case 'setMaxRows':\n                tableConfig.maxRows=msg.payload.object;\n                maxRows=msg.payload.object;\n                break;\n            default:\n                status.fill=\"red\";\n                status.text=\"unknown command \"+msg.payload.command;\n                node.warn(\"[ui-table handler] \"+status.text);\n                break;\n        }\n        flow.set(\"$parent.\"+tableContext.tableConfig.name,tableConfig,tableContext.tableConfig.storage);\n        node.send([{payload:status},null,null]);\n    }\n\n    // crawl through tabulator arrays and updated user defined values\n    var crawlTabulator = function (columns,match,config,property) {\n        for (let column of columns) {\n            if (column.hasOwnProperty(\"columns\")) {\n                crawlTabulator(column.columns,match,config,property);\n            } else if (config.hasOwnProperty(column[match])) column[property]=config[column.field];\n        }\n    };\n    \n    // restore custom column width\n    if (tableConfig.hasOwnProperty(\"columnWidths\") && msg.hasOwnProperty(\"ui_control\")) {\n        crawlTabulator(msg.ui_control.tabulator.columns,\"field\",tableConfig.columnWidths,\"width\");\n    }\n    \n    // restore custom column hide/show\n    if (tableConfig.hasOwnProperty(\"columnVisible\") && msg.hasOwnProperty(\"ui_control\")) {\n        crawlTabulator(msg.ui_control.tabulator.columns,\"field\",tableConfig.columnVisible,\"visible\");\n    }\n    \n    // restore custom responsive / standard view\n    if (tableConfig.hasOwnProperty(\"ResponsiveLayout\")) {\n        if (!tableConfig.ResponsiveLayout) {\n            msg.ui_control.tabulator.responsiveLayout=false;\n        }\n        msg.ui_control.tabulator.columns.forEach((column,index) => {\n            if (column.formatter===\"responsiveCollapse\") { // hide expand column on any position\n                column.visible=tableConfig.ResponsiveLayout;\n                return;\n            }\n        });\n    }\n\n    // sort columns\n    if (tableConfig.hasOwnProperty(\"columns\") && msg.hasOwnProperty(\"ui_control\") && msg.ui_control.hasOwnProperty(\"tabulator\")) {\n        var addedColumns = 0;\n        var sortColumnsByLayout = function (sortColumns, columnsLayout, targetColumns) {\n            for (var layoutColumn=0;  layoutColumn<columnsLayout.length; layoutColumn++) {\n                for (var sortColumn in sortColumns) {\n                    if (sortColumns[sortColumn].hasOwnProperty(\"columns\")) {\n                        targetColumns.push({\"title\":sortColumns[sortColumn].title, \"columns\":[]});\n                        sortColumnsByLayout(sortColumns[sortColumn].columns,columnsLayout,targetColumns[targetColumns.length-1].columns);\n                        layoutColumn=addedColumns; // jump forward after childes added\n                    } else {\n                        if (columnsLayout[layoutColumn].field===sortColumns[sortColumn].field){\n                            targetColumns.push(sortColumns[sortColumn]);\n                            addedColumns++;\n                            break;\n                        }\n                    }\n                }\n            }\n        };                 \n        var newColumns=[];\n        sortColumnsByLayout(msg.ui_control.tabulator.columns,tableConfig.columns,newColumns);\n        msg.ui_control.tabulator.columns=newColumns;\n    }\n\n    // restore stored lines after connect\n\n    let command = msg.payload.command;\n    var tableArray;\n    if (command===\"getTable\") {\n        msg.payload.tableArray=[];\n        tableArray=msg.payload.tableArray\n    } else {\n        msg.payload=[];\n        tableArray=msg.payload;\n    }\n    \n    var pushRowData = function(rowData) {\n        // ignore rows in ignoreRows array\n        if (tableConfig && tableConfig.hasOwnProperty(\"ignoreDevice\") && tableConfig.ignoreDevice[rowData]) {\n            // do nothing\n        } else {\n            // merge edits into table\n            if (tableEdit && tableEdit.hasOwnProperty(rowData)) {\n                let tableRow = RED.util.cloneMessage(tableData[rowData]);\n                Object.keys(tableEdit[rowData]).forEach((field) => {\n                    tableRow[field]=tableEdit[rowData][field];\n                });\n                tableArray.push(tableRow);\n            } else {\n                tableArray.push(tableData[rowData]);\n            }\n        }\n    }\n    \n    if (tableConfig.hasOwnProperty(\"rowOrder\")) {\n        // first check if new rows exits which are not in rowOrder\n        Object.keys(tableData).forEach((key) => {\n            if (tableConfig.rowOrder.indexOf(tableData[key][tableIndex])<0) {\n                tableConfig.rowOrder.push(tableData[key][tableIndex]); // add row to the end of rowOrder\n            }\n        });\n        tableConfig.rowOrder.forEach((value,index) => {\n            node.warn([\"pushRowOrder\",value,tableData.hasOwnProperty(value),tableData[value]]);\n            if (tableData.hasOwnProperty(value)) { // push rows in rowOrder sequence\n                pushRowData(value);\n            } else { // delete not existing rows from rowOrder\n                tableConfig.rowOrder.splice(index,1)\n            }\n       });\n    } else {\n        for (let rowData in tableData) {\n            pushRowData(rowData);\n        }\n    }\n    // store the first index if maxRows limits amount of displayed lines\n    if (maxRows>0 && tableData) {\n        let tableKeys=Object.keys(tableData);\n        if (tableKeys.length>0 && typeof tableData[tableKeys[0]][tableIndex] === \"number\") {\n            tableConfig.currentFirstRow=tableData[tableKeys[0]][tableIndex];\n        }\n    }\n    \n    if (command=='getTable'){\n        status.fill=\"blue\";\n        status.text+=\" \"+tableArray.length+\" rows emitted\";\n        return [{payload:status},null,msg];\n    } else {\n        status.fill=\"blue\";\n        status.text+=\" \"+tableArray.length+\" rows restored\";\n        return [{payload:status},msg,[{topic:\"maxRows\",payload:maxRows},{topic:\"maxStore\",payload:maxStore}]];\n    }\n} if (msg.hasOwnProperty(\"ui_control\")) {\n    // callback from tabulator\n    status.fill=\"blue\";\n    status.text=\"callback \"+msg.ui_control.callback;\n    switch(msg.ui_control.callback) {\n        case \"columnResized\": // save new column width\n            if (tableConfig.columnWidths===undefined) tableConfig.columnWidths={};\n            tableConfig.columnWidths[msg.ui_control.columnWidths.field]=msg.ui_control.columnWidths.width;\n            flow.set(\"$parent.\"+tableContext.tableConfig.name,tableConfig,tableContext.tableConfig.storage);\n            status.text=msg.ui_control.columnWidths.field+\"=\"+msg.ui_control.columnWidths.width+\"px\";\n            break;\n        case \"columnMoved\": // save new column order\n            if (tableConfig.columns===undefined) tableConfig.columns=[];\n            tableConfig.columns=msg.ui_control.columns;\n            flow.set(\"$parent.\"+tableContext.tableConfig.name,tableConfig,tableContext.tableConfig.storage);\n            status.text=\"new column order\";\n            break;\n        case \"cellEdited\":\n            if (tableEdit) {\n                if (!tableEdit.hasOwnProperty(msg[tableIndex])) tableEdit[msg[tableIndex]]={};\n                tableEdit[msg[tableIndex]][msg.field] = msg.payload; // save data and mark as edited field\n                flow.set(\"$parent.\"+tableContext.tableEdit.name,tableEdit,tableContext.tableEdit.storage);\n                mergeEdits(tableData);\n                flow.set(\"$parent.\"+tableContext.tableData.name,tableData,tableContext.tableData.storage);\n                status.text=msg[tableIndex]+\" \"+msg.field+\" edited to \"+msg.payload;\n                msg[tableDataProp]={};\n                msg[tableDataProp][tableIndex]=msg[tableIndex];\n                msg[tableDataProp][msg.field]=msg.payload;\n                msgToTable.payload.arguments=[[msg[tableDataProp]]];\n                node.send([{payload:status},null,msg]); // was node.send([{payload:status},msgToTable,msg]);\n            } else {\n                node.error(\"[ui-table handler] no tableEdit store defined!\")\n            }\n            break;\n        case \"rowContext\":\n            msg.ignoredDevices=[];\n            for (let rowData in tableConfig.ignoreDevice) {\n                if (tableConfig.ignoreDevice.hasOwnProperty(rowData)) {\n                    msg.ignoredDevices.push({\"text\":rowData,\"icon\":\"fa fa-plug\",\"topic\":\"unIgnoreDevice\",\"payload\":rowData})  \n                }\n            }\n            break;\n        case \"headerContext\":\n            msg.hiddenColumns=[];\n            let tabulatorConfig = env.get('tabulator');\n            for (let column in tableConfig.columnVisible) {\n                if (tableConfig.columnVisible.hasOwnProperty(column) &&\n                    !tableConfig.columnVisible[column]) {\n                    let configColumn=searchTabulatorColumn(tabulatorConfig.tabulator.columns,\"field\",column);\n                    let icon;\n                    if (configColumn.hasOwnProperty('title') && configColumn.title.toLowerCase().includes('</i>')) {\n                        // <i class='fa fa-star-half-o'></i> State\n                        let start=configColumn.title.indexOf(\"'fa \");\n                        let end=configColumn.title.indexOf(\"'\",start+1);\n                        icon=configColumn.title.substring(start+4,end);\n                    }\n                    msg.hiddenColumns.push({\"text\":column,\"icon\":icon,\"topic\":\"columnUnHide\",\"payload\":configColumn.field})  \n                }\n            }\n            break;\n        case \"rowMoved\":\n            if (tableConfig.rowOrder===undefined) tableConfig.rowOrder={};\n            tableConfig.rowOrder=msg.ui_control.rowOrder;\n            flow.set(\"$parent.\"+tableContext.tableConfig.name,tableConfig,tableContext.tableConfig.storage);\n            status.text=\"new row order\";\n            break;\n        default:\n            // if rowIndex exists pass complete object\n            if (msg.hasOwnProperty(tableIndex)) {\n                msg.rowData=tableData[msg[tableIndex]];\n            }\n            status.text=\"pass message\";\n    }\n    return [{payload:status},null,msg];\n} \nif (Array.isArray(msg.payload)) {\n    tableData={};\n    \n    msg.payload.forEach((row) => {\n        if (row.hasOwnProperty(tableIndex)) {\n            tableData[row[tableIndex]]=row;\n        }\n    });\n    if (msg.keepEdits) {\n        mergeEdits(tableData);\n    }\n\n    \n    flow.set(\"$parent.\"+tableContext.tableData.name,tableData,tableContext.tableData.storage);\n    if (tableContext.hasOwnProperty(\"tableEdit\") && !msg.keepEdits) {\n        tableEdit={};\n        flow.set(\"$parent.\"+tableContext.tableEdit.name,tableEdit,tableContext.tableEdit.storage);\n    }\n    status.fill=\"blue\"\n    status.text=\"table replaced \"+msg.payload.length+\" rows\";\n    return [{payload:status},msg,null];\n}    \n    \n// nothing to do bejond this point\nstatus.text+=\" [\"+msg.payload+\"]\";\nreturn [{payload:status},null];\n",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 190,
        "y": 80,
        "wires": [
            [],
            [],
            []
        ],
        "icon": "font-awesome/fa-table"
    },
    {
        "id": "ca29863c4aa8e8c4",
        "type": "function",
        "z": "5958c5854f8ba7cd",
        "name": "Route MQTT Msg",
        "func": "let target = env.get(\"Message Types\");\nlet dbType = env.get(\"Database Type\");\nlet message = JSON.parse(JSON.stringify(msg.payload)); //HACK:in the future can change this to structuredClone\nlet callText = \"\";\nlet callFor = [];\nlet targetFound = false;\nlet otherTargetFound = false;\nmsg.callBy = msg.callBy ? msg.callBy : {};\n\ntarget = target.split(\",\")\ntarget.forEach((val,i,arr) => {\n    arr[i] = val.trim();\n});\n\nfor(let i in target){\n    if(message[target[i]] == true){\n        targetFound = true;\n        callText += target[i] + \", \";\n        callFor.push(target[i]);\n        delete message[target[i]];\n    } \n} \n\ncallText = callText.slice(0,-2);\nmsg.callBy.type = callText;\nmsg.callBy.callFor = callFor;\n\nif (Object.keys(message) > 0) {\n    message.forEach((val) => {\n        if(val) {\n            otherTargetFound = true;\n        }\n    })\n}\n\nif(dbType == 'list') {\n    // if dataType is list, return msg whether empty or not, but if other\n    // targets (other than the set targets) are found don't return msg\n    if(!otherTargetFound) {\n        return msg;\n    }\n} else if(dbType == 'queue'){\n    // if dataType is queue return msg only when targetFound. \n    if(targetFound){\n        return msg;\n    }\n} \n    \nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 80,
        "wires": [
            [
                "da8bd97b81da3575"
            ]
        ],
        "info": "This node does exactly what it says: \n\nRoute MQTT message according to caller\n\nif the message defined in the subflow corresponds to the ones in the MQTT message, then the subflow continues. \n\nthis router checks for two different scenarios according to call type:\n\n1) List\nwhen the call is a list type, then router not only allows the subflow to continue the defined messages are present within the MQTT message, but when the defined messages are absent as well - provided, that there are no other messages within the call (meaning it is a call for something else) - this is because list type calls are deactivated by an empty MQTT message. \n\n2) Queue\nWhen the call is a queue type, then router will only allow the subflow to continue when the defined messages are present within the MQTT message. this is because queue type calls are deactivated by clicking on the corresponding row in the queue.\n\nrouter also updates msg.caller.type to the corresponding values found within the MQTT message. this is for processing further down the subflow and the calling system\n"
    },
    {
        "id": "da8bd97b81da3575",
        "type": "function",
        "z": "5958c5854f8ba7cd",
        "name": "Process MQTT Topic",
        "func": "let callName = env.get(\"Function Topic\");\nlet topic = msg.topic.split(\"/\"+callName+\"/\");\nlet callBy = {\n    \"plant\" : topic[0],\n    \"id\" : topic[1],\n    \"timestamp\": Date.now()\n}\ntopic = callBy.id.split(\"/\");\n\nfor (let word of topic) {\n    word = word.split(\"-\");\n    callBy[word[0]] = word[1].toUpperCase();\n}\n\nObject.assign(msg.callBy, callBy);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 80,
        "wires": [
            [
                "82f3836ced33bc01"
            ]
        ]
    },
    {
        "id": "82f3836ced33bc01",
        "type": "switch",
        "z": "5958c5854f8ba7cd",
        "name": "List or Queue?",
        "property": "Database Type",
        "propertyType": "env",
        "rules": [
            {
                "t": "eq",
                "v": "list",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "queue",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 660,
        "y": 80,
        "wires": [
            [
                "0a6feae435792b59"
            ],
            [
                "2d346ea6aca78b20"
            ]
        ]
    },
    {
        "id": "0a6feae435792b59",
        "type": "function",
        "z": "5958c5854f8ba7cd",
        "name": "Update List",
        "func": "// caller is already prepared from previous nodes.\n// it will either have a list of call types, or be empty. \nlet list = \"$parent.\" + env.get(\"Database Name\");\nlet dbList = flow.get(list);\nlet callBy = msg.callBy;\nmsg.saveData = {};\n// node.warn(dbList);\n\nif (callBy.type.length < 1){\n    //if caller.type is empty, means call from caller is cleared\n    //update msg.saveData\n    msg.saveData = dbList.find((call) => { return call.id == callBy.id});\n    msg.saveData.endTimeStamp = Date.now();\n    //delete caller row in list\n    dbList = dbList.filter((call) => { return call.id != callBy.id });\n    flow.set(list, dbList);\n} else {\n    //else if caller.type is not empty, means call from caller is a new call\n    //if caller already exists in list, update that caller row\n    //else add caller to list. \n    let index = dbList.findIndex((call) => { return call.id == callBy.id });\n    if (index > -1) {\n        dbList[index] = callBy;\n    } else {    \n        dbList.push(callBy);\n    }\n    flow.set(list, dbList);\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "2d346ea6aca78b20",
        "type": "function",
        "z": "5958c5854f8ba7cd",
        "name": "Update Queue",
        "func": "let queue = \"$parent.\"+env.get(\"Database Name\");\nlet dbQueue = flow.get(queue);\nlet callBy = msg.callBy;\n\ndbQueue.push(callBy);\nflow.set(queue, dbQueue);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "60e11389bb8c4eeb",
        "type": "change",
        "z": "da1f44dea6948311",
        "name": "transform timestamps",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload[].{ \t    \"Plant\":plant,\t    \"Department\":dept,\t    \"Line\":line,\t    \"Cell\":cell,\t    \"Calling\":type,\t    \"Time\":$moment(timestamp).fromNow()\t}",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 740,
        "y": 120,
        "wires": [
            [
                "130156beb9f78413"
            ]
        ]
    },
    {
        "id": "d1149b483e78ed1d",
        "type": "delay",
        "z": "da1f44dea6948311",
        "name": "Delay",
        "pauseType": "delayv",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 470,
        "y": 360,
        "wires": [
            [
                "f032a993da54f785"
            ]
        ]
    },
    {
        "id": "4b1dda8b64c7e08b",
        "type": "change",
        "z": "da1f44dea6948311",
        "name": "false: empty table",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "[]",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 530,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "cbe7722c78ec5828",
        "type": "function",
        "z": "da1f44dea6948311",
        "name": "db is not empty?",
        "func": "// let db = ;\n\nif(flow.get(\"$parent.\"+ env.get(\"List/Queue Name\")).length == 0) {\n    return [null, msg];\n}\n\nreturn [msg, null];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 140,
        "wires": [
            [
                "f032a993da54f785"
            ],
            [
                "4b1dda8b64c7e08b"
            ]
        ]
    },
    {
        "id": "f032a993da54f785",
        "type": "function",
        "z": "da1f44dea6948311",
        "name": "Update List",
        "func": "let db = flow.get(\"$parent.\" + env.get(\"List/Queue Name\"));\nlet ui = env.get(\"Display Format\");\n\nmsg.payload = db;\nmsg.ui_control = ui;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 120,
        "wires": [
            [
                "60e11389bb8c4eeb"
            ]
        ]
    },
    {
        "id": "130156beb9f78413",
        "type": "function",
        "z": "da1f44dea6948311",
        "name": "db is not empty?",
        "func": "if(flow.get(\"$parent.\"+ env.get(\"List/Queue Name\")).length == 0) {\n    return null;\n} else {\n    msg.delay = env.get(\"Refresh Rate\")*1000;\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 360,
        "wires": [
            [
                "d1149b483e78ed1d"
            ]
        ]
    },
    {
        "id": "e4d3bccbb49e813b",
        "type": "comment",
        "z": "da1f44dea6948311",
        "name": "",
        "info": "payload[].{ \n    \"Plant\":plant,\n    \"Department\":dept,\n    \"Line\":line,\n    \"Cell\":cell,\n    \"Calling\":type,\n    \"Time (mins)\":$round(-1*$moment(timestamp).diff($moment(), 'minutes', 1), 2)\n}",
        "x": 160,
        "y": 240,
        "wires": []
    },
    {
        "id": "b5800b192ab7eeeb",
        "type": "function",
        "z": "fa9ee2fc5ce99563",
        "name": "process targets",
        "func": "let dbName = env.get(\"List/Queue Name\");\nlet db = flow.get(\"$parent.\"+ dbName);\nlet recipients = env.get(\"Recipients List\");\nlet escalateTime = env.get(\"Escalation Time\");\n// node.warn(\"escalateTime:\" + escalateTime);\nlet msgs = [];\n\ndb.forEach((row) => {\n    let escalation = row.escalation? row.escalation : 0;\n    let lapsedTime = Date.now() - row.timestamp;\n    let nextEscalation = escalateTime*escalation*60000;\n    // if duration from when call was made to now is bigger than the multiple of \n    // escalateTime multiplied by number of escalations, then do the following\n    if(escalation == 0 || lapsedTime > nextEscalation) {\n        let message = {};\n        message.payload = {};\n        \n        for(let callFor of row.callFor) {\n            let msgHierarchy = recipients[callFor].split(\"/\");\n            let hierarchyLength = msgHierarchy.length - escalation;\n            // node.warn(\"msgHierarchy length:\" + msgHierarchy.length);\n            // node.warn(\"escalation:\" + escalation);\n            \n            // if hierarchyLength is 1 or less, then set it to 1 so slice will take\n            // topmost array value only. if more than 1 then deduct 1 from the value\n            // so that slice will take the correct number of array values according to \n            // array indexing \n            hierarchyLength = hierarchyLength > 1 ? hierarchyLength : 1;\n        \n            // reconstruct msgHierarchy and put into targets. \n            msgHierarchy = msgHierarchy.slice(0,hierarchyLength);\n            // construct msg.payload for each row to send as array to next node\n            message.payload.type = \"message\";\n            message.payload.target = msgHierarchy;\n            message.payload.content = \"Call For: \" + row.type + \"\\nCaller:\\n\\tDept:\\t\" + row.dept + \"\\n\\tLine:\\t\" + row.line + \"\\n\\tCell:\\t\" + row.cell;\n            msgs.push(message);\n        }\n        escalation++;\n    }\n    row.escalation = escalation;\n})\n\nflow.set(\"parent.\" + dbName, db);\n// for(let i in msgCallBy.callFor) {\n//     let callFor = msgCallBy.callFor[i];\n//     node.warn(callFor);\n//     targets.push(recipients[callFor]);\n//     messageText += `Call For: ${msgCallBy.type}\n// Caller:\n//     Dept:   ${msgCallBy.dept}\n//     Line:   ${msgCallBy.line}\n//     Cell:   ${msgCallBy.cell}`;\n// }\n\n// msg.payload.target = targets;\n// msg.payload.type = \"message\";\n// msg.payload.content = message;\n\nreturn msgs;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 80,
        "wires": [
            [
                "1fb3e3bc8968bbee"
            ]
        ]
    },
    {
        "id": "9c847bce7cbf0393",
        "type": "function",
        "z": "fa9ee2fc5ce99563",
        "name": "db is not empty?",
        "func": "// let db = ;\n\nif(flow.get(\"$parent.\"+ env.get(\"List/Queue Name\")).length == 0) {\n    return null;\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 80,
        "wires": [
            [
                "b5800b192ab7eeeb"
            ]
        ]
    },
    {
        "id": "6259b7f6a580ffc5",
        "type": "delay",
        "z": "fa9ee2fc5ce99563",
        "name": "Delay",
        "pauseType": "delayv",
        "timeout": "5",
        "timeoutUnits": "minutes",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 470,
        "y": 240,
        "wires": [
            [
                "b5800b192ab7eeeb"
            ]
        ]
    },
    {
        "id": "1fb3e3bc8968bbee",
        "type": "function",
        "z": "fa9ee2fc5ce99563",
        "name": "db is not empty?",
        "func": "if(flow.get(\"$parent.\"+ env.get(\"List/Queue Name\")).length == 0) {\n    return null;\n} else {\n    // multiplied by 60000 to convert escalation time to milliseconds. 100 is added to \n    // to allow a slight delay to enable Escalation Time to take effect.\n    msg.delay = env.get(\"Escalation Time\")*60100;\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 240,
        "wires": [
            [
                "6259b7f6a580ffc5"
            ]
        ]
    },
    {
        "id": "d7197fbf265fda54",
        "type": "mqtt in",
        "z": "327571d15da5aceb",
        "name": "AKSB MQTT Server",
        "topic": "AKSB/SA/call/#",
        "qos": "1",
        "datatype": "json",
        "broker": "56edfd93d9c67181",
        "nl": false,
        "rap": true,
        "rh": "2",
        "inputs": 0,
        "x": 110,
        "y": 160,
        "wires": [
            [
                "e039e2b37c45b70f",
                "61765029e1a65f4f",
                "b25444582b5abffb",
                "bbea780b13bb2921"
            ]
        ]
    },
    {
        "id": "79d2dbe7240fa5dc",
        "type": "debug",
        "z": "327571d15da5aceb",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1000,
        "y": 180,
        "wires": []
    },
    {
        "id": "80b1fb2dd47643d8",
        "type": "ui_ui_control",
        "z": "327571d15da5aceb",
        "name": "",
        "events": "all",
        "x": 820,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "2022fca4a20f48d0",
        "type": "change",
        "z": "327571d15da5aceb",
        "name": "false: Dashboard",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"tab\":\"Data\"}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 650,
        "y": 540,
        "wires": [
            [
                "80b1fb2dd47643d8"
            ]
        ]
    },
    {
        "id": "39f563b3717d924b",
        "type": "ui_ui_control",
        "z": "327571d15da5aceb",
        "name": "",
        "events": "all",
        "x": 820,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "60ec8fc7c03081d6",
        "type": "change",
        "z": "327571d15da5aceb",
        "name": "true: Alert",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"tab\":\"Alert\"}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 620,
        "y": 500,
        "wires": [
            [
                "39f563b3717d924b"
            ]
        ]
    },
    {
        "id": "eb8b7ad763ba6eb8",
        "type": "switch",
        "z": "327571d15da5aceb",
        "d": true,
        "name": "Change Tab?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 450,
        "y": 520,
        "wires": [
            [
                "60ec8fc7c03081d6"
            ],
            [
                "2022fca4a20f48d0"
            ]
        ]
    },
    {
        "id": "a48c49277460197f",
        "type": "ui_table",
        "z": "327571d15da5aceb",
        "group": "02f09ba258bf6625",
        "name": "Call Queue",
        "order": 1,
        "width": 20,
        "height": 7,
        "columns": [],
        "outputs": 0,
        "cts": false,
        "x": 750,
        "y": 160,
        "wires": []
    },
    {
        "id": "93a21d5dcdc32268",
        "type": "ui_table",
        "z": "327571d15da5aceb",
        "group": "569dc256923818f6",
        "name": "FG Queue",
        "order": 1,
        "width": 25,
        "height": 7,
        "columns": [],
        "outputs": 1,
        "cts": true,
        "x": 750,
        "y": 220,
        "wires": [
            [
                "26197aba70f1aa94"
            ]
        ]
    },
    {
        "id": "26197aba70f1aa94",
        "type": "function",
        "z": "327571d15da5aceb",
        "name": "Delete rows onclick",
        "func": "let queue = flow.get(\"fgQueue\");\n\nif(msg.row > -1){\n    if(queue.length > 1) {\n        queue.splice(msg.row, 1);\n    } else {\n        queue=[]; \n    }\n}\n\nflow.set(\"fgQueue\", queue);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 280,
        "wires": [
            [
                "d693f6da18b37b36"
            ]
        ]
    },
    {
        "id": "e054f574d3e939c0",
        "type": "ui_table",
        "z": "327571d15da5aceb",
        "group": "e5276d6b5a48a00a",
        "name": "KW Queue",
        "order": 1,
        "width": 25,
        "height": 7,
        "columns": [],
        "outputs": 1,
        "cts": true,
        "x": 750,
        "y": 340,
        "wires": [
            [
                "c4d311be3afeebfe"
            ]
        ]
    },
    {
        "id": "c4d311be3afeebfe",
        "type": "function",
        "z": "327571d15da5aceb",
        "name": "Delete rows onclick",
        "func": "let queue = flow.get(\"kwQueue\");\n\nif(msg.row > -1){\n    if(queue.length > 1) {\n        queue.splice(msg.row, 1);\n    } else {\n        queue=[]; \n    }\n}\n\nflow.set(\"kwQueue\", queue);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 400,
        "wires": [
            [
                "55b1db195a6345cf"
            ]
        ]
    },
    {
        "id": "bd1b0393d3b158c1",
        "type": "link out",
        "z": "327571d15da5aceb",
        "name": "send telegram message",
        "mode": "link",
        "links": [
            "21f38c7085dac4ce"
        ],
        "x": 915,
        "y": 120,
        "wires": []
    },
    {
        "id": "e039e2b37c45b70f",
        "type": "subflow:5958c5854f8ba7cd",
        "z": "327571d15da5aceb",
        "name": "Call SV, QC, FM, DM",
        "env": [
            {
                "name": "Message Types",
                "value": "SV,QC,FM,DM",
                "type": "str"
            }
        ],
        "x": 340,
        "y": 160,
        "wires": [
            [
                "79d2dbe7240fa5dc",
                "957b54dad0221a9d",
                "3dc9b81d6024cb0a",
                "ec62135526501520"
            ]
        ]
    },
    {
        "id": "4d51428a87e920be",
        "type": "function",
        "z": "327571d15da5aceb",
        "name": "Update Database",
        "func": "let caller = msg.caller;\nlet list = env.get(\"List\");\nlet dbList = flow.get(list);\n\nif (caller.type.length < 1){\n    //if caller.type is empty, means call from caller is cleared\n    //delete caller row in list\n    dbList = dbList.filter((call) => { return call.id != caller.id });\n    flow.set(list, dbList);\n} else {\n    //else if caller.type is not empty, means call from caller is a new call\n    //if caller already exists in list, update that caller row\n    //else add caller to list. \n    let index = dbList.findIndex((call) => { return call.id == caller.id });\n    if (index != -1) {\n        dbList[index] = caller;\n    } else {    \n        dbList.push(caller);\n    }\n    flow.set(list, dbList);\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "61765029e1a65f4f",
        "type": "subflow:5958c5854f8ba7cd",
        "z": "327571d15da5aceb",
        "name": "Call FG",
        "env": [
            {
                "name": "Message Types",
                "value": "FG",
                "type": "str"
            },
            {
                "name": "Database Name",
                "value": "fgQueue",
                "type": "str"
            },
            {
                "name": "Database Type",
                "value": "queue",
                "type": "str"
            },
            {
                "name": "Type of Data",
                "value": "queue",
                "type": "str"
            },
            {
                "name": "List",
                "value": "false",
                "type": "bool"
            }
        ],
        "x": 300,
        "y": 220,
        "wires": [
            [
                "d693f6da18b37b36"
            ]
        ]
    },
    {
        "id": "957b54dad0221a9d",
        "type": "subflow:da1f44dea6948311",
        "z": "327571d15da5aceb",
        "name": "",
        "x": 560,
        "y": 160,
        "wires": [
            [
                "a48c49277460197f"
            ]
        ]
    },
    {
        "id": "d693f6da18b37b36",
        "type": "subflow:da1f44dea6948311",
        "z": "327571d15da5aceb",
        "name": "",
        "env": [
            {
                "name": "List/Queue Name",
                "value": "fgQueue",
                "type": "str"
            },
            {
                "name": "Display Format",
                "value": "{\"tabulator\":{\"responsiveLayout\":\"collapse\",\"layout\":\"fitColumns\",\"movableColumns\":true,\"index\":\"Id\",\"columns\":[{\"frozen\":true,\"title\":\"ID\",\"align\":\"center\",\"width\":\"5%\",\"formatter\":\"rownum\"},{\"frozen\":true,\"title\":\"Department\",\"field\":\"Department\"},{\"frozen\":true,\"title\":\"Line\",\"field\":\"Line\"},{\"frozen\":true,\"title\":\"Cell\",\"field\":\"Cell\"},{\"title\":\"Time (mins)\",\"field\":\"Time\"},{\"title\":\"Action\",\"align\":\"center\",\"width\":\"10%\",\"formatter\":\"buttonCross\"}],\"columnResized\":\"function(column){     var newColumn = {         field: column._column.field,         visible: column._column.visible,         width: column._column.width,         widthFixed: column._column.widthFixed,         widthStyled: column._column.widthStyled     }; this.send({topic:this.config.topic,ui_control:{callback:'columnResized',columnWidths:newColumn}}); }\",\"columnMoved\":\"function(column, columns){     var newColumns=[];     columns.forEach(function (column) {         newColumns.push({'field': column._column.definition.field, 'title': column._column.definition.title});     });     this.send({topic:this.config.topic,ui_control:{callback:'columnMoved',columns:newColumns}}); }\",\"rowFormatter\":\"function(row){     var data = row.getData();     switch (data.$state) {         case \\\"lost\\\":             row.getElement().style.backgroundColor = \\\"#9e2e66\\\";             row.getElement().style.color = \\\"#a6a6a6\\\";             break;         case \\\"sleeping\\\":             row.getElement().style.backgroundColor = \\\"#336699\\\";             break;         case \\\"disconnected\\\":             row.getElement().style.backgroundColor = \\\"#cc3300\\\";             row.getElement().style.color = \\\"#a6a6a6\\\";             break;         case \\\"alert\\\":             row.getElement().style.backgroundColor = \\\"#A6A6DF\\\";             break;         case \\\"init\\\":             row.getElement().style.backgroundColor = \\\"#f2f20d\\\";             break;         case \\\"ready\\\":             row.getElement().style.backgroundColor = \\\"\\\";             row.getElement().style.color = \\\"\\\";             break;         } }\",\"cellEdited\":\"celledited = function (cell) {         console.log('celledited callback called');    this.send(                 {                          ui_control: {callback:'cellEdited'},            payload: cell.getValue(),            oldValue: cell.getOldValue(),            field: cell.getColumn().getField(),            id: cell.getRow().getCell('Id').getValue()         });    console.log('table edit success');}\"}}",
                "type": "json"
            }
        ],
        "x": 560,
        "y": 220,
        "wires": [
            [
                "93a21d5dcdc32268"
            ]
        ]
    },
    {
        "id": "b25444582b5abffb",
        "type": "subflow:5958c5854f8ba7cd",
        "z": "327571d15da5aceb",
        "name": "Call Kowake",
        "env": [
            {
                "name": "Message Types",
                "value": "KW",
                "type": "str"
            },
            {
                "name": "Database Name",
                "value": "kwQueue",
                "type": "str"
            },
            {
                "name": "Database Type",
                "value": "queue",
                "type": "str"
            },
            {
                "name": "Type of Data",
                "value": "queue",
                "type": "str"
            }
        ],
        "x": 310,
        "y": 340,
        "wires": [
            [
                "55b1db195a6345cf"
            ]
        ]
    },
    {
        "id": "55b1db195a6345cf",
        "type": "subflow:da1f44dea6948311",
        "z": "327571d15da5aceb",
        "name": "",
        "env": [
            {
                "name": "List/Queue Name",
                "value": "kwQueue",
                "type": "str"
            },
            {
                "name": "Display Format",
                "value": "{     \"tabulator\": {         \"responsiveLayout\": \"collapse\",         \"layout\": \"fitColumns\",         \"movableColumns\": true,         \"index\": \"Id\",         \"columns\": [             {                 \"frozen\": true,                 \"title\": \"ID\",                 \"align\": \"center\",                 \"width\": \"5%\",                 \"formatter\": \"rownum\"             },             {                 \"frozen\": true,                 \"title\": \"Department\",                 \"field\": \"Department\"             },             {                 \"frozen\": true,                 \"title\": \"Line\",                 \"field\": \"Line\"             },             {                 \"frozen\": true,                 \"title\": \"Cell\",                 \"field\": \"Cell\"             },             {                 \"title\": \"Time (mins)\",                 \"field\": \"Time\"             },             {                 \"title\": \"Action\",                 \"align\": \"center\",                 \"width\": \"10%\",                 \"formatter\": \"buttonCross\"             }         ],         \"columnResized\": \"function(column){     var newColumn = {         field: column._column.field,         visible: column._column.visible,         width: column._column.width,         widthFixed: column._column.widthFixed,         widthStyled: column._column.widthStyled     }; this.send({topic:this.config.topic,ui_control:{callback:'columnResized',columnWidths:newColumn}}); }\",         \"columnMoved\": \"function(column, columns){     var newColumns=[];     columns.forEach(function (column) {         newColumns.push({'field': column._column.definition.field, 'title': column._column.definition.title});     });     this.send({topic:this.config.topic,ui_control:{callback:'columnMoved',columns:newColumns}}); }\",         \"rowFormatter\": \"function(row){     var data = row.getData();     switch (data.$state) {         case \\\"lost\\\":             row.getElement().style.backgroundColor = \\\"#9e2e66\\\";             row.getElement().style.color = \\\"#a6a6a6\\\";             break;         case \\\"sleeping\\\":             row.getElement().style.backgroundColor = \\\"#336699\\\";             break;         case \\\"disconnected\\\":             row.getElement().style.backgroundColor = \\\"#cc3300\\\";             row.getElement().style.color = \\\"#a6a6a6\\\";             break;         case \\\"alert\\\":             row.getElement().style.backgroundColor = \\\"#A6A6DF\\\";             break;         case \\\"init\\\":             row.getElement().style.backgroundColor = \\\"#f2f20d\\\";             break;         case \\\"ready\\\":             row.getElement().style.backgroundColor = \\\"\\\";             row.getElement().style.color = \\\"\\\";             break;         } }\",         \"cellEdited\": \"celledited = function (cell) {         console.log('celledited callback called');    this.send(                 {                          ui_control: {callback:'cellEdited'},            payload: cell.getValue(),            oldValue: cell.getOldValue(),            field: cell.getColumn().getField(),            id: cell.getRow().getCell('Id').getValue()         });    console.log('table edit success');}\"     } }",
                "type": "json"
            }
        ],
        "x": 560,
        "y": 340,
        "wires": [
            [
                "e054f574d3e939c0"
            ]
        ]
    },
    {
        "id": "bbea780b13bb2921",
        "type": "debug",
        "z": "327571d15da5aceb",
        "name": "debug 13",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 300,
        "y": 120,
        "wires": []
    },
    {
        "id": "3dc9b81d6024cb0a",
        "type": "subflow:fa9ee2fc5ce99563",
        "z": "327571d15da5aceb",
        "name": "",
        "env": [
            {
                "name": "Recipient List",
                "value": "{\"SV\":\"Press\",\"QC\":\"Press QC\",\"FM\":\"Press Mtce\",\"DM\":\"Die Mtce\",\"HOD\":\"HOD\"}",
                "type": "json"
            }
        ],
        "x": 570,
        "y": 120,
        "wires": [
            [
                "bd1b0393d3b158c1"
            ]
        ]
    },
    {
        "id": "4f60142a7c9fa2c6",
        "type": "rpi-gpio out",
        "z": "327571d15da5aceb",
        "name": "Siren Alert",
        "pin": "17",
        "set": true,
        "level": "0",
        "freq": "",
        "out": "out",
        "bcm": true,
        "x": 970,
        "y": 60,
        "wires": []
    },
    {
        "id": "ec62135526501520",
        "type": "switch",
        "z": "327571d15da5aceb",
        "name": "Check List/Queue",
        "property": "callList",
        "propertyType": "flow",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "empty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 570,
        "y": 60,
        "wires": [
            [
                "a6d0b02b66e52388"
            ],
            [
                "ac3d177d1d182824"
            ]
        ]
    },
    {
        "id": "a6d0b02b66e52388",
        "type": "change",
        "z": "327571d15da5aceb",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "1",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 780,
        "y": 40,
        "wires": [
            [
                "4f60142a7c9fa2c6"
            ]
        ]
    },
    {
        "id": "ac3d177d1d182824",
        "type": "change",
        "z": "327571d15da5aceb",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "0",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 780,
        "y": 80,
        "wires": [
            [
                "4f60142a7c9fa2c6"
            ]
        ]
    },
    {
        "id": "0e5e988da6ace305",
        "type": "telegram sender",
        "z": "b7a483d0be44dbdd",
        "name": "send message ",
        "bot": "ea1829c43a6e8ad0",
        "haserroroutput": true,
        "outputs": 2,
        "x": 620,
        "y": 180,
        "wires": [
            [
                "5f6be6d7ecced755"
            ],
            [
                "c0dc87d6283b17a7"
            ]
        ]
    },
    {
        "id": "c0dc87d6283b17a7",
        "type": "debug",
        "z": "b7a483d0be44dbdd",
        "name": "debug 9",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 820,
        "y": 200,
        "wires": []
    },
    {
        "id": "5f6be6d7ecced755",
        "type": "debug",
        "z": "b7a483d0be44dbdd",
        "name": "debug 10",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 820,
        "y": 160,
        "wires": []
    },
    {
        "id": "21f38c7085dac4ce",
        "type": "link in",
        "z": "b7a483d0be44dbdd",
        "name": "telegram input link",
        "links": [
            "2fa6a4a0490e047a",
            "bd1b0393d3b158c1",
            "f7ec67567aefe7c7"
        ],
        "x": 245,
        "y": 180,
        "wires": [
            [
                "53a3a84b4660c265"
            ]
        ]
    },
    {
        "id": "69b847464ff1d895",
        "type": "comment",
        "z": "b7a483d0be44dbdd",
        "name": "How to configure link out msg from your other flows (click here to read!)",
        "info": "Instead of specifying chatIds, specify chat group names for each message type, in the heirarchical order as defined in the Chat Ids JSON as setup in the \"Chat Ids\" environment variable of this flow. See the example below:\n\n`{\n    \"SV\": [\"Mgmt/IT\", \"Mgmt/Press\"],\n    \"FM\": \"Mgmt/FM/Press\",\n    \"QC\": \"Mgmt/QC/Press\"\n}`\n\nYou can define multiple group names for each type of message. This allows for debugging work to be done, or for telegram notifications to be sent to multiple groups.  \n\nThe 'Prepare Messaging' subflow will automatically escalate the messaging according to the hierarchy, whenever calls exceed the Escalation Time as defined for each subflow node used.\n\nchatIds will be generated before the message is sent to telegram. ",
        "x": 290,
        "y": 80,
        "wires": []
    },
    {
        "id": "53a3a84b4660c265",
        "type": "function",
        "z": "b7a483d0be44dbdd",
        "name": "convert target to chatId",
        "func": "let chatIds = env.get(\"Chat Ids\");\nlet target = msg.payload.target;\n\n// will always receive an array\n// traverses chatIds according to the array provided and returns the telegram\n// id corresponding to the relevant group to notify\nmsg.payload.chatId = target.reduce((cur, key) => {\n    return cur[key];\n    \n}, chatIds).id;\n\n// if(Array.isArray(target)) {\n//     msg.payload[\"chatId\"] = [];\n//     for(let index in target) {\n//         msg.payload.chatId.push(chatIds[target[index]]);\n//     }\n// } else {\n//     msg.payload[\"chatId\"] = chatIds[target];\n//}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 180,
        "wires": [
            [
                "0e5e988da6ace305",
                "dbf1d935725ab591"
            ]
        ]
    },
    {
        "id": "dbf1d935725ab591",
        "type": "debug",
        "z": "b7a483d0be44dbdd",
        "name": "debug 12",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 600,
        "y": 240,
        "wires": []
    },
    {
        "id": "c7ab74162d9d95c3",
        "type": "comment",
        "z": "b7a483d0be44dbdd",
        "name": "IMPORTANT: Configure Telegram Chat Ids in the flow Environment Variable",
        "info": "",
        "x": 300,
        "y": 40,
        "wires": [],
        "icon": "node-red/alert.svg"
    },
    {
        "id": "6ab44a13f195e788",
        "type": "mqtt in",
        "z": "0ab2da76215ad380",
        "name": "AKSB MQTT Server",
        "topic": "json_exchange",
        "qos": "1",
        "datatype": "json",
        "broker": "56edfd93d9c67181",
        "nl": false,
        "rap": true,
        "rh": "2",
        "inputs": 0,
        "x": 150,
        "y": 140,
        "wires": [
            [
                "c0fd4308ca80b391"
            ]
        ]
    },
    {
        "id": "c0fd4308ca80b391",
        "type": "debug",
        "z": "0ab2da76215ad380",
        "name": "debug 15",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 340,
        "y": 140,
        "wires": []
    },
    {
        "id": "3bb529f3123a381b",
        "type": "inject",
        "z": "562197b4f4a67922",
        "name": "Insert Raw Data",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[{\"Id\":\"1\",\"Line\":\"F\",\"Cell\":\"A-1\",\"Back No\":\"AUK013\",\"Plan\":0,\"Actual\":0},{\"Id\":\"2\",\"Line\":\"F\",\"Cell\":\"A-2\",\"Back No\":\"AUK005\",\"Plan\":0,\"Actual\":0},{\"Id\":\"3\",\"Line\":\"F\",\"Cell\":\"B-1\",\"Back No\":\"AUK012\",\"Plan\":0,\"Actual\":0},{\"Id\":\"4\",\"Line\":\"F\",\"Cell\":\"B-2\",\"Back No\":\"AUK004\",\"Plan\":0,\"Actual\":0},{\"Id\":\"5\",\"Line\":\"F\",\"Cell\":\"C-1\",\"Back No\":\"AUK006\",\"Plan\":0,\"Actual\":0},{\"Id\":\"6\",\"Line\":\"F\",\"Cell\":\"C-2\",\"Back No\":\"AUK007\",\"Plan\":0,\"Actual\":0},{\"Id\":\"7\",\"Line\":\"F\",\"Cell\":\"C-3\",\"Back No\":\"AUK009\",\"Plan\":0,\"Actual\":0},{\"Id\":\"8\",\"Line\":\"F\",\"Cell\":\"C-4\",\"Back No\":\"AUK024\",\"Plan\":0,\"Actual\":0},{\"Id\":\"9\",\"Line\":\"F\",\"Cell\":\"C-5\",\"Back No\":\"AUK025\",\"Plan\":0,\"Actual\":0},{\"Id\":\"10\",\"Line\":\"F\",\"Cell\":\"D1-1\",\"Back No\":\"AUK002\",\"Plan\":0,\"Actual\":0},{\"Id\":\"11\",\"Line\":\"F\",\"Cell\":\"D1-2\",\"Back No\":\"AUK011\",\"Plan\":0,\"Actual\":0},{\"Id\":\"12\",\"Line\":\"F\",\"Cell\":\"D2-1\",\"Back No\":\"AUK003\",\"Plan\":0,\"Actual\":0},{\"Id\":\"13\",\"Line\":\"F\",\"Cell\":\"D2-2\",\"Back No\":\"AUK010\",\"Plan\":0,\"Actual\":0},{\"Id\":\"14\",\"Line\":\"F\",\"Cell\":\"E1-1\",\"Back No\":\"AUK017\",\"Plan\":0,\"Actual\":0},{\"Id\":\"15\",\"Line\":\"F\",\"Cell\":\"E1-2\",\"Back No\":\"AUK020\",\"Plan\":0,\"Actual\":0},{\"Id\":\"16\",\"Line\":\"F\",\"Cell\":\"E2-1\",\"Back No\":\"AUK016\",\"Plan\":0,\"Actual\":0},{\"Id\":\"17\",\"Line\":\"F\",\"Cell\":\"E2-2\",\"Back No\":\"AUK021\",\"Plan\":0,\"Actual\":0}]",
        "payloadType": "json",
        "x": 120,
        "y": 140,
        "wires": [
            [
                "fc35efef32c5cf97"
            ]
        ]
    },
    {
        "id": "fc35efef32c5cf97",
        "type": "change",
        "z": "562197b4f4a67922",
        "name": "Transform & filesave raw data",
        "rules": [
            {
                "t": "set",
                "p": "tableData",
                "pt": "flow",
                "to": "payload[].{\t    \"Id\":`Id`,\t    \"Line\":`Line`,\t    \"Cell\":`Cell`,\t    \"TM\":\"\",\t    \"Back No\":`Back No`,\t    \"Plan\":`Plan`,\t    \"Actual\":`Actual`\t}",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 450,
        "y": 140,
        "wires": [
            [
                "5418e74923417250"
            ]
        ]
    },
    {
        "id": "9765f3da2d535ee3",
        "type": "ui_table",
        "z": "562197b4f4a67922",
        "group": "85b12cf0fa38d858",
        "name": "Line Table",
        "order": 1,
        "width": 26,
        "height": 13,
        "columns": [],
        "outputs": 1,
        "cts": true,
        "x": 350,
        "y": 440,
        "wires": [
            [
                "aea8981076227a62",
                "e1c8c5460b5100ea"
            ]
        ]
    },
    {
        "id": "9429cca408847a85",
        "type": "ui_ui_control",
        "z": "562197b4f4a67922",
        "name": "",
        "events": "all",
        "x": 100,
        "y": 380,
        "wires": [
            [
                "657d21fce3ecd7ea"
            ]
        ]
    },
    {
        "id": "657d21fce3ecd7ea",
        "type": "change",
        "z": "562197b4f4a67922",
        "name": "Setup payload and ui_control",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "tableData",
                "tot": "flow",
                "dc": true
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload ~> |$|{ \"Progress\" : $round(Actual *100 / Plan) }|",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "ui_control",
                "pt": "msg",
                "to": "{\"tabulator\":{\"responsiveLayout\":\"collapse\",\"layout\":\"fitColumns\",\"movableColumns\":true,\"index\":\"Id\",\"groupBy\":\"Line\",\"columns\":[{\"frozen\":true,\"title\":\"ID\",\"field\":\"Id\"},{\"frozen\":true,\"title\":\"Line\",\"field\":\"Line\"},{\"title\":\"Cell\",\"field\":\"Cell\",\"frozen\":true},{\"title\":\"Back No\",\"field\":\"Back No\",\"frozen\":true,\"editor\":\"input\",\"editorParams\":{\"selectContents\":true,\"verticalNavigation\":\"table\"}},{\"title\":\"Team Member\",\"field\":\"TM\",\"editor\":\"input\",\"editorParams\":{\"selectContents\":true,\"verticalNavigation\":\"table\"}},{\"title\":\"Plan\",\"field\":\"Plan\",\"align\":\"left\",\"editor\":\"number\",\"editorParams\":{\"selectContents\":true,\"verticalNavigation\":\"table\"}},{\"title\":\"Actual\",\"field\":\"Actual\",\"align\":\"left\",\"editor\":\"number\",\"editorParams\":{\"selectContents\":true,\"verticalNavigation\":\"table\"}},{\"title\":\"Progress\",\"field\":\"Progress\",\"align\":\"left\",\"formatter\":\"progress\"}],\"columnResized\":\"function(column){     var newColumn = {         field: column._column.field,         visible: column._column.visible,         width: column._column.width,         widthFixed: column._column.widthFixed,         widthStyled: column._column.widthStyled     }; this.send({topic:this.config.topic,ui_control:{callback:'columnResized',columnWidths:newColumn}}); }\",\"columnMoved\":\"function(column, columns){     var newColumns=[];     columns.forEach(function (column) {         newColumns.push({'field': column._column.definition.field, 'title': column._column.definition.title});     });     this.send({topic:this.config.topic,ui_control:{callback:'columnMoved',columns:newColumns}}); }\",\"rowFormatter\":\"function(row){     var data = row.getData();     switch (data.$state) {         case \\\"lost\\\":             row.getElement().style.backgroundColor = \\\"#9e2e66\\\";             row.getElement().style.color = \\\"#a6a6a6\\\";             break;         case \\\"sleeping\\\":             row.getElement().style.backgroundColor = \\\"#336699\\\";             break;         case \\\"disconnected\\\":             row.getElement().style.backgroundColor = \\\"#cc3300\\\";             row.getElement().style.color = \\\"#a6a6a6\\\";             break;         case \\\"alert\\\":             row.getElement().style.backgroundColor = \\\"#A6A6DF\\\";             break;         case \\\"init\\\":             row.getElement().style.backgroundColor = \\\"#f2f20d\\\";             break;         case \\\"ready\\\":             row.getElement().style.backgroundColor = \\\"\\\";             row.getElement().style.color = \\\"\\\";             break;         } }\",\"cellEdited\":\"celledited = function (cell) {         console.log('celledited callback called');    this.send(                 {                          ui_control: {callback:'cellEdited'},            payload: cell.getValue(),            oldValue: cell.getOldValue(),            field: cell.getColumn().getField(),            id: cell.getRow().getCell('Id').getValue()         });    console.log('table edit success');}\"}}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 440,
        "y": 380,
        "wires": [
            [
                "a3445a1b7a99a2aa"
            ]
        ]
    },
    {
        "id": "d46645c44a1a1553",
        "type": "comment",
        "z": "562197b4f4a67922",
        "name": "Gunakan ni utk masukkan data permulaan",
        "info": "",
        "x": 180,
        "y": 100,
        "wires": []
    },
    {
        "id": "80625bcdc3601279",
        "type": "comment",
        "z": "562197b4f4a67922",
        "name": "data diambil drpd flow.tableData",
        "info": "",
        "x": 150,
        "y": 340,
        "wires": []
    },
    {
        "id": "190544d376618b4e",
        "type": "function",
        "z": "562197b4f4a67922",
        "d": true,
        "name": "node to edit celledited callback",
        "func": "celledited = function (cell) {     \n    console.log('celledited callback called');\n    this.send(         \n        {              \n            ui_control: {callback:'cellEdited'},\n            payload: cell.getValue(),\n            oldValue: cell.getOldValue(),\n            field: cell.getColumn().getField(),\n            id: call.getRow().getCell('Id').getValue() \n        });\n    console.log('table edit success');\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "aea8981076227a62",
        "type": "debug",
        "z": "562197b4f4a67922",
        "name": "from table",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 520,
        "y": 480,
        "wires": []
    },
    {
        "id": "ca748a580d870274",
        "type": "function",
        "z": "562197b4f4a67922",
        "name": "process cell edit",
        "func": "var tableData = flow.get(\"tableData\");\ntableData[msg.id-1][msg.field] = msg.payload;\ntableData[msg.id-1][\"Modified\"] = Date.now();\nflow.set(\"tableData\",tableData);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 440,
        "wires": [
            [
                "eb08a14f33272cc0"
            ]
        ]
    },
    {
        "id": "e1c8c5460b5100ea",
        "type": "switch",
        "z": "562197b4f4a67922",
        "name": "select only cellEdited",
        "property": "ui_control.callback",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "cellEdited",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 560,
        "y": 440,
        "wires": [
            [
                "ca748a580d870274",
                "bd7d5aadbbade7a9"
            ]
        ]
    },
    {
        "id": "5418e74923417250",
        "type": "change",
        "z": "562197b4f4a67922",
        "name": "set lastUpdatedAt",
        "rules": [
            {
                "t": "set",
                "p": "lastUpdatedAt",
                "pt": "flow",
                "to": "",
                "tot": "date"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 770,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "eb08a14f33272cc0",
        "type": "change",
        "z": "562197b4f4a67922",
        "name": "update lastUpdatedAt",
        "rules": [
            {
                "t": "set",
                "p": "lastUpdatedAt",
                "pt": "flow",
                "to": "",
                "tot": "date"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 960,
        "y": 440,
        "wires": [
            [
                "657d21fce3ecd7ea",
                "1464ea4a3fcb1231"
            ]
        ]
    },
    {
        "id": "21da1cf5e4453d55",
        "type": "inject",
        "z": "562197b4f4a67922",
        "name": "refresh lastUpdatedAt",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "900",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "lastUpdatedAt",
        "payloadType": "flow",
        "x": 150,
        "y": 220,
        "wires": [
            [
                "ba12c49728ef2158",
                "419b7cf998ee85b6"
            ]
        ]
    },
    {
        "id": "6f1e36e8e531547c",
        "type": "comment",
        "z": "562197b4f4a67922",
        "name": "untuk update bila last update data kat dashboard dan htr telegram kalau belum update",
        "info": "",
        "x": 320,
        "y": 180,
        "wires": []
    },
    {
        "id": "1464ea4a3fcb1231",
        "type": "debug",
        "z": "562197b4f4a67922",
        "name": "from cellEdited",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1100,
        "y": 480,
        "wires": []
    },
    {
        "id": "a3445a1b7a99a2aa",
        "type": "switch",
        "z": "562197b4f4a67922",
        "name": "tabName = Data only",
        "property": "name",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Data",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 1,
        "x": 160,
        "y": 440,
        "wires": [
            [
                "9765f3da2d535ee3"
            ]
        ]
    },
    {
        "id": "ba12c49728ef2158",
        "type": "switch",
        "z": "562197b4f4a67922",
        "name": "> 1 hour?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "jsonata_exp",
                "v": "$toMillis($now()) - payload > 3600000\t",
                "vt": "jsonata"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 440,
        "y": 260,
        "wires": [
            [
                "6f0919e127cfcf6b"
            ]
        ]
    },
    {
        "id": "6f0919e127cfcf6b",
        "type": "change",
        "z": "562197b4f4a67922",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"chatId\":21709557,\"type\":\"message\",\"content\":\"Reminder: pls update hourly production data\"}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 620,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "419b7cf998ee85b6",
        "type": "change",
        "z": "562197b4f4a67922",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "$moment(payload).fromNow()",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 400,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "bd7d5aadbbade7a9",
        "type": "debug",
        "z": "562197b4f4a67922",
        "name": "select only celledited",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 480,
        "wires": []
    },
    {
        "id": "aed69bd7994a8096",
        "type": "ui_template",
        "z": "562197b4f4a67922",
        "g": "2df0c70bc86dd6ae",
        "group": "85b12cf0fa38d858",
        "name": "Tabulator CSS",
        "order": 1,
        "width": 0,
        "height": 0,
        "format": "<style>\n    .tabulator {\n        font-size: 1.5em !important; \n    }\n</style>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "global",
        "className": "",
        "x": 160,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "d3a0745948b821c9",
        "type": "comment",
        "z": "562197b4f4a67922",
        "g": "2df0c70bc86dd6ae",
        "name": "Dont Delete this!",
        "info": "",
        "x": 140,
        "y": 660,
        "wires": []
    },
    {
        "id": "f7ec67567aefe7c7",
        "type": "link out",
        "z": "562197b4f4a67922",
        "name": "send telegram message",
        "mode": "link",
        "links": [
            "21f38c7085dac4ce"
        ],
        "x": 755,
        "y": 260,
        "wires": []
    }
]