[
    {
        "id": "562197b4f4a67922",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "78809bb47c7f02cd",
        "type": "tab",
        "label": "Flow 2",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "3426577f90538292",
        "type": "tab",
        "label": "Flow 4",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "11f19efd79056b77",
        "type": "subflow",
        "name": "ui-table handler",
        "info": "# ui-table handler\nUniversal handler for ui-table.\n## features\n- buffer table data\n- add or update individual rows or cells of the table\n- delete rows\n- clear tableData\n- handle column width\n- handle column order\n- hide und unhide columns\n- hide and unhide rows\n- records row order\n- support for nested columns [(column groups)](http://tabulator.info/examples/4.7#column-groups)\n- support for child rows (_children) [(nested data trees)](http://tabulator.info/examples/4.7#tree)\n\nFor real life example see:\n\n**syslog server** for logfile like table with filters\n\n**remote device table** for dynamically updated table with context menues\n\n**irrigation system** for sortable rows\n\n## sending data to ui-tabel\n\n- sending an `array` as discribed in ui-table will replace the complete table and delete all table edits\n  \n  if `msg.keepEdits=true` is added the existing edits will be kept.\n- send an `argument` containing the updated properties of a table row by sending msg._rowProperty_ where `msg.topic` should contian the **index** or the object contains the index property.\n\n  The table is updated using the `updateOrAddData` command. You can alter the command used by adding the `msg.tabulatorCommand` and `msg.tabulatorParameter`\n\n```\nmsg.tabulatorCommand=\"addData\";\nmsg.tabulatorParameter=[true];\n```\n## configuration\n- `tabulator` json formatted object containing configuration of the table. See ui-table for more details.\n- `property` property of the msg object that contains the data to be passed to ui-table. I.e. *state* `msg.state`\n- `index` index column to identify individual rows. Each message containing data must have a unique `msg.topic` to identify the row. Messages without this `msg.topic` will be droped. It is not nessesary but possible to display the index column in the table. Do not enable editing on this column otherwise you will loose the connection and another row will be added to the table as soon as a new message arrives!\n\n   Defaults to *$topic* `msg.state.$topic`\n- `maxRows`maximum number of rows held by table widget. If grater than **0** the amount of rows in ui-table is limited. For this to work the index row must be a Number. ´rows < currentID-maxRows´ will be deleted.\n- `maxStore`maximum number of rows stored by this node for replay if a client connects. If grater than **0** the amount of rows in flow context is limited. for this to work the index row must be a Number. ´rows < currentID-maxStore´ will be deleted.\n- `dashboard` name of the dashboard tab to only update the table if the dashboard is visible. If empty the table will be updated on every tab change and connect.\n- `context` configuration of context data. The subflow will save or cache data in the flows context using `$parent.`. \n   **tableData** caches the incoming data to restore it on `ui-control´ *change* messages.\n   **tableConfig** saves column width and order to save the interactive table layot\n   **tableEdit** saves edits on the table data otherwise it would be overwritten when new data arrives\n```json\n{\n    \"tableData\": {\n        \"name\": \"tableData\"\n    },\n    \"tableConfig\": {\n        \"name\": \"tableConfig\",\n        \"storage\": \"file\"\n    },\n    \"tableEdit\": {\n        \"name\": \"tableEdit\",\n        \"storage\": \"file\"\n    }\n}\n```\n\n## commands\ncommands can be passed by sending a object as `msg.command`\n\n```\nmsg.command = \"columnHide\",\nmsg.argument = \"id\"\n```\n\n- `deleteTable` tableCache\n- `deleteRow` delete single row. `argument` matching index property\n- `ignoreRow` delete single row and put it on an ignore list. `argument` matching index property\n- `unIgnoreRow`remove row from the ignore list.  `argument` matching index property\n- `unIgnoreRows`delte the ignore list. \n- `deleteRowOrder` delete custom row order\n- `deleteColumnOrder` delete custom column order\n  This is important if you add or delete columns in the tabulator config otherwise the columns most likely don`t show up\n- `deleteColumnWidth` delete custom column width\n- `columnHide` hide a column. `argument` matching column field\n- `columnUnHide` unhide a column. `argument` matching column field\n- `columnsUnHide` unhide all hidden columns.\n- `setMaxStore` set maximum amount of rows in cache\n- `setMaxDisplay` set maximum amout of rows in ui-table\n- `getTable` get table data (as displayed) as an array (on 2nd output)\n \n## background\nui-table warps the powerfull tabluator library.  This subflow makes it easier to unleash the powerfull features of ui-table",
        "category": "dashboard",
        "in": [
            {
                "x": 54,
                "y": 85,
                "wires": [
                    {
                        "id": "0538b16727054d9a"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 360,
                "y": 85,
                "wires": [
                    {
                        "id": "0538b16727054d9a",
                        "port": 1
                    }
                ]
            },
            {
                "x": 360,
                "y": 136,
                "wires": [
                    {
                        "id": "0538b16727054d9a",
                        "port": 2
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "tabulator",
                "type": "json",
                "value": "{\"tabulator\":{\"responsiveLayout\":\"collapse\",\"responsiveLayoutCollapseStartOpen\":false,\"index\":\"$name\",\"layout\":\"fitColumns\",\"movableColumns\":true,\"groupBy\":\"\",\"columnResized\":\"function(column){     var newColumn = {         field: column._column.field,         visible: column._column.visible,         width: column._column.width,         widthFixed: column._column.widthFixed,         widthStyled: column._column.widthStyled     }; this.send({topic:this.config.topic,ui_control:{callback:'columnResized',columnWidths:newColumn}}); }\",\"columnMoved\":\"function(column, columns){     var newColumns=[];     columns.forEach(function (column) {         newColumns.push({'field': column._column.definition.field, 'title': column._column.definition.title});     });     this.send({topic:this.config.topic,ui_control:{callback:'columnMoved',columns:newColumns}}); }\",\"rowFormatter\":\"function(row){     var data = row.getData();     switch (data.$state) {         case \\\"lost\\\":             row.getElement().style.backgroundColor = \\\"#9e2e66\\\";             row.getElement().style.color = \\\"#a6a6a6\\\";             break;         case \\\"sleeping\\\":             row.getElement().style.backgroundColor = \\\"#336699\\\";             break;         case \\\"disconnected\\\":             row.getElement().style.backgroundColor = \\\"#cc3300\\\";             row.getElement().style.color = \\\"#a6a6a6\\\";             break;         case \\\"alert\\\":             row.getElement().style.backgroundColor = \\\"#A6A6DF\\\";             break;         case \\\"init\\\":             row.getElement().style.backgroundColor = \\\"#f2f20d\\\";             break;         case \\\"ready\\\":             row.getElement().style.backgroundColor = \\\"\\\";             row.getElement().style.color = \\\"\\\";             break;         } }\",\"columns\":[{\"formatter\":\"responsiveCollapse\",\"width\":30,\"minWidth\":30,\"align\":\"center\",\"resizable\":false,\"headerSort\":false,\"frozen\":true,\"title\":\"expand\",\"field\":\"expand\",\"headerVertical\":\"flip\"},{\"formatter\":\"function(cell, formatterParams, onRendered) {      var html = cell.getValue(); return html;  }\",\"title\":\"State\",\"field\":\"$stateIcon\",\"width\":100,\"frozen\":true,\"headerVertical\":\"flip\"},{\"formatter\":\"function(cell, formatterParams, onRendered) {     var html = cell.getValue(); return html;  }\",\"title\":\"Signal\",\"field\":\"signalIcon\",\"width\":100,\"frozen\":true,\"headerVertical\":\"flip\"},{\"title\":\"Name\",\"field\":\"$name\",\"width\":100,\"frozen\":true,\"headerVertical\":\"flip\"},{\"title\":\"State\",\"field\":\"$state\",\"width\":100,\"align\":\"center\",\"headerVertical\":\"flip\"},{\"title\":\"last-ready\",\"field\":\"lastSeenreadyFormatted\",\"width\":100,\"align\":\"left\",\"headerVertical\":\"flip\"},{\"title\":\"Homie\",\"field\":\"$homie\",\"width\":100,\"align\":\"left\",\"headerVertical\":\"flip\"},{\"title\":\"Platform\",\"field\":\"$implementation\",\"width\":100,\"align\":\"left\",\"headerVertical\":\"flip\"},{\"title\":\"Statistics\",\"columns\":[{\"title\":\"Interval\",\"field\":\"interval\",\"width\":100,\"headerVertical\":\"flip\"},{\"formatterParams\":{\"outputFormat\":\"d hh:mm:ss\",\"inputFormat\":\"seconds\",\"invalidPlaceholder\":\"(unknown)\"},\"title\":\"Uptime\",\"field\":\"uptime\",\"formatter\":\"function(cell, formatterParams, onRendered){     var pad = function (num) {         return (\\\"0\\\"+num).slice(-2);     };     var secs = Number(cell.getValue());     if (Number.isNaN(secs)) return;     var minutes = Math.floor(secs / 60);     secs = secs%60;     var hours = Math.floor(minutes/60);     minutes = minutes%60;     var days = Math.floor(hours/24);     hours = hours%24;     if (days>0)         return days+\\\"d \\\"+pad(hours)+\\\":\\\"+pad(minutes);     else         return pad(hours)+\\\":\\\"+pad(minutes)+\\\":\\\"+pad(secs); }\",\"width\":100,\"headerVertical\":\"flip\"},{\"formatterParams\":{\"min\":0,\"max\":100,\"color\":[\"red\",\"orange\",\"green\"],\"legend\":\"function (value) {if (value>0) return \\\"<span style='color:#FFFFFF;'>\\\"+value+\\\" %</span>\\\"; else return; }\",\"legendColor\":\"#FFFFFF\",\"legendAlign\":\"center\"},\"title\":\"Signal\",\"field\":\"signal\",\"formatter\":\"progress\",\"width\":100,\"headerVertical\":\"flip\"},{\"formatterParams\":{\"min\":2.5,\"max\":3.5,\"color\":[\"red\",\"green\",\"red\"],\"legend\":\"function (value) { if (value>0) return \\\"<span style='color:#FFFFFF;'>\\\"+value+\\\" V</span>\\\"; else return; }\",\"legendColor\":\"#101010\",\"legendAlign\":\"center\"},\"title\":\"Supply\",\"field\":\"supply\",\"formatter\":\"progress\",\"width\":100,\"headerVertical\":\"flip\"},{\"formatterParams\":{\"min\":0,\"max\":100,\"color\":[\"red\",\"orange\",\"green\"],\"legend\":\"function (value) {     if (value>0)         return \\\"<span style='color:#FFFFFF;'>\\\"+value+\\\" %</span>\\\";     else         return; }\",\"legendColor\":\"#101010\",\"legendAlign\":\"center\"},\"title\":\"Battery\",\"field\":\"battery\",\"formatter\":\"progress\",\"width\":100,\"headerVertical\":\"flip\"},{\"formatterParams\":{\"min\":0,\"max\":100000,\"color\":[\"red\",\"orange\",\"green\"],\"legend\":\"function (value) { if (value>0) return \\\"<span style='color:#FFFFFF;'>\\\"+(value/1024).toFixed(2)+\\\" kB</span>\\\"; else return; }\",\"legendColor\":\"#101010\",\"legendAlign\":\"center\"},\"title\":\"Memory\",\"field\":\"freeheap\",\"formatter\":\"progress\",\"width\":100,\"headerVertical\":\"flip\"},{\"formatterParams\":{\"target\":\"_blank\",\"min\":0,\"max\":100,\"color\":[\"red\",\"orange\",\"green\"],\"legend\":\"function (value) {     if (value>0)         return \\\"<span style='color:#FFFFFF;'>\\\"+value+\\\" %</span>\\\";     else         return; }\",\"legendColor\":\"#101010\",\"legendAlign\":\"center\"},\"title\":\"CPU load\",\"field\":\"cpuload\",\"formatter\":\"progress\",\"width\":100,\"headerVertical\":\"flip\"},{\"formatterParams\":{\"min\":20,\"max\":60,\"color\":[\"green\",\"orange\",\"red\"],\"legend\":\"function (value) { if (value>0) return \\\"<span style='color:#FFFFFF;'>\\\"+value+\\\" °C</span>\\\"; else return; }\",\"legendColor\":\"#101010\",\"legendAlign\":\"center\"},\"title\":\"CPU temp\",\"field\":\"cputemp\",\"formatter\":\"progress\",\"width\":100,\"headerVertical\":\"flip\"}]},{\"title\":\"Firmware\",\"columns\":[{\"formatter\":\"link\",\"formatterParams\":{\"labelField\":\"$localip\",\"urlPrefix\":\"http://\",\"target\":\"_blank\"},\"title\":\"IP\",\"field\":\"$localip\",\"width\":100},{\"title\":\"mac\",\"field\":\"$mac\",\"width\":100},{\"title\":\"Accsess Point\",\"field\":\"SSID\",\"width\":100},{\"title\":\"Firmware\",\"field\":\"name\",\"width\":100},{\"title\":\"Version\",\"field\":\"version\",\"width\":100},{\"title\":\"Last Boot Cause\",\"field\":\"lastBootCause\",\"width\":100},{\"title\":\"Reset Reason\",\"field\":\"resetReason\",\"width\":100}]}]},\"customHeight\":12}",
                "ui": {
                    "icon": "font-awesome/fa-table",
                    "label": {
                        "en-US": "Tabulator"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "json",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "tableDataProp",
                "type": "str",
                "value": "payload",
                "ui": {
                    "icon": "font-awesome/fa-tag",
                    "label": {
                        "en-US": "Table Data"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            },
            {
                "name": "tableIndex",
                "type": "str",
                "value": "id",
                "ui": {
                    "icon": "font-awesome/fa-indent",
                    "label": {
                        "en-US": "Table Index"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            },
            {
                "name": "maxRows",
                "type": "num",
                "value": "0",
                "ui": {
                    "icon": "font-awesome/fa-list-ol",
                    "label": {
                        "en-US": "Max Rows"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "num"
                        ]
                    }
                }
            },
            {
                "name": "maxStore",
                "type": "num",
                "value": "0",
                "ui": {
                    "icon": "font-awesome/fa-database",
                    "type": "input",
                    "opts": {
                        "types": [
                            "num"
                        ]
                    }
                }
            },
            {
                "name": "dashboard",
                "type": "str",
                "value": "",
                "ui": {
                    "icon": "font-awesome/fa-dashboard",
                    "label": {
                        "en-US": "Tab"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            },
            {
                "name": "tableContext",
                "type": "json",
                "value": "{\"tableData\":{\"name\":\"tableData\"},\"tableConfig\":{\"name\":\"tableConfig\",\"storage\":\"file\"},\"tableEdit\":{\"name\":\"tableEdit\",\"storage\":\"file\"}}",
                "ui": {
                    "icon": "font-awesome/fa-database",
                    "label": {
                        "en-US": "Storage"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "json"
                        ]
                    }
                }
            }
        ],
        "meta": {
            "module": "ui-table-handler",
            "version": "0.2.1",
            "author": "cmeinert@gmx.net",
            "desc": "Universal handler for ui-table using advanced features like dynamic updates.",
            "keywords": "ui-table,tabulator,dashboard",
            "license": "Apache-2.0"
        },
        "color": "#3FADB5",
        "icon": "node-red-dashboard/ui_slider.png",
        "status": {
            "x": 360,
            "y": 34,
            "wires": [
                {
                    "id": "0538b16727054d9a",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "391e0fd118491fa4",
        "type": "junction",
        "z": "78809bb47c7f02cd",
        "x": 560,
        "y": 400,
        "wires": [
            [
                "16664cef.5b26b3"
            ]
        ]
    },
    {
        "id": "d2bd110790f6ae19",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "f395572c963bf4ed",
        "type": "ui_tab",
        "name": "Line F",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "85b12cf0fa38d858",
        "type": "ui_group",
        "name": "Production Output",
        "tab": "d5e27fdb153bf0a3",
        "order": 2,
        "disp": true,
        "width": "16",
        "collapse": false,
        "className": ""
    },
    {
        "id": "ff9fdb9a.7da098",
        "type": "ui_group",
        "name": "TEST",
        "tab": "7dcc246f.ee661c",
        "order": 1,
        "disp": false,
        "width": "29",
        "collapse": false,
        "className": ""
    },
    {
        "id": "7dcc246f.ee661c",
        "type": "ui_tab",
        "name": "TEST",
        "icon": "dashboard",
        "order": 3,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "dc30853a3872d1b4",
        "type": "ui_spacer",
        "z": "78809bb47c7f02cd",
        "name": "spacer",
        "group": "ff9fdb9a.7da098",
        "order": 13,
        "width": 4,
        "height": 1
    },
    {
        "id": "237da972.5d69a6",
        "type": "ui_group",
        "name": "ui-table with commands",
        "tab": "379a501f.53b59",
        "order": 1,
        "disp": true,
        "width": "17",
        "collapse": false
    },
    {
        "id": "c91332c0.50c11",
        "type": "ui_group",
        "name": "commands",
        "tab": "379a501f.53b59",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "379a501f.53b59",
        "type": "ui_tab",
        "name": "ui-table command",
        "icon": "fa-table",
        "order": 4,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "8a7eaac6a919cdf0",
        "type": "ui_tab",
        "name": "ui-table",
        "icon": "dashboard",
        "order": 5,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "8e34121cef5b559c",
        "type": "ui_group",
        "name": "Cell A",
        "tab": "f395572c963bf4ed",
        "order": 1,
        "disp": true,
        "width": 6,
        "collapse": false,
        "className": ""
    },
    {
        "id": "d5e27fdb153bf0a3",
        "type": "ui_tab",
        "name": "Data",
        "icon": "dashboard",
        "order": 2,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "72a409debd40a171",
        "type": "ui_group",
        "name": "Cell B",
        "tab": "f395572c963bf4ed",
        "order": 2,
        "disp": true,
        "width": 6,
        "collapse": false,
        "className": ""
    },
    {
        "id": "1ee6fae1e6dd0ff9",
        "type": "ui_group",
        "name": "Cell C",
        "tab": "f395572c963bf4ed",
        "order": 3,
        "disp": true,
        "width": 9,
        "collapse": false,
        "className": ""
    },
    {
        "id": "4ad3863a54fa3a9f",
        "type": "ui_group",
        "name": "Cell D1",
        "tab": "f395572c963bf4ed",
        "order": 4,
        "disp": true,
        "width": 6,
        "collapse": false,
        "className": ""
    },
    {
        "id": "be5530b09ed4e2d1",
        "type": "ui_group",
        "name": "Cell D2",
        "tab": "f395572c963bf4ed",
        "order": 5,
        "disp": true,
        "width": 6,
        "collapse": false,
        "className": ""
    },
    {
        "id": "54c1916e62442956",
        "type": "ui_group",
        "name": "Cell E1",
        "tab": "f395572c963bf4ed",
        "order": 6,
        "disp": true,
        "width": 6,
        "collapse": false,
        "className": ""
    },
    {
        "id": "ed4f37bf1c12fb43",
        "type": "ui_group",
        "name": "Cell E2",
        "tab": "f395572c963bf4ed",
        "order": 7,
        "disp": true,
        "width": 6,
        "collapse": false,
        "className": ""
    },
    {
        "id": "0538b16727054d9a",
        "type": "function",
        "z": "11f19efd79056b77",
        "name": "handle tableData",
        "func": "var status = {fill:\"red\",shape:\"dot\",text: \"payload \"};\nvar tableIndex = env.get(\"tableIndex\") || \"$topic\";\nvar tableDataProp = env.get(\"tableDataProp\") || \"row\";\nvar tableContext = env.get(\"tableContext\");\nvar dashboard = env.get(\"dashboard\");\nvar maxRows = env.get(\"maxRows\") || 0;\nvar maxStore = env.get(\"maxStore\") || 0;\n\nif (!tableContext.hasOwnProperty(\"tableData\") || !tableContext.hasOwnProperty(\"tableConfig\")) {\n    status.text=\"tableContext not defined\";\n    node.error(status.text);\n    return [{payload:status},null];\n}\n\n// context store to cache table data (memoryOnly prefered)\nvar tableData = flow.get(\"$parent.\"+tableContext.tableData.name,tableContext.tableData.storage);\nif (tableData===undefined) {\n    node.warn(\"[ui-table handler] tableData initialized!\");\n    tableData={};\n    flow.set(\"$parent.\"+tableContext.tableData.name,tableData,tableContext.tableData.storage);\n}\n\n// context Store to save table configuration (file)\nvar tableConfig = flow.get(\"$parent.\"+tableContext.tableConfig.name,tableContext.tableConfig.storage);\nif (tableConfig===undefined) {\n    node.warn(\"[ui-table handler] tableConfig initialized!\");\n    tableConfig={ResponsiveLayout:true};\n    flow.set(\"$parent.\"+tableContext.tableConfig.name,tableConfig,tableContext.tableConfig.storage);\n}\n\nif (tableConfig.hasOwnProperty(\"maxStore\")) maxStore=tableConfig.maxStore;\nif (tableConfig.hasOwnProperty(\"maxRows\")) maxRows=tableConfig.maxRows;\n\n// context Store to save table configuration (file)\nvar tableEdit;\nif (tableContext.hasOwnProperty(\"tableEdit\")) {\n    tableEdit = flow.get(\"$parent.\"+tableContext.tableEdit.name,tableContext.tableEdit.storage);\n    if (tableEdit===undefined) {\n        node.warn(\"[ui-table handler] tableEdit initialized!\");\n        tableEdit={};\n        flow.set(\"$parent.\"+tableContext.tableEdit.name,tableEdit,tableContext.tableEdit.storage);\n    }\n}\n\n// function to merge partial data into existing table row\nvar mergeObject = function (destination, source, filter) {\n    for (let currentSource in source) {\n        if (source.hasOwnProperty(currentSource)) {\n            if (filter!==undefined && tableEdit && tableEdit.hasOwnProperty(filter) && tableEdit[filter].hasOwnProperty(currentSource)) {\n                destination[currentSource]= tableEdit[filter][currentSource];\n                source[currentSource]=tableEdit[filter][currentSource];\n            } else {\n                destination[currentSource]= source[currentSource];\n            }\n        }    \n    }\n    return source;\n};\n\n// merge edits into a destination object respecting _children\nvar mergeEdits = function(destination) {\n    \n    var mergeChildEdits = function(children) {\n        children.forEach(child => {\n            if (child.hasOwnProperty(tableIndex) && tableEdit.hasOwnProperty(child[tableIndex])) {\n//                node.warn([\"mergeChild\",child])\n                Object.keys(tableEdit[child[tableIndex]]).forEach(edit => {\n                    if (child.hasOwnProperty(edit)) {\n                        child[edit]=tableEdit[child[tableIndex]][edit];\n//                        node.warn([\"mergeChild edit \",edit,child[edit]])\n                    }\n                });\n            }\n            if (child.hasOwnProperty(\"_children\")) {\n                mergeChildEdits(child._children);\n            }\n        })\n    }\n    \n\n    Object.keys(destination).forEach(row => {\n        if (destination[row].hasOwnProperty(tableIndex)) {\n            if (tableEdit.hasOwnProperty(row)) {\n                Object.keys(tableEdit[row]).forEach(edit => {\n                    destination[row][edit]=tableEdit[row][edit];\n                });\n            }\n            if (destination[row].hasOwnProperty(\"_children\")) {\n                mergeChildEdits(destination[row]._children);\n            }\n       }\n    });\n}\n\n// deep search for a column including nested columns\nvar searchTabulatorColumn = function (columns,key,match) {\n    var result;\n    for (let column of columns) {\n        if (column.hasOwnProperty(\"columns\")) {\n            result = searchTabulatorColumn(column.columns,key,match);\n            if (result!==undefined) return result;\n        } else if (column.hasOwnProperty(key) && column[key]===match) {\n            return column;\n        }\n    }\n};\n\n// prepare command message to update add or update data on ui-table\nvar msgToTable={};\nmsgToTable.payload={\n    \"command\":msg.tabulatorCommand || \"updateOrAddData\",\n    \"arguments\": [],\n    \"returnPromise\": false\n};\n\n// store data in tableData\nif  (   msg.hasOwnProperty(tableDataProp) &&\n        !(msg.hasOwnProperty('tab') && msg.hasOwnProperty('name')) && // msg origin from ui-control node\n        !(msg.hasOwnProperty('ui_control') && msg.ui_control.hasOwnProperty('callback')) // msg origin from callback\n    ) {\n    // store data for later recover\n    if (!msg.hasOwnProperty(\"topic\")) { // check if index existst\n        if (msg[tableDataProp].hasOwnProperty(tableIndex)) {\n            msg.topic=msg[tableDataProp][tableIndex];\n        } else {\n            status.text=\"msg.topic not defined!\";\n            return [{payload:status},null];\n        }\n    }\n    if (!tableData.hasOwnProperty(msg.topic)){ // first seen\n        if (maxRows>0 && Object.keys(tableData).length===0) {\n            tableConfig.currentFirstRow=msg.topic;\n        }\n        tableData[msg.topic]={};\n        if (tableEdit && tableEdit.hasOwnProperty(msg.topic)) { // table edits available!\n            Object.keys(tableEdit[msg.topic]).forEach((key) => {\n                msg[tableDataProp][key]=tableEdit[msg.topic][key];\n                tableData[msg.topic][key]=tableEdit[msg.topic][key];\n            })\n        }\n        if (maxStore>0 && typeof msg.topic === \"number\") { // limit rows in tableData\n            let rowKeys = Object.keys(tableData);\n            if (rowKeys.length>maxStore) {\n                for (let i=0; i<(rowKeys.length-maxStore); i++) {\n                    delete tableData[rowKeys[i]];\n                }\n            }\n        }\n    }\n    if (!tableData[msg.topic].hasOwnProperty(tableIndex)) tableData[msg.topic][tableIndex]=msg.topic;\n    msg[tableDataProp]=mergeObject(tableData[msg.topic],msg[tableDataProp],msg.topic);\n    msg[tableDataProp][tableIndex]=msg.topic;\n    msgToTable.payload.arguments=[[msg[tableDataProp]]];\n    // add aditional parameters\n    if (msg.hasOwnProperty(\"tabulatorParameter\") && Array.isArray(msg.tabulatorParameter)) {\n        for (let arg in msg.tabulatorParameter) msgToTable.payload.arguments.push(arg);\n    }\n    // delete rows if rows exceed maxRows\n    /*\n    if (maxRows>0 && tableConfig.hasOwnProperty(\"currentFirstRow\") && typeof tableData[msg.topic][tableIndex]===\"number\") {\n        //node.warn([maxRows,tableConfig.hasOwnProperty(\"currentFirstRow\"),typeof tableData[msg.topic][tableIndex],tableConfig.currentFirstRow,tableData[msg.topic][tableIndex]-maxRows])\n        if (tableConfig.currentFirstRow<tableData[msg.topic][tableIndex]-maxRows) {\n            node.warn([\"maxRowExeeded\",tableConfig.currentFirstRow]);\n            node.send([null,{payload:{\"command\":\"deleteRow\",\"arguments\": [tableConfig.currentFirstRow],\"returnPromise\": false}},null]);\n            tableConfig.currentFirstRow++;\n        }\n    }*/\n    if (maxRows>0 && typeof tableData[msg.topic][tableIndex]===\"number\" && (Number(msg.topic)-maxRows)>0) {\n        node.send([null, { payload: { \"command\": \"deleteRow\", \"arguments\": [Number(msg.topic)-maxRows],\"returnPromise\": false}},null]);\n    }\n    status.fill=\"green\";\n    status.text=msg.topic+\" updated\";\n    return [{payload:status},msgToTable,null];\n} if (msg.payload===\"connect\" || (msg.payload===\"change\" && msg.name===dashboard) || (msg.hasOwnProperty(\"command\"))) { \n    if (!msg.hasOwnProperty(\"ui_control\")) {\n        msg.ui_control = env.get('tabulator');\n        status.text+=\" ui_control added\";\n    }\n    //process commands\n    //node.warn({\"command\":msg.command,\"msg\":msg,\"object\":msg.argument})\n    if (msg.hasOwnProperty(\"command\") && msg.command!=='getTable') {\n        status.fill=\"blue\";\n        switch(msg.command) {\n            case 'deleteTable':\n                flow.set(\"$parent.\"+tableContext.tableData.name,undefined,tableContext.tableData.storage);\n                tableData={};\n                status.text=\"tabledata deleted\";\n                node.warn(\"[ui-table handler] \"+\"tabledata deleted\");\n                break;\n            case 'deleteRow':\n            case 'deleteDevice':\n                var deleteRow = function(id) {\n                    // check if row is in root\n                    if (tableData.hasOwnProperty(id)) {\n                        delete tableData[id]\n                        return true;\n                    }\n                    // check if row is a child\n                    let deleteChildRow = function(children, id) {\n                        for(let i = 0; i < children.length; i++){\n                            if (children[i].hasOwnProperty(tableIndex) && children[i][tableIndex]===id) {\n                                children.splice(i, 1); \n                                return true; \n                            }\n                            if (children[i].hasOwnProperty(\"_children\")) {\n                                if (deleteChildRow(children[i]._children,id)) {\n                                    if (children[i]._children.length === 0) {\n                                        delete children[i]._children;\n                                    }\n                                    return true;\n                                }\n                            }\n                        }\n                        return false;\n                    };\n                    \n                    for (let row in tableData) {\n                        if (tableData[row].hasOwnProperty(\"_children\")) {\n                            if (deleteChildRow(tableData[row]._children,id)) return true;\n                        }\n                    }\n                    return false;\n                }\n                \n                if (deleteRow(msg.argument)) {\n                    status.text=msg.argument+\" deleted\";\n                } else {\n                    status.fill=\"yellow\";\n                    status.text=msg.argument+\" undefined\";\n                }\n                break;\n            case 'ignoreRow':\n            case 'ignoreDevice':\n                if (tableData.hasOwnProperty(msg.argument)) {\n                    delete tableData[msg.argument];\n                    status.text=msg.argument+\" will be ignored\";\n                    if (!tableConfig.hasOwnProperty('ignoreDevice')) tableConfig.ignoreDevice={};\n                    tableConfig.ignoreDevice[msg.argument]=true;\n                }\n                break;\n            case 'unIgnoreRow':\n            case 'unIgnoreDevice':\n                if (tableConfig.hasOwnProperty('ignoreDevice')) {\n                    delete tableConfig.ignoreDevice[msg.argument];\n                }\n                break;\n            case 'unIgnoreRows':\n            case 'unIgnoreDevices':\n                delete tableConfig.ignoreDevice;\n                break;\n            case 'updateData':\n                status.text=\"column \"+msg.payload.column+\" updated\";\n                delete msg.ui_control;\n                return [{payload:status},msg];\n            case 'updateTable':\n                status.text=msg.command+\": \";\n                break;\n            case 'columnHide':\n                if (!tableConfig.hasOwnProperty('columnVisible')) tableConfig.columnVisible={};\n                tableConfig.columnVisible[msg.argument]=false;\n                break;\n            case 'columnUnHide':\n                if (!tableConfig.hasOwnProperty('columnVisible')) tableConfig.columnVisible={};\n                tableConfig.columnVisible[msg.argument]=true;\n                break;\n            case 'columnsUnHide':\n                for (let column in tableConfig.columnVisible) {\n                    if (tableConfig.columnVisible.hasOwnProperty(column)) tableConfig.columnVisible[column]=true;\n                }\n                break;\n            case 'refreshTable':\n                break;\n            case 'deleteColumnOrder':\n            case 'restoreColumnOrder':\n                delete tableConfig.columns;\n                break;\n            case 'deleteColumnWidth':\n            case 'resetColumnWidth':\n                delete tableConfig.columnWidths;\n                break;\n            case 'setResponsiveLayout':\n                tableConfig.ResponsiveLayout=!tableConfig.ResponsiveLayout;\n                break;\n            case 'deleteRowOrder':\n                delete tableConfig.rowOrder;\n                break;\n            case 'setMaxStore':\n                tableConfig.maxStore=msg.argument;\n                maxStore=msg.argument;\n                break;\n            case 'setMaxRows':\n                tableConfig.maxRows=msg.argument;\n                maxRows=msg.argument;\n                break;\n            default:\n                status.fill=\"red\";\n                status.text=\"unknown command \"+msg.command;\n                node.warn(\"[ui-table handler] \"+status.text);\n                break;\n        }\n        flow.set(\"$parent.\"+tableContext.tableConfig.name,tableConfig,tableContext.tableConfig.storage);\n        node.send([{payload:status},null,null]);\n    }\n\n    // crawl through tabulator arrays and updated user defined values\n    var crawlTabulator = function (columns,match,config,property) {\n        for (let column of columns) {\n            if (column.hasOwnProperty(\"columns\")) {\n                crawlTabulator(column.columns,match,config,property);\n            } else if (config.hasOwnProperty(column[match])) column[property]=config[column.field];\n        }\n    };\n    \n    // restore custom column width\n    if (tableConfig.hasOwnProperty(\"columnWidths\") && msg.hasOwnProperty(\"ui_control\")) {\n        crawlTabulator(msg.ui_control.tabulator.columns,\"field\",tableConfig.columnWidths,\"width\");\n    }\n    \n    // restore custom column hide/show\n    if (tableConfig.hasOwnProperty(\"columnVisible\") && msg.hasOwnProperty(\"ui_control\")) {\n        crawlTabulator(msg.ui_control.tabulator.columns,\"field\",tableConfig.columnVisible,\"visible\");\n    }\n    \n    // restore custom responsive / standard view\n    if (tableConfig.hasOwnProperty(\"ResponsiveLayout\")) {\n        if (!tableConfig.ResponsiveLayout) {\n            msg.ui_control.tabulator.responsiveLayout=false;\n        }\n        if (msg.ui_control.tabulator.hasOwnProperty('columns')) {\n            msg.ui_control.tabulator.columns.forEach((column,index) => {\n                if (column.formatter===\"responsiveCollapse\") { // hide expand column on any position\n                    column.visible=tableConfig.ResponsiveLayout;\n                    return;\n                }\n            });\n        }\n    }\n\n    // sort columns\n    if (tableConfig.hasOwnProperty(\"columns\") && msg.hasOwnProperty(\"ui_control\") && msg.ui_control.hasOwnProperty(\"tabulator\")) {\n        var addedColumns = 0;\n        var sortColumnsByLayout = function (sortColumns, columnsLayout, targetColumns) {\n            for (var layoutColumn=0;  layoutColumn<columnsLayout.length; layoutColumn++) {\n                for (var sortColumn in sortColumns) {\n                    if (sortColumns[sortColumn].hasOwnProperty(\"columns\")) {\n                        targetColumns.push({\"title\":sortColumns[sortColumn].title, \"columns\":[]});\n                        sortColumnsByLayout(sortColumns[sortColumn].columns,columnsLayout,targetColumns[targetColumns.length-1].columns);\n                        layoutColumn=addedColumns; // jump forward after childes added\n                    } else {\n                        if (columnsLayout[layoutColumn].field===sortColumns[sortColumn].field){\n                            targetColumns.push(sortColumns[sortColumn]);\n                            addedColumns++;\n                            break;\n                        }\n                    }\n                }\n            }\n        };                 \n        var newColumns=[];\n        sortColumnsByLayout(msg.ui_control.tabulator.columns,tableConfig.columns,newColumns);\n        msg.ui_control.tabulator.columns=newColumns;\n    }\n\n    // restore stored lines after connect\n\n    let command = msg.command;\n    var tableArray;\n    if (command===\"getTable\") {\n        msg.payload.tableArray=[];\n        tableArray=msg.payload.tableArray\n    } else {\n        msg.payload=[];\n        tableArray=msg.payload;\n    }\n    \n    var pushRowData = function(rowData) {\n        // ignore rows in ignoreRows array\n        if (tableConfig && tableConfig.hasOwnProperty(\"ignoreDevice\") && tableConfig.ignoreDevice[rowData]) {\n            // do nothing\n        } else {\n            // merge edits into table\n            if (tableEdit && tableEdit.hasOwnProperty(rowData)) {\n                let tableRow = RED.util.cloneMessage(tableData[rowData]);\n                Object.keys(tableEdit[rowData]).forEach((field) => {\n                    tableRow[field]=tableEdit[rowData][field];\n                });\n                tableArray.push(tableRow);\n            } else {\n                tableArray.push(tableData[rowData]);\n            }\n        }\n    }\n    \n    if (tableConfig.hasOwnProperty(\"rowOrder\")) {\n        // first check if new rows exits which are not in rowOrder\n        Object.keys(tableData).forEach((key) => {\n            if (tableConfig.rowOrder.indexOf(tableData[key][tableIndex])<0) {\n                tableConfig.rowOrder.push(tableData[key][tableIndex]); // add row to the end of rowOrder\n            }\n        });\n        tableConfig.rowOrder.forEach((value,index) => {\n            // node.warn([\"pushRowOrder\",value,tableData.hasOwnProperty(value),tableData[value]]);\n            if (tableData.hasOwnProperty(value)) { // push rows in rowOrder sequence\n                pushRowData(value);\n            } else { // delete not existing rows from rowOrder\n                tableConfig.rowOrder.splice(index,1)\n            }\n       });\n    } else {\n        for (let rowData in tableData) {\n            pushRowData(rowData);\n        }\n    }\n    // store the first index if maxRows limits amount of displayed lines\n    if (maxRows>0 && tableData) {\n        let tableKeys=Object.keys(tableData);\n        if (tableKeys.length>0 && typeof tableData[tableKeys[0]][tableIndex] === \"number\") {\n            tableConfig.currentFirstRow=tableData[tableKeys[0]][tableIndex];\n        }\n    }\n    \n    if (command=='getTable'){\n        status.fill=\"blue\";\n        status.text+=\" \"+tableArray.length+\" rows emitted\";\n        return [{payload:status},null,msg];\n    } else {\n        status.fill=\"blue\";\n        status.text+=\" \"+tableArray.length+\" rows restored\";\n        return [{payload:status},msg,[{topic:\"maxRows\",payload:maxRows},{topic:\"maxStore\",payload:maxStore}]];\n    }\n} if (msg.hasOwnProperty(\"ui_control\")) {\n    // callback from tabulator\n    status.fill=\"blue\";\n    status.text=\"callback \"+msg.ui_control.callback;\n    switch(msg.ui_control.callback) {\n        case \"columnResized\": // save new column width\n            if (tableConfig.columnWidths===undefined) tableConfig.columnWidths={};\n            tableConfig.columnWidths[msg.ui_control.columnWidths.field]=msg.ui_control.columnWidths.width;\n            flow.set(\"$parent.\"+tableContext.tableConfig.name,tableConfig,tableContext.tableConfig.storage);\n            status.text=msg.ui_control.columnWidths.field+\"=\"+msg.ui_control.columnWidths.width+\"px\";\n            break;\n        case \"columnMoved\": // save new column order\n            if (tableConfig.columns===undefined) tableConfig.columns=[];\n            tableConfig.columns=msg.ui_control.columns;\n            flow.set(\"$parent.\"+tableContext.tableConfig.name,tableConfig,tableContext.tableConfig.storage);\n            status.text=\"new column order\";\n            break;\n        case \"cellEdited\":\n            if (tableEdit) {\n                if (!tableEdit.hasOwnProperty(msg[tableIndex])) tableEdit[msg[tableIndex]]={};\n                tableEdit[msg[tableIndex]][msg.field] = msg.payload; // save data and mark as edited field\n                flow.set(\"$parent.\"+tableContext.tableEdit.name,tableEdit,tableContext.tableEdit.storage);\n                mergeEdits(tableData);\n                flow.set(\"$parent.\"+tableContext.tableData.name,tableData,tableContext.tableData.storage);\n                status.text=msg[tableIndex]+\" \"+msg.field+\" edited to \"+msg.payload;\n                msg[tableDataProp]={};\n                msg[tableDataProp][tableIndex]=msg[tableIndex];\n                msg[tableDataProp][msg.field]=msg.payload;\n                msgToTable.payload.arguments=[[msg[tableDataProp]]];\n                node.send([{payload:status},null,msg]); // was node.send([{payload:status},msgToTable,msg]);\n            } else {\n                node.error(\"[ui-table handler] no tableEdit store defined!\")\n            }\n            break;\n        case \"rowContext\":\n            msg.ignoredDevices=[];\n            for (let rowData in tableConfig.ignoreDevice) {\n                if (tableConfig.ignoreDevice.hasOwnProperty(rowData)) {\n                    msg.ignoredDevices.push({\"text\":rowData,\"icon\":\"fa fa-plug\",\"topic\":\"unIgnoreDevice\",\"payload\":rowData})  \n                }\n            }\n            break;\n        case \"headerContext\":\n            msg.hiddenColumns=[];\n            let tabulatorConfig = env.get('tabulator');\n            for (let column in tableConfig.columnVisible) {\n                if (tableConfig.columnVisible.hasOwnProperty(column) &&\n                    !tableConfig.columnVisible[column]) {\n                    let configColumn=searchTabulatorColumn(tabulatorConfig.tabulator.columns,\"field\",column);\n                    let icon;\n                    if (configColumn.hasOwnProperty('title') && configColumn.title.toLowerCase().includes('</i>')) {\n                        // <i class='fa fa-star-half-o'></i> State\n                        let start=configColumn.title.indexOf(\"'fa \");\n                        let end=configColumn.title.indexOf(\"'\",start+1);\n                        icon=configColumn.title.substring(start+4,end);\n                    }\n                    msg.hiddenColumns.push({\"text\":column,\"icon\":icon,\"topic\":\"columnUnHide\",\"payload\":configColumn.field})  \n                }\n            }\n            break;\n        case \"rowMoved\":\n            if (tableConfig.rowOrder===undefined) tableConfig.rowOrder={};\n            tableConfig.rowOrder=msg.ui_control.rowOrder;\n            flow.set(\"$parent.\"+tableContext.tableConfig.name,tableConfig,tableContext.tableConfig.storage);\n            status.text=\"new row order\";\n            break;\n        default:\n            // if rowIndex exists pass complete object\n            if (msg.hasOwnProperty(tableIndex)) {\n                msg.rowData=tableData[msg[tableIndex]];\n            }\n            status.text=\"pass message\";\n    }\n    return [{payload:status},null,msg];\n} \nif (Array.isArray(msg.payload)) {\n    tableData={};\n    \n    msg.payload.forEach((row) => {\n        if (row.hasOwnProperty(tableIndex)) {\n            tableData[row[tableIndex]]=row;\n        }\n    });\n    if (msg.keepEdits) {\n        mergeEdits(tableData);\n    }\n\n    \n    flow.set(\"$parent.\"+tableContext.tableData.name,tableData,tableContext.tableData.storage);\n    if (tableContext.hasOwnProperty(\"tableEdit\") && !msg.keepEdits) {\n        tableEdit={};\n        flow.set(\"$parent.\"+tableContext.tableEdit.name,tableEdit,tableContext.tableEdit.storage);\n    }\n    status.fill=\"blue\"\n    status.text=\"table replaced \"+msg.payload.length+\" rows\";\n    return [{payload:status},msg,null];\n}    \n    \n// nothing to do bejond this point\nstatus.text+=\" [\"+msg.payload+\"]\";\nreturn [{payload:status},null];\n",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 192,
        "y": 85,
        "wires": [
            [],
            [],
            []
        ],
        "icon": "font-awesome/fa-table"
    },
    {
        "id": "3bb529f3123a381b",
        "type": "inject",
        "z": "562197b4f4a67922",
        "name": "Insert Raw Data",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[{\"Id\":\"1\",\"Line\":\"F\",\"Cell\":\"A-1\",\"Back No\":\"AUK013\",\"Plan\":0,\"Actual\":0},{\"Id\":\"2\",\"Line\":\"F\",\"Cell\":\"A-2\",\"Back No\":\"AUK005\",\"Plan\":0,\"Actual\":0},{\"Id\":\"3\",\"Line\":\"F\",\"Cell\":\"B-1\",\"Back No\":\"AUK012\",\"Plan\":0,\"Actual\":0},{\"Id\":\"4\",\"Line\":\"F\",\"Cell\":\"B-2\",\"Back No\":\"AUK004\",\"Plan\":0,\"Actual\":0},{\"Id\":\"5\",\"Line\":\"F\",\"Cell\":\"C-1\",\"Back No\":\"AUK006\",\"Plan\":0,\"Actual\":0},{\"Id\":\"5\",\"Line\":\"F\",\"Cell\":\"C-2\",\"Back No\":\"AUK007\",\"Plan\":0,\"Actual\":0},{\"Id\":\"5\",\"Line\":\"F\",\"Cell\":\"C-3\",\"Back No\":\"AUK009\",\"Plan\":0,\"Actual\":0},{\"Id\":\"6\",\"Line\":\"F\",\"Cell\":\"D1-1\",\"Back No\":\"AUK002\",\"Plan\":0,\"Actual\":0},{\"Id\":\"6\",\"Line\":\"F\",\"Cell\":\"D1-2\",\"Back No\":\"AUK011\",\"Plan\":0,\"Actual\":0},{\"Id\":\"7\",\"Line\":\"F\",\"Cell\":\"D2-1\",\"Back No\":\"AUK003\",\"Plan\":0,\"Actual\":0},{\"Id\":\"8\",\"Line\":\"F\",\"Cell\":\"D2-2\",\"Back No\":\"AUK010\",\"Plan\":0,\"Actual\":0},{\"Id\":\"9\",\"Line\":\"F\",\"Cell\":\"E1-1\",\"Back No\":\"AUK017\",\"Plan\":0,\"Actual\":0},{\"Id\":\"5\",\"Line\":\"F\",\"Cell\":\"E1-2\",\"Back No\":\"AUK020\",\"Plan\":0,\"Actual\":0},{\"Id\":\"9\",\"Line\":\"F\",\"Cell\":\"E2-1\",\"Back No\":\"AUK016\",\"Plan\":0,\"Actual\":0},{\"Id\":\"5\",\"Line\":\"F\",\"Cell\":\"E2-2\",\"Back No\":\"AUK021\",\"Plan\":0,\"Actual\":0}]",
        "payloadType": "json",
        "x": 120,
        "y": 140,
        "wires": [
            [
                "fc35efef32c5cf97"
            ]
        ]
    },
    {
        "id": "fc35efef32c5cf97",
        "type": "change",
        "z": "562197b4f4a67922",
        "name": "Transform & filesave raw data",
        "rules": [
            {
                "t": "set",
                "p": "tableData",
                "pt": "flow",
                "to": "payload.{\t    \"Id\":`Id`,\t    \"Line\":`Line`,\t    \"Cell\":`Cell`,\t    \"TM\":\"\",\t    \"Back No\":`Back No`,\t    \"Plan\":`Plan`,\t    \"Actual\":`Actual`,\t    \"Progress\": Plan = 0 ? 0 : ((`Actual`/`Plan`)*100),\t    \"Created At\": $now()\t}",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 450,
        "y": 140,
        "wires": [
            [
                "5418e74923417250"
            ]
        ]
    },
    {
        "id": "9765f3da2d535ee3",
        "type": "ui_table",
        "z": "562197b4f4a67922",
        "group": "85b12cf0fa38d858",
        "name": "Line Table",
        "order": 1,
        "width": 16,
        "height": 9,
        "columns": [],
        "outputs": 1,
        "cts": true,
        "x": 530,
        "y": 220,
        "wires": [
            [
                "aea8981076227a62",
                "e1c8c5460b5100ea"
            ]
        ]
    },
    {
        "id": "f11114f9961458dd",
        "type": "subflow:11f19efd79056b77",
        "z": "562197b4f4a67922",
        "d": true,
        "name": "",
        "env": [
            {
                "name": "tabulator",
                "value": "{\"tabulator\":{\"responsiveLayout\":\"collapse\",\"layout\":\"fitColumns\",\"movableColumns\":true,\"index\":\"Id\",\"groupBy\":\"Cell\",\"columns\":[{\"align\":\"center\",\"headerSort\":false,\"frozen\":true,\"title\":\"Id\",\"field\":\"Id\"},{\"formatter\":\"function(cell, formatterParams, onRendered) {      var html = cell.getValue(); return html;  }\",\"frozen\":true,\"title\":\"Line\",\"field\":\"Line\"},{\"formatter\":\"function(cell, formatterParams, onRendered) {     var html = cell.getValue(); return html;  }\",\"title\":\"Cell\",\"field\":\"Cell\",\"frozen\":true},{\"title\":\"Back No\",\"field\":\"Back No\",\"frozen\":true},{\"title\":\"Plan\",\"field\":\"Plan\",\"width\":100,\"align\":\"left\",\"editor\":\"number\"},{\"title\":\"Actual\",\"field\":\"Actual\",\"width\":100,\"align\":\"left\",\"editor\":\"number\"},{\"title\":\"Progress\",\"field\":\"Progress\",\"align\":\"left\",\"formatter\":\"progress\"}],\"columnResized\":\"function(column){     var newColumn = {         field: column._column.field,         visible: column._column.visible,         width: column._column.width,         widthFixed: column._column.widthFixed,         widthStyled: column._column.widthStyled     }; this.send({topic:this.config.topic,ui_control:{callback:'columnResized',columnWidths:newColumn}}); }\",\"columnMoved\":\"function(column, columns){     var newColumns=[];     columns.forEach(function (column) {         newColumns.push({'field': column._column.definition.field, 'title': column._column.definition.title});     });     this.send({topic:this.config.topic,ui_control:{callback:'columnMoved',columns:newColumns}}); }\",\"rowFormatter\":\"function(row){     var data = row.getData();     switch (data.$state) {         case \\\"lost\\\":             row.getElement().style.backgroundColor = \\\"#9e2e66\\\";             row.getElement().style.color = \\\"#a6a6a6\\\";             break;         case \\\"sleeping\\\":             row.getElement().style.backgroundColor = \\\"#336699\\\";             break;         case \\\"disconnected\\\":             row.getElement().style.backgroundColor = \\\"#cc3300\\\";             row.getElement().style.color = \\\"#a6a6a6\\\";             break;         case \\\"alert\\\":             row.getElement().style.backgroundColor = \\\"#A6A6DF\\\";             break;         case \\\"init\\\":             row.getElement().style.backgroundColor = \\\"#f2f20d\\\";             break;         case \\\"ready\\\":             row.getElement().style.backgroundColor = \\\"\\\";             row.getElement().style.color = \\\"\\\";             break;         } }\",\"cellEdited\":\"function (cell) {     this.send(         {              ui_control: {callback:'cellEdited'},                               payload: cell.getValue(),                      oldValue: cell.getOldValue(),                      field: cell.getColumn().getField(),                      id: cell.getRow().getCell('Id').getValue()     }); }\"},\"customHeight\":12}",
                "type": "json"
            },
            {
                "name": "tableDataProp",
                "value": "",
                "type": "str"
            },
            {
                "name": "tableIndex",
                "value": "",
                "type": "str"
            },
            {
                "name": "maxRows",
                "value": "100",
                "type": "num"
            },
            {
                "name": "maxStore",
                "value": "100",
                "type": "num"
            },
            {
                "name": "dashboard",
                "value": "Line F",
                "type": "str"
            },
            {
                "name": "tableContext",
                "value": "{\"tableData\":{\"name\":\"tableData\",\"storage\":\"file\"},\"tableConfig\":{\"name\":\"tableConfig\",\"storage\":\"file\"},\"tableEdit\":{\"name\":\"tableEdit\",\"storage\":\"file\"}}",
                "type": "json"
            }
        ],
        "x": 100,
        "y": 440,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "9429cca408847a85",
        "type": "ui_ui_control",
        "z": "562197b4f4a67922",
        "name": "",
        "events": "all",
        "x": 80,
        "y": 220,
        "wires": [
            [
                "657d21fce3ecd7ea"
            ]
        ]
    },
    {
        "id": "657d21fce3ecd7ea",
        "type": "change",
        "z": "562197b4f4a67922",
        "name": "Setup payload and  ui_control",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "tableData",
                "tot": "flow",
                "dc": true
            },
            {
                "t": "set",
                "p": "ui_control",
                "pt": "msg",
                "to": "{\"tabulator\":{\"responsiveLayout\":\"collapse\",\"layout\":\"fitColumns\",\"movableColumns\":true,\"index\":\"Id\",\"groupBy\":\"Line\",\"columns\":[{\"align\":\"center\",\"headerSort\":false,\"frozen\":true,\"title\":\"Id\",\"field\":\"Id\"},{\"frozen\":true,\"title\":\"Line\",\"field\":\"Line\"},{\"title\":\"Cell\",\"field\":\"Cell\",\"frozen\":true},{\"title\":\"Back No\",\"field\":\"Back No\",\"frozen\":true,\"editable\":\"input\"},{\"title\":\"Team Member\",\"field\":\"TM\",\"editor\":\"input\"},{\"title\":\"Plan\",\"field\":\"Plan\",\"align\":\"left\",\"editor\":\"number\"},{\"title\":\"Actual\",\"field\":\"Actual\",\"align\":\"left\",\"editor\":\"number\"},{\"title\":\"Progress\",\"field\":\"Progress\",\"align\":\"left\",\"formatter\":\"progress\"}],\"columnResized\":\"function(column){     var newColumn = {         field: column._column.field,         visible: column._column.visible,         width: column._column.width,         widthFixed: column._column.widthFixed,         widthStyled: column._column.widthStyled     }; this.send({topic:this.config.topic,ui_control:{callback:'columnResized',columnWidths:newColumn}}); }\",\"columnMoved\":\"function(column, columns){     var newColumns=[];     columns.forEach(function (column) {         newColumns.push({'field': column._column.definition.field, 'title': column._column.definition.title});     });     this.send({topic:this.config.topic,ui_control:{callback:'columnMoved',columns:newColumns}}); }\",\"rowFormatter\":\"function(row){     var data = row.getData();     switch (data.$state) {         case \\\"lost\\\":             row.getElement().style.backgroundColor = \\\"#9e2e66\\\";             row.getElement().style.color = \\\"#a6a6a6\\\";             break;         case \\\"sleeping\\\":             row.getElement().style.backgroundColor = \\\"#336699\\\";             break;         case \\\"disconnected\\\":             row.getElement().style.backgroundColor = \\\"#cc3300\\\";             row.getElement().style.color = \\\"#a6a6a6\\\";             break;         case \\\"alert\\\":             row.getElement().style.backgroundColor = \\\"#A6A6DF\\\";             break;         case \\\"init\\\":             row.getElement().style.backgroundColor = \\\"#f2f20d\\\";             break;         case \\\"ready\\\":             row.getElement().style.backgroundColor = \\\"\\\";             row.getElement().style.color = \\\"\\\";             break;         } }\",\"cellEdited\":\"function (cell) { console.log('celledited callback called');    this.send(         {              ui_control: {callback:'cellEdited'},payload: cell.getValue(),oldValue: cell.getOldValue(),field: cell.getColumn().getField(),id: cell.getRow().getCell('Id').getValue()});console.log('table edit success');}\"},\"customHeight\":12}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 300,
        "y": 220,
        "wires": [
            [
                "9765f3da2d535ee3",
                "403b9d6d5a094913",
                "b8d8617f0c4b9440",
                "18d6b91713c6ccc2",
                "262dece09ffccbe8",
                "0933bb5b17de3a3e",
                "385819fd3a27168d",
                "8c341b4f021ac8bd",
                "aa10825ae8f424d1",
                "b4257dcdf0b8a91b",
                "e5a00f183ba35867",
                "76ec42689385a5c0",
                "7ad91f0c4dfc7f70",
                "d47b2a2ebd1b6959",
                "d3947d221334bca4",
                "497bd9d36c5f423e"
            ]
        ]
    },
    {
        "id": "d46645c44a1a1553",
        "type": "comment",
        "z": "562197b4f4a67922",
        "name": "Gunakan ni utk masukkan data permulaan",
        "info": "",
        "x": 180,
        "y": 60,
        "wires": []
    },
    {
        "id": "80625bcdc3601279",
        "type": "comment",
        "z": "562197b4f4a67922",
        "name": "data diambil drpd flow.tableData",
        "info": "",
        "x": 150,
        "y": 180,
        "wires": []
    },
    {
        "id": "190544d376618b4e",
        "type": "function",
        "z": "562197b4f4a67922",
        "d": true,
        "name": "function 2",
        "func": "celledited = function (cell) {     \n    console.log('celledited callback called'); \n    this.send(         \n        {              \n            ui_control: {callback:'cellEdited'},\n            payload: cell.getValue(),\n            oldValue: cell.getOldValue(),\n            field: cell.getColumn().getField(),\n            id: cell.getRow().getCell('Id').getValue()\n        });\n    console.log('table edit success');\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 80,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "aea8981076227a62",
        "type": "debug",
        "z": "562197b4f4a67922",
        "name": "from table",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 700,
        "y": 280,
        "wires": []
    },
    {
        "id": "ca748a580d870274",
        "type": "function",
        "z": "562197b4f4a67922",
        "name": "process cell edit",
        "func": "var tableData = flow.get(\"tableData\");\ntableData[msg.id-1][msg.field] = msg.payload;\ntableData[msg.id-1][\"Modified\"] = Date.now();\nflow.set(\"tableData\",tableData);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 220,
        "wires": [
            [
                "eb08a14f33272cc0"
            ]
        ]
    },
    {
        "id": "e1c8c5460b5100ea",
        "type": "switch",
        "z": "562197b4f4a67922",
        "name": "select only cellEdited",
        "property": "ui_control.callback",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "cellEdited",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 740,
        "y": 220,
        "wires": [
            [
                "ca748a580d870274"
            ]
        ]
    },
    {
        "id": "5418e74923417250",
        "type": "change",
        "z": "562197b4f4a67922",
        "name": "set lastUpdatedAt",
        "rules": [
            {
                "t": "set",
                "p": "lastUpdatedAt",
                "pt": "flow",
                "to": "",
                "tot": "date"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 770,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "eb08a14f33272cc0",
        "type": "change",
        "z": "562197b4f4a67922",
        "name": "update lastUpdatedAt",
        "rules": [
            {
                "t": "set",
                "p": "lastUpdatedAt",
                "pt": "flow",
                "to": "",
                "tot": "date"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1180,
        "y": 220,
        "wires": [
            [
                "657d21fce3ecd7ea"
            ]
        ]
    },
    {
        "id": "10029de9489aac10",
        "type": "ui_level",
        "z": "562197b4f4a67922",
        "group": "8e34121cef5b559c",
        "order": 3,
        "width": 3,
        "height": 2,
        "name": "A-1",
        "label": "",
        "colorHi": "#00e60f",
        "colorWarn": "#ff9900",
        "colorNormal": "#f00000",
        "colorOff": "#595959",
        "min": 0,
        "max": 100,
        "segWarn": "",
        "segHigh": "",
        "unit": "PCS",
        "layout": "sv",
        "channelA": "",
        "channelB": "",
        "decimals": 0,
        "animations": "off",
        "shape": "3",
        "colorschema": "rainbow",
        "textoptions": "custom",
        "colorText": "#eeeeee",
        "fontLabel": "1.6",
        "fontValue": "2.5",
        "fontSmall": "",
        "colorFromTheme": true,
        "textAnimations": false,
        "hideValue": false,
        "tickmode": "off",
        "peakmode": false,
        "property": "payload",
        "peaktime": 3000,
        "x": 850,
        "y": 400,
        "wires": []
    },
    {
        "id": "403b9d6d5a094913",
        "type": "change",
        "z": "562197b4f4a67922",
        "name": "setup display for Line F Cell A Part 1",
        "rules": [
            {
                "t": "set",
                "p": "control",
                "pt": "msg",
                "to": "payload[Line = \"F\" and Cell = \"A-1\"].{\t    \"label\":`Back No`,\t    \"max\":`Plan`,\t    \"min\": 0\t}",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "team",
                "pt": "msg",
                "to": "payload[Line = \"F\" and Cell = \"A-1\"].TM",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "plan",
                "pt": "msg",
                "to": "payload[Line = \"F\" and Cell = \"A-1\"].Plan",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload[Line = \"F\" and Cell = \"A-1\"].Actual",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 610,
        "y": 400,
        "wires": [
            [
                "10029de9489aac10",
                "b3ee9cd221053421",
                "b3ac89e913b6f9b8"
            ]
        ]
    },
    {
        "id": "83604711510e05c5",
        "type": "ui_level",
        "z": "562197b4f4a67922",
        "group": "8e34121cef5b559c",
        "order": 4,
        "width": 3,
        "height": 2,
        "name": "A-2",
        "label": "",
        "colorHi": "#00e60f",
        "colorWarn": "#ff9900",
        "colorNormal": "#f00000",
        "colorOff": "#595959",
        "min": 0,
        "max": 100,
        "segWarn": "",
        "segHigh": "",
        "unit": "Pcs",
        "layout": "sv",
        "channelA": "",
        "channelB": "",
        "decimals": 0,
        "animations": "off",
        "shape": "3",
        "colorschema": "rainbow",
        "textoptions": "custom",
        "colorText": "#eeeeee",
        "fontLabel": "1.6",
        "fontValue": "",
        "fontSmall": "",
        "colorFromTheme": true,
        "textAnimations": false,
        "hideValue": false,
        "tickmode": "off",
        "peakmode": false,
        "property": "payload",
        "peaktime": 3000,
        "x": 850,
        "y": 460,
        "wires": []
    },
    {
        "id": "b8d8617f0c4b9440",
        "type": "change",
        "z": "562197b4f4a67922",
        "name": "setup display for Line F Cell A Part 2",
        "rules": [
            {
                "t": "set",
                "p": "control",
                "pt": "msg",
                "to": "payload[Line = \"F\" and Cell = \"A-2\"].{\t    \"label\":`Back No`,\t    \"max\":`Plan`,\t    \"min\": 0\t}",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload[Line = \"F\" and Cell = \"A-2\"].Actual",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 610,
        "y": 460,
        "wires": [
            [
                "83604711510e05c5"
            ]
        ]
    },
    {
        "id": "918169a106107887",
        "type": "ui_level",
        "z": "562197b4f4a67922",
        "group": "72a409debd40a171",
        "order": 3,
        "width": 3,
        "height": 2,
        "name": "",
        "label": "",
        "colorHi": "#00e60f",
        "colorWarn": "#ff9900",
        "colorNormal": "#f00000",
        "colorOff": "#595959",
        "min": 0,
        "max": 100,
        "segWarn": "",
        "segHigh": "",
        "unit": "Pcs",
        "layout": "sv",
        "channelA": "",
        "channelB": "",
        "decimals": 0,
        "animations": "off",
        "shape": 2,
        "colorschema": "rainbow",
        "textoptions": "custom",
        "colorText": "#eeeeee",
        "fontLabel": "1.6",
        "fontValue": "",
        "fontSmall": "",
        "colorFromTheme": true,
        "textAnimations": false,
        "hideValue": false,
        "tickmode": "off",
        "peakmode": false,
        "property": "payload",
        "peaktime": 3000,
        "x": 850,
        "y": 600,
        "wires": []
    },
    {
        "id": "18d6b91713c6ccc2",
        "type": "change",
        "z": "562197b4f4a67922",
        "name": "setup display for Line F Cell B Part 1",
        "rules": [
            {
                "t": "set",
                "p": "control",
                "pt": "msg",
                "to": "payload[Line = \"F\" and Cell = \"B-1\"].{\t    \"label\":`Back No`,\t    \"max\":`Plan`,\t    \"min\": 0\t}",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "team",
                "pt": "msg",
                "to": "payload[Line = \"F\" and Cell = \"B-1\"].TM",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "plan",
                "pt": "msg",
                "to": "payload[Line = \"F\" and Cell = \"B-1\"].Plan",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload[Line = \"F\" and Cell = \"B-1\"].Actual",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 610,
        "y": 600,
        "wires": [
            [
                "918169a106107887",
                "60b1418a1c39bd3c",
                "f46114d79b2dd959"
            ]
        ]
    },
    {
        "id": "aa5a89c726bb7710",
        "type": "ui_level",
        "z": "562197b4f4a67922",
        "group": "72a409debd40a171",
        "order": 4,
        "width": 3,
        "height": 2,
        "name": "",
        "label": "",
        "colorHi": "#00e60f",
        "colorWarn": "#ff9900",
        "colorNormal": "#f00000",
        "colorOff": "#595959",
        "min": 0,
        "max": 100,
        "segWarn": "",
        "segHigh": "",
        "unit": "Pcs",
        "layout": "sv",
        "channelA": "",
        "channelB": "",
        "decimals": 0,
        "animations": "off",
        "shape": 2,
        "colorschema": "rainbow",
        "textoptions": "custom",
        "colorText": "#eeeeee",
        "fontLabel": "1.6",
        "fontValue": "",
        "fontSmall": "",
        "colorFromTheme": true,
        "textAnimations": false,
        "hideValue": false,
        "tickmode": "off",
        "peakmode": false,
        "property": "payload",
        "peaktime": 3000,
        "x": 850,
        "y": 660,
        "wires": []
    },
    {
        "id": "262dece09ffccbe8",
        "type": "change",
        "z": "562197b4f4a67922",
        "name": "setup display for Line F Cell B Part 2",
        "rules": [
            {
                "t": "set",
                "p": "control",
                "pt": "msg",
                "to": "payload[Line = \"F\" and Cell = \"B-2\"].{\t    \"label\":`Back No`,\t    \"max\":`Plan`,\t    \"min\": 0\t}",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload[Line = \"F\" and Cell = \"B-2\"].Actual",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 610,
        "y": 660,
        "wires": [
            [
                "aa5a89c726bb7710"
            ]
        ]
    },
    {
        "id": "b3ee9cd221053421",
        "type": "ui_text",
        "z": "562197b4f4a67922",
        "group": "8e34121cef5b559c",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Team Member:",
        "format": "<h1>{{msg.team | uppercase}}</h1>",
        "layout": "row-center",
        "className": "",
        "x": 880,
        "y": 320,
        "wires": []
    },
    {
        "id": "b3ac89e913b6f9b8",
        "type": "ui_text",
        "z": "562197b4f4a67922",
        "group": "8e34121cef5b559c",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Target:",
        "format": "<h1>{{msg.plan}}</h1>",
        "layout": "row-center",
        "className": "",
        "x": 850,
        "y": 360,
        "wires": []
    },
    {
        "id": "60b1418a1c39bd3c",
        "type": "ui_text",
        "z": "562197b4f4a67922",
        "group": "72a409debd40a171",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Team Member:",
        "format": "<h1>{{msg.team | uppercase}}</h1>",
        "layout": "row-center",
        "className": "",
        "x": 880,
        "y": 520,
        "wires": []
    },
    {
        "id": "f46114d79b2dd959",
        "type": "ui_text",
        "z": "562197b4f4a67922",
        "group": "72a409debd40a171",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Target:",
        "format": "<h1>{{msg.plan}}</h1>",
        "layout": "row-center",
        "className": "",
        "x": 850,
        "y": 560,
        "wires": []
    },
    {
        "id": "fa0751e8d1ed93ee",
        "type": "ui_level",
        "z": "562197b4f4a67922",
        "group": "1ee6fae1e6dd0ff9",
        "order": 3,
        "width": 3,
        "height": 2,
        "name": "",
        "label": "",
        "colorHi": "#00e60f",
        "colorWarn": "#ff9900",
        "colorNormal": "#f00000",
        "colorOff": "#595959",
        "min": 0,
        "max": 100,
        "segWarn": "",
        "segHigh": "",
        "unit": "Pcs",
        "layout": "sv",
        "channelA": "",
        "channelB": "",
        "decimals": 0,
        "animations": "off",
        "shape": 2,
        "colorschema": "rainbow",
        "textoptions": "custom",
        "colorText": "#eeeeee",
        "fontLabel": "1.6",
        "fontValue": "",
        "fontSmall": "",
        "colorFromTheme": true,
        "textAnimations": false,
        "hideValue": false,
        "tickmode": "off",
        "peakmode": false,
        "property": "payload",
        "peaktime": 3000,
        "x": 850,
        "y": 800,
        "wires": []
    },
    {
        "id": "0933bb5b17de3a3e",
        "type": "change",
        "z": "562197b4f4a67922",
        "name": "setup display for Line F Cell C Part 1",
        "rules": [
            {
                "t": "set",
                "p": "control",
                "pt": "msg",
                "to": "payload[Line = \"F\" and Cell = \"C-1\"].{\t    \"label\":`Back No`,\t    \"max\":`Plan`,\t    \"min\": 0\t}",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "team",
                "pt": "msg",
                "to": "payload[Line = \"F\" and Cell = \"C-1\"].TM",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "plan",
                "pt": "msg",
                "to": "payload[Line = \"F\" and Cell = \"C-1\"].Plan",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload[Line = \"F\" and Cell = \"C-1\"].Actual",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 610,
        "y": 800,
        "wires": [
            [
                "fa0751e8d1ed93ee",
                "a9a72adbdc7694b5",
                "ddf0d970d5e950d7"
            ]
        ]
    },
    {
        "id": "e9a66bb185278b7e",
        "type": "ui_level",
        "z": "562197b4f4a67922",
        "group": "1ee6fae1e6dd0ff9",
        "order": 4,
        "width": 3,
        "height": 2,
        "name": "",
        "label": "",
        "colorHi": "#00e60f",
        "colorWarn": "#ff9900",
        "colorNormal": "#f00000",
        "colorOff": "#595959",
        "min": 0,
        "max": 100,
        "segWarn": "",
        "segHigh": "",
        "unit": "Pcs",
        "layout": "sv",
        "channelA": "",
        "channelB": "",
        "decimals": 0,
        "animations": "off",
        "shape": 2,
        "colorschema": "rainbow",
        "textoptions": "custom",
        "colorText": "#eeeeee",
        "fontLabel": "1.6",
        "fontValue": "",
        "fontSmall": "",
        "colorFromTheme": true,
        "textAnimations": false,
        "hideValue": false,
        "tickmode": "off",
        "peakmode": false,
        "property": "payload",
        "peaktime": 3000,
        "x": 850,
        "y": 860,
        "wires": []
    },
    {
        "id": "385819fd3a27168d",
        "type": "change",
        "z": "562197b4f4a67922",
        "name": "setup display for Line F Cell C Part 2",
        "rules": [
            {
                "t": "set",
                "p": "control",
                "pt": "msg",
                "to": "payload[Line = \"F\" and Cell = \"C-2\"].{\t    \"label\":`Back No`,\t    \"max\":`Plan`,\t    \"min\": 0\t}",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload[Line = \"F\" and Cell = \"C-2\"].Actual",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 610,
        "y": 860,
        "wires": [
            [
                "e9a66bb185278b7e"
            ]
        ]
    },
    {
        "id": "a9a72adbdc7694b5",
        "type": "ui_text",
        "z": "562197b4f4a67922",
        "group": "1ee6fae1e6dd0ff9",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Team Member:",
        "format": "<h1>{{msg.team | uppercase}}</h1>",
        "layout": "row-center",
        "className": "",
        "x": 880,
        "y": 720,
        "wires": []
    },
    {
        "id": "ddf0d970d5e950d7",
        "type": "ui_text",
        "z": "562197b4f4a67922",
        "group": "1ee6fae1e6dd0ff9",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Target:",
        "format": "<h1>{{msg.plan}}</h1>",
        "layout": "row-center",
        "className": "",
        "x": 850,
        "y": 760,
        "wires": []
    },
    {
        "id": "ddf20301e822cc4d",
        "type": "ui_level",
        "z": "562197b4f4a67922",
        "group": "1ee6fae1e6dd0ff9",
        "order": 5,
        "width": 3,
        "height": 2,
        "name": "",
        "label": "",
        "colorHi": "#00e60f",
        "colorWarn": "#ff9900",
        "colorNormal": "#f00000",
        "colorOff": "#595959",
        "min": 0,
        "max": 100,
        "segWarn": "",
        "segHigh": "",
        "unit": "Pcs",
        "layout": "sv",
        "channelA": "",
        "channelB": "",
        "decimals": 0,
        "animations": "off",
        "shape": 2,
        "colorschema": "rainbow",
        "textoptions": "custom",
        "colorText": "#eeeeee",
        "fontLabel": "1.6",
        "fontValue": "",
        "fontSmall": "",
        "colorFromTheme": true,
        "textAnimations": false,
        "hideValue": false,
        "tickmode": "off",
        "peakmode": false,
        "property": "payload",
        "peaktime": 3000,
        "x": 850,
        "y": 920,
        "wires": []
    },
    {
        "id": "8c341b4f021ac8bd",
        "type": "change",
        "z": "562197b4f4a67922",
        "name": "setup display for Line F Cell C Part 3",
        "rules": [
            {
                "t": "set",
                "p": "control",
                "pt": "msg",
                "to": "payload[Line = \"F\" and Cell = \"C-3\"].{\t    \"label\":`Back No`,\t    \"max\":`Plan`,\t    \"min\": 0\t}",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload[Line = \"F\" and Cell = \"C-3\"].Actual",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 610,
        "y": 920,
        "wires": [
            [
                "ddf20301e822cc4d"
            ]
        ]
    },
    {
        "id": "2a6a26b8b8c93b5e",
        "type": "ui_level",
        "z": "562197b4f4a67922",
        "group": "4ad3863a54fa3a9f",
        "order": 3,
        "width": 3,
        "height": 2,
        "name": "",
        "label": "",
        "colorHi": "#00e60f",
        "colorWarn": "#ff9900",
        "colorNormal": "#f00000",
        "colorOff": "#595959",
        "min": 0,
        "max": 100,
        "segWarn": "",
        "segHigh": "",
        "unit": "Pcs",
        "layout": "sv",
        "channelA": "",
        "channelB": "",
        "decimals": 0,
        "animations": "off",
        "shape": 2,
        "colorschema": "rainbow",
        "textoptions": "custom",
        "colorText": "#eeeeee",
        "fontLabel": "1.6",
        "fontValue": "",
        "fontSmall": "",
        "colorFromTheme": true,
        "textAnimations": false,
        "hideValue": false,
        "tickmode": "off",
        "peakmode": false,
        "property": "payload",
        "peaktime": 3000,
        "x": 850,
        "y": 1060,
        "wires": []
    },
    {
        "id": "aa10825ae8f424d1",
        "type": "change",
        "z": "562197b4f4a67922",
        "name": "setup display for Line F Cell D1 Part 1",
        "rules": [
            {
                "t": "set",
                "p": "control",
                "pt": "msg",
                "to": "payload[Line = \"F\" and Cell = \"D1-1\"].{\t    \"label\":`Back No`,\t    \"max\":`Plan`,\t    \"min\": 0\t}",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "team",
                "pt": "msg",
                "to": "payload[Line = \"F\" and Cell = \"D1-1\"].TM",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "plan",
                "pt": "msg",
                "to": "payload[Line = \"F\" and Cell = \"D1-1\"].Plan",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload[Line = \"F\" and Cell = \"D1-1\"].Actual",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 610,
        "y": 1060,
        "wires": [
            [
                "2a6a26b8b8c93b5e",
                "9b228d5390edd44d",
                "923aeda19c7d1746"
            ]
        ]
    },
    {
        "id": "8eef3b829bcdd82b",
        "type": "ui_level",
        "z": "562197b4f4a67922",
        "group": "4ad3863a54fa3a9f",
        "order": 4,
        "width": 3,
        "height": 2,
        "name": "",
        "label": "",
        "colorHi": "#00e60f",
        "colorWarn": "#ff9900",
        "colorNormal": "#f00000",
        "colorOff": "#595959",
        "min": 0,
        "max": 100,
        "segWarn": "",
        "segHigh": "",
        "unit": "Pcs",
        "layout": "sv",
        "channelA": "",
        "channelB": "",
        "decimals": 0,
        "animations": "off",
        "shape": 2,
        "colorschema": "rainbow",
        "textoptions": "custom",
        "colorText": "#eeeeee",
        "fontLabel": "1.6",
        "fontValue": "",
        "fontSmall": "",
        "colorFromTheme": true,
        "textAnimations": false,
        "hideValue": false,
        "tickmode": "off",
        "peakmode": false,
        "property": "payload",
        "peaktime": 3000,
        "x": 850,
        "y": 1120,
        "wires": []
    },
    {
        "id": "b4257dcdf0b8a91b",
        "type": "change",
        "z": "562197b4f4a67922",
        "name": "setup display for Line F Cell D1 Part 2",
        "rules": [
            {
                "t": "set",
                "p": "control",
                "pt": "msg",
                "to": "payload[Line = \"F\" and Cell = \"D1-2\"].{\t    \"label\":`Back No`,\t    \"max\":`Plan`,\t    \"min\": 0\t}",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload[Line = \"F\" and Cell = \"D1-2\"].Actual",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 610,
        "y": 1120,
        "wires": [
            [
                "8eef3b829bcdd82b"
            ]
        ]
    },
    {
        "id": "9b228d5390edd44d",
        "type": "ui_text",
        "z": "562197b4f4a67922",
        "group": "4ad3863a54fa3a9f",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Team Member:",
        "format": "<h1>{{msg.team | uppercase}}</h1>",
        "layout": "row-center",
        "className": "",
        "x": 880,
        "y": 980,
        "wires": []
    },
    {
        "id": "923aeda19c7d1746",
        "type": "ui_text",
        "z": "562197b4f4a67922",
        "group": "4ad3863a54fa3a9f",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Target:",
        "format": "<h1>{{msg.plan}}</h1>",
        "layout": "row-center",
        "className": "",
        "x": 850,
        "y": 1020,
        "wires": []
    },
    {
        "id": "8343dcc4412b5877",
        "type": "ui_level",
        "z": "562197b4f4a67922",
        "group": "be5530b09ed4e2d1",
        "order": 3,
        "width": 3,
        "height": 2,
        "name": "",
        "label": "",
        "colorHi": "#00e60f",
        "colorWarn": "#ff9900",
        "colorNormal": "#f00000",
        "colorOff": "#595959",
        "min": 0,
        "max": 100,
        "segWarn": "",
        "segHigh": "",
        "unit": "Pcs",
        "layout": "sv",
        "channelA": "",
        "channelB": "",
        "decimals": 0,
        "animations": "off",
        "shape": 2,
        "colorschema": "rainbow",
        "textoptions": "custom",
        "colorText": "#eeeeee",
        "fontLabel": "1.6",
        "fontValue": "",
        "fontSmall": "",
        "colorFromTheme": true,
        "textAnimations": false,
        "hideValue": false,
        "tickmode": "off",
        "peakmode": false,
        "property": "payload",
        "peaktime": 3000,
        "x": 850,
        "y": 1260,
        "wires": []
    },
    {
        "id": "e5a00f183ba35867",
        "type": "change",
        "z": "562197b4f4a67922",
        "name": "setup display for Line F Cell D2 Part 1",
        "rules": [
            {
                "t": "set",
                "p": "control",
                "pt": "msg",
                "to": "payload[Line = \"F\" and Cell = \"D2-1\"].{\t    \"label\":`Back No`,\t    \"max\":`Plan`,\t    \"min\": 0\t}",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "team",
                "pt": "msg",
                "to": "payload[Line = \"F\" and Cell = \"D2-1\"].TM",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "plan",
                "pt": "msg",
                "to": "payload[Line = \"F\" and Cell = \"D2-1\"].Plan",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload[Line = \"F\" and Cell = \"D2-1\"].Actual",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 610,
        "y": 1260,
        "wires": [
            [
                "8343dcc4412b5877",
                "7746a6714c2680da",
                "3136f7f19d7d497a"
            ]
        ]
    },
    {
        "id": "c10e300dbfac4b73",
        "type": "ui_level",
        "z": "562197b4f4a67922",
        "group": "be5530b09ed4e2d1",
        "order": 4,
        "width": 3,
        "height": 2,
        "name": "",
        "label": "",
        "colorHi": "#00e60f",
        "colorWarn": "#ff9900",
        "colorNormal": "#f00000",
        "colorOff": "#595959",
        "min": 0,
        "max": 100,
        "segWarn": "",
        "segHigh": "",
        "unit": "Pcs",
        "layout": "sv",
        "channelA": "",
        "channelB": "",
        "decimals": 0,
        "animations": "off",
        "shape": 2,
        "colorschema": "rainbow",
        "textoptions": "custom",
        "colorText": "#eeeeee",
        "fontLabel": "1.6",
        "fontValue": "",
        "fontSmall": "",
        "colorFromTheme": true,
        "textAnimations": false,
        "hideValue": false,
        "tickmode": "off",
        "peakmode": false,
        "property": "payload",
        "peaktime": 3000,
        "x": 850,
        "y": 1320,
        "wires": []
    },
    {
        "id": "76ec42689385a5c0",
        "type": "change",
        "z": "562197b4f4a67922",
        "name": "setup display for Line F Cell D2 Part 2",
        "rules": [
            {
                "t": "set",
                "p": "control",
                "pt": "msg",
                "to": "payload[Line = \"F\" and Cell = \"D2-2\"].{\t    \"label\":`Back No`,\t    \"max\":`Plan`,\t    \"min\": 0\t}",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload[Line = \"F\" and Cell = \"D2-2\"].Actual",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 610,
        "y": 1320,
        "wires": [
            [
                "c10e300dbfac4b73"
            ]
        ]
    },
    {
        "id": "7746a6714c2680da",
        "type": "ui_text",
        "z": "562197b4f4a67922",
        "group": "be5530b09ed4e2d1",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Team Member:",
        "format": "<h1>{{msg.team | uppercase}}</h1>",
        "layout": "row-center",
        "className": "",
        "x": 880,
        "y": 1180,
        "wires": []
    },
    {
        "id": "3136f7f19d7d497a",
        "type": "ui_text",
        "z": "562197b4f4a67922",
        "group": "be5530b09ed4e2d1",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Target:",
        "format": "<h1>{{msg.plan}}</h1>",
        "layout": "row-center",
        "className": "",
        "x": 850,
        "y": 1220,
        "wires": []
    },
    {
        "id": "8bad3adc2db84a5a",
        "type": "ui_level",
        "z": "562197b4f4a67922",
        "group": "54c1916e62442956",
        "order": 3,
        "width": 3,
        "height": 2,
        "name": "",
        "label": "",
        "colorHi": "#00e60f",
        "colorWarn": "#ff9900",
        "colorNormal": "#f00000",
        "colorOff": "#595959",
        "min": 0,
        "max": 100,
        "segWarn": "",
        "segHigh": "",
        "unit": "Pcs",
        "layout": "sv",
        "channelA": "",
        "channelB": "",
        "decimals": 0,
        "animations": "off",
        "shape": 2,
        "colorschema": "rainbow",
        "textoptions": "custom",
        "colorText": "#eeeeee",
        "fontLabel": "1.6",
        "fontValue": "",
        "fontSmall": "",
        "colorFromTheme": true,
        "textAnimations": false,
        "hideValue": false,
        "tickmode": "off",
        "peakmode": false,
        "property": "payload",
        "peaktime": 3000,
        "x": 850,
        "y": 1460,
        "wires": []
    },
    {
        "id": "7ad91f0c4dfc7f70",
        "type": "change",
        "z": "562197b4f4a67922",
        "name": "setup display for Line F Cell E1 Part 1",
        "rules": [
            {
                "t": "set",
                "p": "control",
                "pt": "msg",
                "to": "payload[Line = \"F\" and Cell = \"E1-1\"].{\t    \"label\":`Back No`,\t    \"max\":`Plan`,\t    \"min\": 0\t}",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "team",
                "pt": "msg",
                "to": "payload[Line = \"F\" and Cell = \"E1-1\"].TM",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "plan",
                "pt": "msg",
                "to": "payload[Line = \"F\" and Cell = \"E1-1\"].Plan",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload[Line = \"F\" and Cell = \"E1-1\"].Actual",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 610,
        "y": 1460,
        "wires": [
            [
                "8bad3adc2db84a5a",
                "03f536f45243ab41",
                "6f0652475df246d6"
            ]
        ]
    },
    {
        "id": "b7718196b64b6987",
        "type": "ui_level",
        "z": "562197b4f4a67922",
        "group": "54c1916e62442956",
        "order": 4,
        "width": 3,
        "height": 2,
        "name": "",
        "label": "",
        "colorHi": "#00e60f",
        "colorWarn": "#ff9900",
        "colorNormal": "#f00000",
        "colorOff": "#595959",
        "min": 0,
        "max": 100,
        "segWarn": "",
        "segHigh": "",
        "unit": "Pcs",
        "layout": "sv",
        "channelA": "",
        "channelB": "",
        "decimals": 0,
        "animations": "off",
        "shape": 2,
        "colorschema": "rainbow",
        "textoptions": "custom",
        "colorText": "#eeeeee",
        "fontLabel": "1.6",
        "fontValue": "",
        "fontSmall": "",
        "colorFromTheme": true,
        "textAnimations": false,
        "hideValue": false,
        "tickmode": "off",
        "peakmode": false,
        "property": "payload",
        "peaktime": 3000,
        "x": 850,
        "y": 1520,
        "wires": []
    },
    {
        "id": "d47b2a2ebd1b6959",
        "type": "change",
        "z": "562197b4f4a67922",
        "name": "setup display for Line F Cell E1 Part 2",
        "rules": [
            {
                "t": "set",
                "p": "control",
                "pt": "msg",
                "to": "payload[Line = \"F\" and Cell = \"E1-2\"].{\t    \"label\":`Back No`,\t    \"max\":`Plan`,\t    \"min\": 0\t}",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload[Line = \"F\" and Cell = \"E1-2\"].Actual",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 610,
        "y": 1520,
        "wires": [
            [
                "b7718196b64b6987"
            ]
        ]
    },
    {
        "id": "03f536f45243ab41",
        "type": "ui_text",
        "z": "562197b4f4a67922",
        "group": "54c1916e62442956",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Team Member:",
        "format": "<h1>{{msg.team | uppercase}}</h1>",
        "layout": "row-center",
        "className": "",
        "x": 880,
        "y": 1380,
        "wires": []
    },
    {
        "id": "6f0652475df246d6",
        "type": "ui_text",
        "z": "562197b4f4a67922",
        "group": "54c1916e62442956",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Target:",
        "format": "<h1>{{msg.plan}}</h1>",
        "layout": "row-center",
        "className": "",
        "x": 850,
        "y": 1420,
        "wires": []
    },
    {
        "id": "b95e0e10c742f257",
        "type": "ui_level",
        "z": "562197b4f4a67922",
        "group": "ed4f37bf1c12fb43",
        "order": 3,
        "width": 3,
        "height": 2,
        "name": "",
        "label": "",
        "colorHi": "#00e60f",
        "colorWarn": "#ff9900",
        "colorNormal": "#f00000",
        "colorOff": "#595959",
        "min": 0,
        "max": 100,
        "segWarn": "",
        "segHigh": "",
        "unit": "Pcs",
        "layout": "sv",
        "channelA": "",
        "channelB": "",
        "decimals": 0,
        "animations": "off",
        "shape": 2,
        "colorschema": "rainbow",
        "textoptions": "custom",
        "colorText": "#eeeeee",
        "fontLabel": "1.6",
        "fontValue": "",
        "fontSmall": "",
        "colorFromTheme": true,
        "textAnimations": false,
        "hideValue": false,
        "tickmode": "off",
        "peakmode": false,
        "property": "payload",
        "peaktime": 3000,
        "x": 850,
        "y": 1660,
        "wires": []
    },
    {
        "id": "d3947d221334bca4",
        "type": "change",
        "z": "562197b4f4a67922",
        "name": "setup display for Line F Cell E2 Part 1",
        "rules": [
            {
                "t": "set",
                "p": "control",
                "pt": "msg",
                "to": "payload[Line = \"F\" and Cell = \"E2-1\"].{\t    \"label\":`Back No`,\t    \"max\":`Plan`,\t    \"min\": 0\t}",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "team",
                "pt": "msg",
                "to": "payload[Line = \"F\" and Cell = \"E2-1\"].TM",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "plan",
                "pt": "msg",
                "to": "payload[Line = \"F\" and Cell = \"E2-1\"].Plan",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload[Line = \"F\" and Cell = \"E2-1\"].Actual",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 610,
        "y": 1660,
        "wires": [
            [
                "b95e0e10c742f257",
                "189121105006a79c",
                "4921be461d386f70"
            ]
        ]
    },
    {
        "id": "b26dcb242b489723",
        "type": "ui_level",
        "z": "562197b4f4a67922",
        "group": "ed4f37bf1c12fb43",
        "order": 4,
        "width": 3,
        "height": 2,
        "name": "",
        "label": "",
        "colorHi": "#00e60f",
        "colorWarn": "#ff9900",
        "colorNormal": "#f00000",
        "colorOff": "#595959",
        "min": 0,
        "max": 100,
        "segWarn": "",
        "segHigh": "",
        "unit": "Pcs",
        "layout": "sv",
        "channelA": "",
        "channelB": "",
        "decimals": 0,
        "animations": "off",
        "shape": 2,
        "colorschema": "rainbow",
        "textoptions": "custom",
        "colorText": "#eeeeee",
        "fontLabel": "1.6",
        "fontValue": "",
        "fontSmall": "",
        "colorFromTheme": true,
        "textAnimations": false,
        "hideValue": false,
        "tickmode": "off",
        "peakmode": false,
        "property": "payload",
        "peaktime": 3000,
        "x": 850,
        "y": 1720,
        "wires": []
    },
    {
        "id": "497bd9d36c5f423e",
        "type": "change",
        "z": "562197b4f4a67922",
        "name": "setup display for Line F Cell E2 Part 2",
        "rules": [
            {
                "t": "set",
                "p": "control",
                "pt": "msg",
                "to": "payload[Line = \"F\" and Cell = \"E2-2\"].{\t    \"label\":`Back No`,\t    \"max\":`Plan`,\t    \"min\": 0\t}",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload[Line = \"F\" and Cell = \"E2-2\"].Actual",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 610,
        "y": 1720,
        "wires": [
            [
                "b26dcb242b489723"
            ]
        ]
    },
    {
        "id": "189121105006a79c",
        "type": "ui_text",
        "z": "562197b4f4a67922",
        "group": "ed4f37bf1c12fb43",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Team Member:",
        "format": "<h1>{{msg.team | uppercase}}</h1>",
        "layout": "row-center",
        "className": "",
        "x": 880,
        "y": 1580,
        "wires": []
    },
    {
        "id": "4921be461d386f70",
        "type": "ui_text",
        "z": "562197b4f4a67922",
        "group": "ed4f37bf1c12fb43",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Target:",
        "format": "<h1>{{msg.plan}}</h1>",
        "layout": "row-center",
        "className": "",
        "x": 850,
        "y": 1620,
        "wires": []
    },
    {
        "id": "2e6a6379.742abc",
        "type": "ui_table",
        "z": "78809bb47c7f02cd",
        "group": "ff9fdb9a.7da098",
        "name": "testTable",
        "order": 2,
        "width": 21,
        "height": 6,
        "columns": [
            {
                "field": "rowNumber",
                "title": "Row Number 1",
                "width": "",
                "align": "left",
                "formatter": "rownum",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "textValue",
                "title": "Text",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "numberValue",
                "title": "Number",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 1,
        "cts": true,
        "x": 900,
        "y": 120,
        "wires": [
            [
                "1c377ea0.5801e1"
            ]
        ]
    },
    {
        "id": "16664cef.5b26b3",
        "type": "function",
        "z": "78809bb47c7f02cd",
        "name": "table paramter",
        "func": "msg.ui_control = {tabulator:{}};\n\n//workaround that buttos can`t deliver empty strings\nif (msg.payload.hasOwnProperty('payload')) {\n    msg.payload=msg.payload.payload;\n}\n\nmsg.ui_control.tabulator[msg.topic]=msg.payload;\ndelete msg.topic;\nmsg.payload=null;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 400,
        "wires": [
            [
                "2e6a6379.742abc",
                "b8d75d24.6cbed"
            ]
        ]
    },
    {
        "id": "b8d75d24.6cbed",
        "type": "debug",
        "z": "78809bb47c7f02cd",
        "name": "table input",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 910,
        "y": 409,
        "wires": []
    },
    {
        "id": "1c377ea0.5801e1",
        "type": "debug",
        "z": "78809bb47c7f02cd",
        "name": "table output",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1063,
        "y": 120,
        "wires": []
    },
    {
        "id": "b15c31a9.af37c",
        "type": "ui_switch",
        "z": "78809bb47c7f02cd",
        "name": "selectable",
        "label": "selectable",
        "tooltip": "",
        "group": "ff9fdb9a.7da098",
        "order": 5,
        "width": 4,
        "height": 1,
        "passthru": true,
        "decouple": "false",
        "topic": "selectable",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "x": 322,
        "y": 205,
        "wires": [
            [
                "391e0fd118491fa4"
            ]
        ]
    },
    {
        "id": "75207e8d.c54d4",
        "type": "ui_switch",
        "z": "78809bb47c7f02cd",
        "name": "movableColumns",
        "label": "movableColumns",
        "tooltip": "",
        "group": "ff9fdb9a.7da098",
        "order": 9,
        "width": 4,
        "height": 1,
        "passthru": true,
        "decouple": "false",
        "topic": "movableColumns",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "x": 352,
        "y": 256,
        "wires": [
            [
                "391e0fd118491fa4"
            ]
        ]
    },
    {
        "id": "c585e7a1.dfc648",
        "type": "ui_button",
        "z": "78809bb47c7f02cd",
        "name": "",
        "group": "ff9fdb9a.7da098",
        "order": 10,
        "width": 4,
        "height": 1,
        "passthru": false,
        "label": "Format Numbers > 100",
        "tooltip": "using a rowFormatter callback function",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "function(row){         if(row.getData().numberValue>100){             row.getElement().style.backgroundColor = \"#A6A6DF\";         }     },",
        "payloadType": "str",
        "topic": "rowFormatter",
        "topicType": "str",
        "x": 372,
        "y": 392,
        "wires": [
            [
                "391e0fd118491fa4"
            ]
        ]
    },
    {
        "id": "f178c6fe.710ef8",
        "type": "ui_button",
        "z": "78809bb47c7f02cd",
        "name": "",
        "group": "ff9fdb9a.7da098",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Fill demo data",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "[{\"textValue\":\"Line #1\",\"numberValue\":123.12},{\"textValue\":\"Line #2\",\"numberValue\":100},{\"textValue\":\"Line #3\",\"numberValue\":50}]",
        "payloadType": "json",
        "topic": "rowFormatter",
        "x": 342,
        "y": 120,
        "wires": [
            [
                "2e6a6379.742abc"
            ]
        ]
    },
    {
        "id": "2403f929.df4006",
        "type": "ui_button",
        "z": "78809bb47c7f02cd",
        "name": "",
        "group": "ff9fdb9a.7da098",
        "order": 8,
        "width": 4,
        "height": 1,
        "passthru": false,
        "label": "inject Tooltips callback",
        "tooltip": "cell.getColumn().getField() + \" - \" + cell.getValue();",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "function(cell){return  cell.getColumn().getField() + \" - \" + cell.getValue(); },",
        "payloadType": "str",
        "topic": "tooltips",
        "topicType": "str",
        "x": 362,
        "y": 494,
        "wires": [
            [
                "391e0fd118491fa4"
            ]
        ]
    },
    {
        "id": "f6c68c45.58003",
        "type": "ui_button",
        "z": "78809bb47c7f02cd",
        "name": "",
        "group": "ff9fdb9a.7da098",
        "order": 4,
        "width": 4,
        "height": 1,
        "passthru": false,
        "label": "clear Tooltips callback",
        "tooltip": "empty string is not possible! so use a single space",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "{\"payload\":\"\"}",
        "payloadType": "json",
        "topic": "tooltips",
        "topicType": "str",
        "x": 362,
        "y": 528,
        "wires": [
            [
                "391e0fd118491fa4"
            ]
        ]
    },
    {
        "id": "d2b29dda.60a5a",
        "type": "ui_button",
        "z": "78809bb47c7f02cd",
        "name": "",
        "group": "ff9fdb9a.7da098",
        "order": 6,
        "width": 4,
        "height": 1,
        "passthru": false,
        "label": "reformat Number column",
        "tooltip": "inject additional paramters to numberValue column",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "[{\"field\":\"numberValue\",\"formatterParams\":{\"min\":0,\"max\":200,\"legend\":\"function (value) {     if (value<100) return \\\"<span style='color:#FF0000;'>\\\"+value+\\\"</span>\\\";     else return \\\"<span style='color:#000000;'>\\\"+value+\\\"</span>\\\";  }\",\"legendAlign\":\"center\"},\"formatter\":\"progress\",\"topCalc\":\"function(values, data, calcParams){     var total = 0;     var calc = 0;     var count = 0;     data.forEach(value => {         total+=Number(value.numberValue);         count++;     });     if (count>0) calc=(total/count).toFixed(2);     return `${calc} (avg)`; }\",\"headerTooltip\":\"avarage\"}]",
        "payloadType": "json",
        "topic": "columns",
        "topicType": "str",
        "x": 372,
        "y": 596,
        "wires": [
            [
                "391e0fd118491fa4"
            ]
        ]
    },
    {
        "id": "7b6490b3.cd9c7",
        "type": "function",
        "z": "78809bb47c7f02cd",
        "name": "callback function(s)",
        "func": "// how to use the editor to write callback functions\n// DO NOT wire this into your flow!\n// copy / paste \"function( ... }\" into the correct calback parameter\n// use the \"debugger\" statement to debug your callback inside your browser\n\nvar topCalc = function(values, data, calcParams){\n    var total = 0;\n    var calc = 0;\n    var count = 0;\n    data.forEach(value => {\n        total+=Number(value.numberValue);\n        count++;\n    });\n    if (count>0) calc=(total/count).toFixed(2);\n    return `${calc} (avg)`;\n}\n\nvar legend = function (value) {\n    if (value<100) return \"<span style='color:#FF0000;'>\"+value+\"</span>\";\n    else return \"<span style='color:#000000;'>\"+value+\"</span>\"; \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 692,
        "y": 528,
        "wires": [
            []
        ]
    },
    {
        "id": "91506d4b.4956a",
        "type": "comment",
        "z": "78809bb47c7f02cd",
        "name": "Intentionally not wired into the flow!",
        "info": "use the editor to write callback functions\n\nDO NOT wire this into your flow!\n\ncopy / paste `function( ... }` into the correct calback parameter\nuse the `debugger` statement to debug your callback inside your browser\n",
        "x": 742,
        "y": 494,
        "wires": []
    },
    {
        "id": "732afcea.f728f4",
        "type": "ui_button",
        "z": "78809bb47c7f02cd",
        "name": "",
        "group": "ff9fdb9a.7da098",
        "order": 3,
        "width": 4,
        "height": 1,
        "passthru": false,
        "label": "reset Number column",
        "tooltip": "inject additional paramters to numberValue column",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "[{\"field\":\"numberValue\",\"formatter\":\"plainText\",\"topCalc\":\"\",\"headerTooltip\":\"\"}]",
        "payloadType": "json",
        "topic": "columns",
        "x": 362,
        "y": 630,
        "wires": [
            [
                "391e0fd118491fa4"
            ]
        ]
    },
    {
        "id": "89cca7ea.7fc998",
        "type": "ui_button",
        "z": "78809bb47c7f02cd",
        "name": "",
        "group": "ff9fdb9a.7da098",
        "order": 14,
        "width": 4,
        "height": 1,
        "passthru": false,
        "label": "add/show id column",
        "tooltip": "add a new column",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "[{\"field\":\"id\",\"title\":\"id\",\"visible\":true,\"formatter\":\"plainText\"}]",
        "payloadType": "json",
        "topic": "columns",
        "x": 362,
        "y": 698,
        "wires": [
            [
                "391e0fd118491fa4"
            ]
        ]
    },
    {
        "id": "32a3c4ad.1b85fc",
        "type": "ui_button",
        "z": "78809bb47c7f02cd",
        "name": "",
        "group": "ff9fdb9a.7da098",
        "order": 11,
        "width": 4,
        "height": 1,
        "passthru": false,
        "label": "hide id column",
        "tooltip": "hide id column (it is not possible to delete a existing column definition)",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "[{\"field\":\"id\",\"title\":\"id\",\"visible\":false,\"formatter\":\"plainText\"}]",
        "payloadType": "json",
        "topic": "columns",
        "x": 342,
        "y": 732,
        "wires": [
            [
                "391e0fd118491fa4"
            ]
        ]
    },
    {
        "id": "25247f4b.cc7ec",
        "type": "inject",
        "z": "78809bb47c7f02cd",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 176,
        "y": 256,
        "wires": [
            [
                "75207e8d.c54d4",
                "bd3fd382.a2aa9"
            ]
        ]
    },
    {
        "id": "18ed8d27.bf00a3",
        "type": "ui_button",
        "z": "78809bb47c7f02cd",
        "name": "",
        "group": "ff9fdb9a.7da098",
        "order": 12,
        "width": 4,
        "height": 1,
        "passthru": false,
        "label": "reset Numbers > 100",
        "tooltip": "using a rowFormatter callback function",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "{\"payload\":\"\"}",
        "payloadType": "json",
        "topic": "rowFormatter",
        "topicType": "str",
        "x": 362,
        "y": 426,
        "wires": [
            [
                "391e0fd118491fa4"
            ]
        ]
    },
    {
        "id": "bd3fd382.a2aa9",
        "type": "ui_switch",
        "z": "78809bb47c7f02cd",
        "name": "headerVisible",
        "label": "headerVisible",
        "tooltip": "",
        "group": "ff9fdb9a.7da098",
        "order": 7,
        "width": 4,
        "height": 1,
        "passthru": true,
        "decouple": "false",
        "topic": "headerVisible",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "x": 342,
        "y": 307,
        "wires": [
            [
                "391e0fd118491fa4"
            ]
        ]
    },
    {
        "id": "b075d2ac.a69f3",
        "type": "ui_table",
        "z": "3426577f90538292",
        "group": "237da972.5d69a6",
        "name": "",
        "order": 0,
        "width": "17",
        "height": "9",
        "columns": [
            {
                "field": "id",
                "title": "id",
                "width": "",
                "align": "right",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "timestamp",
                "title": "Timestamp",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "text",
                "title": "Text",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 1,
        "cts": true,
        "x": 730,
        "y": 420,
        "wires": [
            [
                "588f316.0b070d",
                "76c4495f.da70f8"
            ]
        ]
    },
    {
        "id": "f8a9323b.fedf4",
        "type": "inject",
        "z": "3426577f90538292",
        "name": "add @ top",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 94,
        "y": 318,
        "wires": [
            [
                "eb577b4b.510388"
            ]
        ]
    },
    {
        "id": "b54f6ce8.3b1a4",
        "type": "debug",
        "z": "3426577f90538292",
        "name": "addRow",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 315,
        "y": 420,
        "wires": []
    },
    {
        "id": "eb577b4b.510388",
        "type": "function",
        "z": "3426577f90538292",
        "name": "addRow @ top",
        "func": "var id=flow.get(\"lastId\") || 0;\n++id;\nmsg.payload={\n    command:\"addRow\",\n    arguments: [\n        [\n            {\n            \"id\":id,\n            \"timestamp\":msg.payload,\n            \"text\":\"addRow @ top (#\"+id+\")\"\n            }\n        ],\n        true\n    ],\n    returnPromise: true\n}\nflow.set(\"lastId\",id);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 335,
        "y": 284,
        "wires": [
            [
                "b54f6ce8.3b1a4",
                "b075d2ac.a69f3"
            ]
        ],
        "info": "# addRow([row],onTop)\n\n`onTop=true`\n\nadds a new Row on top of the table"
    },
    {
        "id": "588f316.0b070d",
        "type": "debug",
        "z": "3426577f90538292",
        "name": "response from ui-table",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1035,
        "y": 420,
        "wires": []
    },
    {
        "id": "12606591.7a3dca",
        "type": "inject",
        "z": "3426577f90538292",
        "name": "Init 20 rows",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "20",
        "payloadType": "num",
        "x": 104,
        "y": 148,
        "wires": [
            [
                "d4dce9b4.1f2588"
            ]
        ]
    },
    {
        "id": "d4dce9b4.1f2588",
        "type": "function",
        "z": "3426577f90538292",
        "name": "table with n rows as array",
        "func": "var numberOfRows = msg.payload;\nflow.set(\"lastId\",numberOfRows);\nmsg.payload=[];\nfor (let i=1; i<=numberOfRows; i++) {\n    msg.payload.push({\"id\":i,\"timestamp\":Date.now(),\"text\":\"this is line\"+i})\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 365,
        "y": 114,
        "wires": [
            [
                "b075d2ac.a69f3",
                "f9bfd98.abe1a28",
                "76c4495f.da70f8"
            ]
        ]
    },
    {
        "id": "8254f2d2.eeaa1",
        "type": "function",
        "z": "3426577f90538292",
        "name": "updateOrAddData (add)",
        "func": "var id=flow.get(\"lastId\") || 0;\n++id;\nmsg.payload={\n    command:\"updateOrAddData\",\n    arguments: [\n        [\n            {\n            \"id\":id,\n            \"timestamp\":msg.payload,\n            \"text\":\"updateOrAddData (add) (#\"+id+\")\"\n            }\n        ]\n    ],\n    returnPromise: true\n}\nflow.set(\"lastId\",id);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 365,
        "y": 471,
        "wires": [
            [
                "570e922d.1d465c",
                "b075d2ac.a69f3"
            ]
        ],
        "info": "# updateOrAddData([row])\n\nadds a the row with a new id (same as addRow)"
    },
    {
        "id": "cbd6baa0.fa7d78",
        "type": "inject",
        "z": "3426577f90538292",
        "name": "add",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 84,
        "y": 505,
        "wires": [
            [
                "8254f2d2.eeaa1"
            ]
        ]
    },
    {
        "id": "570e922d.1d465c",
        "type": "debug",
        "z": "3426577f90538292",
        "name": "updateOrAddData",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 345,
        "y": 590,
        "wires": []
    },
    {
        "id": "782ab41e.cbb66c",
        "type": "inject",
        "z": "3426577f90538292",
        "name": "add @ end",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 94,
        "y": 403,
        "wires": [
            [
                "760fde70.028f"
            ]
        ]
    },
    {
        "id": "760fde70.028f",
        "type": "function",
        "z": "3426577f90538292",
        "name": "addRow @ end",
        "func": "var id=flow.get(\"lastId\") || 0;\n++id;\nmsg.payload={\n    command:\"addRow\",\n    arguments: [\n        [\n            {\n            \"id\":id,\n            \"timestamp\":msg.payload,\n            \"text\":\"addRow @ end (#\"+id+\")\"\n            }\n        ],\n        false\n    ],\n    returnPromise: true\n}\nflow.set(\"lastId\",id);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 335,
        "y": 369,
        "wires": [
            [
                "b54f6ce8.3b1a4",
                "b075d2ac.a69f3"
            ]
        ],
        "info": "# addRow([row],onTop)\n\n`onTop=false`\n\nadds a new Row on top of the table"
    },
    {
        "id": "deeff963.289f08",
        "type": "function",
        "z": "3426577f90538292",
        "name": "updateOrAddData (update)",
        "func": "var id=flow.get(\"lastId\") || 0;\nif (id<2) {\n    node.error(\"use only if minimum of 2 Lines existing!\")\n    return;\n}\n\nid=Math.floor(id/2); //\nmsg.payload={\n    command:\"updateOrAddData\",\n    arguments: [\n        [\n            {\n            \"id\":id,\n            \"timestamp\":msg.payload,\n            \"text\":\"updateOrAddData (update) (#\"+id+\")\"\n            }\n        ]\n    ],\n    returnPromise: true\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 375,
        "y": 539,
        "wires": [
            [
                "570e922d.1d465c",
                "b075d2ac.a69f3"
            ]
        ],
        "info": "# updateOrAddData([row])\n\nupdates a the row with an id in the middle from 1 to lastId, hope it exists!\nIf not a row will be added"
    },
    {
        "id": "557e109d.f9d7e",
        "type": "comment",
        "z": "3426577f90538292",
        "name": "update ui-table by passing the complete tableData as array",
        "info": "",
        "x": 227,
        "y": 63,
        "wires": []
    },
    {
        "id": "6a095f36.8f13a",
        "type": "comment",
        "z": "3426577f90538292",
        "name": "update ui-table by using commands",
        "info": "",
        "x": 157,
        "y": 233,
        "wires": []
    },
    {
        "id": "f08308d6.c66f68",
        "type": "inject",
        "z": "3426577f90538292",
        "name": "update",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 84,
        "y": 573,
        "wires": [
            [
                "deeff963.289f08"
            ]
        ]
    },
    {
        "id": "77b4d006.543ed",
        "type": "function",
        "z": "3426577f90538292",
        "name": "deleteRow",
        "func": "var id=flow.get(\"lastId\") || 0;\nif (id<2) {\n    node.error(\"use only if minimum of 2 Lines existing!\")\n    return;\n}\n\nid=Math.floor(id/2); //\nmsg.payload={\n    command:\"deleteRow\",\n    arguments: [id],\n    returnPromise: true\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 325,
        "y": 692,
        "wires": [
            [
                "e34a75a3.9f0188",
                "b075d2ac.a69f3"
            ]
        ],
        "info": "# deleteRow(row / [rows])\n\n`row=singleId`\n\nor\n\n`row=[array of IDs]` // seems there is a bug/issue in tabulator\n\ndelete a single the row with an id in the middle from 1 to lastId, hope it exists.\n\nWill fail on the second hit if you inject this two times because the id wad deleteted on the first"
    },
    {
        "id": "936c8219.458bc",
        "type": "inject",
        "z": "3426577f90538292",
        "name": "delete",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 84,
        "y": 726,
        "wires": [
            [
                "77b4d006.543ed"
            ]
        ]
    },
    {
        "id": "e34a75a3.9f0188",
        "type": "debug",
        "z": "3426577f90538292",
        "name": "deleteRow",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 325,
        "y": 811,
        "wires": []
    },
    {
        "id": "fafa24f8.577d28",
        "type": "comment",
        "z": "3426577f90538292",
        "name": "deleteRow will punch holes in table!",
        "info": "",
        "x": 157,
        "y": 641,
        "wires": []
    },
    {
        "id": "f9bfd98.abe1a28",
        "type": "debug",
        "z": "3426577f90538292",
        "name": "addRow",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 315,
        "y": 165,
        "wires": []
    },
    {
        "id": "76c4495f.da70f8",
        "type": "function",
        "z": "3426577f90538292",
        "name": "table recorder",
        "func": "var status = {fill:\"red\",shape:\"ring\",text:\"an error occured\"};\nvar success = (msg.topic && msg.topic===\"success\") || false;\nvar tableData = flow.get(\"tableData\");\nif (tableData === undefined) {\n    tableData = [];\n    flow.set(\"tableData\",tableData);\n}\n\n// find the index for a row in tableData for a given index (id)\nfunction checkIndex(id) {\n    let matchRow=-1\n    tableData.forEach(function (row,index){\n        if (row.id === id){\n            matchRow=index;\n            return matchRow;\n        }\n    })\n    return matchRow;\n}\n\n// flat merge one row \nfunction mergeRow(dest,source) {\n    Object.keys(source).forEach(function(key) {\n        dest[key]=source[key];\n    })\n}\n\n//merge or add one or many rows into tableData \nfunction mergeData(newData,toTop) {\n    newData.forEach(function (item,index) {\n        node.warn([\"findIndex\",item]);\n        let row=checkIndex(item.id);\n        if (row<0) { // row do not existst in tableData\n            if (toTop) {\n                tableData.push(item);\n                status.text+=\"newRow @ top\";\n            } else {\n                tableData.unshift(item);\n                status.text+=\"newRow @ bottom\";\n            }\n            return;\n        } else { // row exists so update\n            mergeRow(tableData[row],item);\n            status.text+=\"row updated\";\n            return;\n        }\n        if (status.text!==\"\") node.status(status);\n    });\n}\n\nswitch (typeof msg.payload){\n    case \"string\":\n        node.warn([\"[table recorder] \",(typeof msg.payload),msg.payload]);\n        switch (msg.payload){\n            case \"change\":\n                status={fill:\"green\",shape:\"dot\",text:\"table restored \"+tableData.length+\" rows\"};\n                msg.payload=tableData;\n                break;\n        }\n        break;\n    case \"object\":\n        node.warn([\"[table recorder] \",(typeof msg.payload),msg.payload]);\n        if (Array.isArray(msg.payload)) { // replace all tableData\n            status={fill:\"green\",shape:\"dot\",text:\"table replaced \"+msg.payload.length+\" rows\"};\n            tableData=RED.util.cloneMessage(msg.payload); \n        } else {\n            switch (msg.payload.command) { // clearData does not return a promise!\n                case \"clearData\":\n                    status={fill:\"green\",shape:\"dot\",text:\"clearData: done\"};\n                    tableData=[];\n                    flow.set(\"lastId\",0);\n                    break;                \n            }\n        }\n        break;\n    default: // likely a msg fom a ui-table command or callback\n        if (msg.hasOwnProperty(\"topic\")&&\n            msg.hasOwnProperty(\"ui_control\") && \n            msg.ui_control.hasOwnProperty(\"callback\") &&\n            msg.hasOwnProperty(\"return\")) { // message originates from a ui-table callback\n            if (success) {\n                switch(msg.return.command) {\n                    case \"addRow\":\n                        status.text=\"addRow: \";\n                        mergeData(msg.return.arguments[0],msg.return.arguments[1]);\n                        status.shape=\"dot\";\n                        break;\n                    case \"updateOrAddData\":\n                        status.text=\"updateOrAddData: \";\n                        mergeData(msg.return.arguments[0]);\n                        break;\n                    case \"deleteRow\":\n                        let row=checkIndex(msg.return.arguments[0]);\n                        tableData.splice(row,1);\n                        status.shape=\"dot\";\n                        status.text=\"deleteRow: \"+row+\" deleted\";\n                        break;\n                    default:\n                        status={fill:\"yellow\",shape:\"dot\",text:msg.return.command + \" unknown!\"};\n                        break;         \n                }\n            } else {\n                status.text=msg.topic+\" \"+msg.error;\n            }\n        }\n        break;\n}\nif (success) status.fill=\"green\";\nflow.set(\"tableData\",tableData);\nnode.status(status);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1015,
        "y": 488,
        "wires": [
            [
                "b075d2ac.a69f3"
            ]
        ],
        "icon": "font-awesome/fa-database",
        "info": "# simple ui-table handler\n## abstract\nUsing ui-table with commands offer the hole flexibilty of tabulator. The table can be manipulated down to cell level.\nAs the ui-table node only passes the commands to tabulator and receives promises back the node does not hold the table data. If the data should be available after refresh, tab change, new connections the flow is responsible to cache the data and all the manipulations.\nThis node takes care of most simple data manipulation commands and holds a copy of the data in `flow.context.tabledata`\n\n## details\n\n### row index (id)\n\nTo identify a [row a index](http://tabulator.info/docs/4.5/data#overview) column has to be defined. This colum defaults to `id` but can be changed by specifing a **field** by using `msg.ui_control`. In this example the row index is a simple counter adding up by one if a new line is added.\n\n### addRow command\n\n[details @ tabulator addRow docs](http://tabulator.info/docs/4.5/update#alter-add)\n\nYou can add a row by sending the `addRow` command. You can decide if the row adds on the top or at the bottom of table.\n\n### addOrUpdate command\n\n[details @ tabulator addOrUpdate docs](http://tabulator.info/docs/4.5/update#alter-update)\n\nTo update data the best way is to use the `addOrUpdate` command. If the row indetified by the index is not exeisting a new row will be added automatically\n\n### deleteRow command\n\n[details @ tabulator deleteRow docs](http://tabulator.info/docs/4.5/update#row)\n\nDelete one or more rows (passing an array always results in \"row not found error\"! I think there is an issue in tabulator)\n\n### clearData\n\n[details @ tabulator clearData docs](http://tabulator.info/docs/4.5/update#alter-empty)\n\nunfortunately this command (currently) do not send a promise back! So we have to pass it directly to the table handler"
    },
    {
        "id": "7b1c27f4.36a718",
        "type": "ui_ui_control",
        "z": "3426577f90538292",
        "name": "",
        "events": "all",
        "x": 740,
        "y": 488,
        "wires": [
            [
                "76c4495f.da70f8"
            ]
        ]
    },
    {
        "id": "8b79840b.aff7e8",
        "type": "inject",
        "z": "3426577f90538292",
        "d": true,
        "name": "delete 1-5",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 94,
        "y": 760,
        "wires": [
            [
                "fee8b78d.068f98"
            ]
        ]
    },
    {
        "id": "fee8b78d.068f98",
        "type": "function",
        "z": "3426577f90538292",
        "d": true,
        "name": "delete Rows [2,4,6,8,10]",
        "func": "var id=flow.get(\"lastId\") || 0;\nif (id<10) {\n    node.error(\"use only if minimum of 10 Lines existing!\")\n    return;\n}\n\nid=Math.floor(id/2); //\nmsg.payload={\n    command:\"deleteRow\",\n    arguments: [[2,4,6,8,10]],\n    returnPromise: true\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 365,
        "y": 760,
        "wires": [
            [
                "b075d2ac.a69f3",
                "e34a75a3.9f0188"
            ]
        ],
        "info": "# deleteRow(row / [rows])\n\n`row=singleId`\n\nor\n\n`row=[array of IDs]` // seems there is a bug/issue in tabulator\n\ndelete a single the row with an id in the middle from 1 to lastId, hope it exists.\n\nWill fail on the second hit if you inject this two times because the id wad deleteted on the first"
    },
    {
        "id": "fe4ba122.df8fb",
        "type": "function",
        "z": "3426577f90538292",
        "name": "clearData",
        "func": "\nmsg.payload={\n    command:\"clearData\",\n    arguments: [],\n    returnPromise: true\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 315,
        "y": 930,
        "wires": [
            [
                "6e49e266.f72b6c",
                "b075d2ac.a69f3",
                "76c4495f.da70f8"
            ]
        ],
        "info": "# clear data\n\nunfortunately this command (currently) do not send a promise back! So we have to pass it directly to the table handler"
    },
    {
        "id": "82194704.7ab2d8",
        "type": "inject",
        "z": "3426577f90538292",
        "name": "clear",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 84,
        "y": 964,
        "wires": [
            [
                "fe4ba122.df8fb"
            ]
        ]
    },
    {
        "id": "df623146.8270a",
        "type": "comment",
        "z": "3426577f90538292",
        "name": "Erase all data by using clearData command",
        "info": "",
        "x": 187,
        "y": 879,
        "wires": []
    },
    {
        "id": "6e49e266.f72b6c",
        "type": "debug",
        "z": "3426577f90538292",
        "name": "clearData",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 315,
        "y": 981,
        "wires": []
    },
    {
        "id": "d404def3.39a63",
        "type": "inject",
        "z": "3426577f90538292",
        "name": "change",
        "props": [
            {
                "p": "payload",
                "v": "change",
                "vt": "str"
            },
            {
                "p": "topic",
                "v": "",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "change",
        "payloadType": "str",
        "x": 730,
        "y": 556,
        "wires": [
            [
                "76c4495f.da70f8"
            ]
        ]
    },
    {
        "id": "36be75f0.115c6a",
        "type": "ui_button",
        "z": "3426577f90538292",
        "name": "",
        "group": "c91332c0.50c11",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Init 20 rows",
        "tooltip": "init table by passing the hole table array (default way)",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "20",
        "payloadType": "num",
        "topic": "",
        "x": 104,
        "y": 114,
        "wires": [
            [
                "d4dce9b4.1f2588"
            ]
        ]
    },
    {
        "id": "b496aa6a.32f2d8",
        "type": "ui_button",
        "z": "3426577f90538292",
        "name": "",
        "group": "c91332c0.50c11",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "add one row @ top",
        "tooltip": "add a new row to the top",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "date",
        "topic": "",
        "x": 124,
        "y": 284,
        "wires": [
            [
                "eb577b4b.510388"
            ]
        ]
    },
    {
        "id": "79d05aaa.e2c7d4",
        "type": "ui_button",
        "z": "3426577f90538292",
        "name": "",
        "group": "c91332c0.50c11",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "add one row @ end",
        "tooltip": "add a new row at the end ",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "date",
        "topic": "",
        "x": 124,
        "y": 369,
        "wires": [
            [
                "760fde70.028f"
            ]
        ]
    },
    {
        "id": "d37bf3a8.373dd",
        "type": "ui_button",
        "z": "3426577f90538292",
        "name": "",
        "group": "c91332c0.50c11",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "addOrUpdate (add)",
        "tooltip": "add a new row by passing a new id",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "date",
        "topic": "",
        "x": 124,
        "y": 471,
        "wires": [
            [
                "8254f2d2.eeaa1"
            ]
        ]
    },
    {
        "id": "d31c2ac7.05bed8",
        "type": "ui_button",
        "z": "3426577f90538292",
        "name": "",
        "group": "c91332c0.50c11",
        "order": 5,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "addOrUpdate (update)",
        "tooltip": "update the row in the middle (or add if a row with that id not exists)",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "date",
        "topic": "",
        "x": 134,
        "y": 539,
        "wires": [
            [
                "deeff963.289f08"
            ]
        ]
    },
    {
        "id": "c637efb3.9c38c",
        "type": "ui_button",
        "z": "3426577f90538292",
        "name": "",
        "group": "c91332c0.50c11",
        "order": 6,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "delete (middle)",
        "tooltip": "delate the row with the id=maxId/2. Will result an error if not existing",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "date",
        "topic": "",
        "x": 114,
        "y": 692,
        "wires": [
            [
                "77b4d006.543ed"
            ]
        ]
    },
    {
        "id": "5531f2d0.fb913c",
        "type": "ui_button",
        "z": "3426577f90538292",
        "name": "",
        "group": "c91332c0.50c11",
        "order": 7,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "clear",
        "tooltip": "clear all table data",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "date",
        "topic": "",
        "x": 84,
        "y": 930,
        "wires": [
            [
                "fe4ba122.df8fb"
            ]
        ]
    },
    {
        "id": "858a6bc2.0384e8",
        "type": "ui_text",
        "z": "3426577f90538292",
        "group": "c91332c0.50c11",
        "order": 9,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "status",
        "format": "{{status.text}}",
        "layout": "col-center",
        "x": 900,
        "y": 726,
        "wires": []
    },
    {
        "id": "213d641a.12a53c",
        "type": "status",
        "z": "3426577f90538292",
        "name": "",
        "scope": [
            "76c4495f.da70f8"
        ],
        "x": 739,
        "y": 726,
        "wires": [
            [
                "858a6bc2.0384e8"
            ]
        ]
    },
    {
        "id": "e7d10007.d6e73",
        "type": "ui_button",
        "z": "3426577f90538292",
        "name": "",
        "group": "c91332c0.50c11",
        "order": 8,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "refresh (change)",
        "tooltip": "Same as ui-control sending a change message",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "change",
        "payloadType": "str",
        "topic": "",
        "x": 760,
        "y": 522,
        "wires": [
            [
                "76c4495f.da70f8"
            ]
        ]
    },
    {
        "id": "8386c3a7.41ead",
        "type": "inject",
        "z": "3426577f90538292",
        "name": "format table",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 104,
        "y": 1117,
        "wires": [
            [
                "8ae898e7.418068"
            ]
        ]
    },
    {
        "id": "f59e9830.e23608",
        "type": "comment",
        "z": "3426577f90538292",
        "name": "Format Table using ui_control",
        "info": "",
        "x": 137,
        "y": 1032,
        "wires": []
    },
    {
        "id": "19e88f0.0c32071",
        "type": "debug",
        "z": "3426577f90538292",
        "name": "clearData",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 315,
        "y": 1134,
        "wires": []
    },
    {
        "id": "ea064e3c.22437",
        "type": "ui_button",
        "z": "3426577f90538292",
        "name": "",
        "group": "c91332c0.50c11",
        "order": 7,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "format table",
        "tooltip": "Formats the table using msg.ui_control",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "date",
        "topic": "",
        "x": 104,
        "y": 1083,
        "wires": [
            [
                "8ae898e7.418068"
            ]
        ]
    },
    {
        "id": "8ae898e7.418068",
        "type": "change",
        "z": "3426577f90538292",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "ui_control",
                "pt": "msg",
                "to": "{\"customHeight\":18,\"tabulator\":{\"layout\":\"fitColumns\",\"movableColumns\":false,\"index\":\"id\",\"columns\":[{\"title\":\"ID\",\"field\":\"id\",\"formatter\":\"text\",\"headerTooltip\":\"id number act as row index\"},{\"formatterParams\":{\"outputFormat\":\"HH:mm:ss.SSS\",\"inputFormat\":\"x\",\"invalidPlaceholder\":\"(unknown)\"},\"title\":\"Timestamp\",\"field\":\"timestamp\",\"formatter\":\"datetime\",\"headerTooltip\":\"timestamp of last change\"},{\"title\":\"Text\",\"field\":\"text\",\"headerTooltip\":\"last cause of reboot (provided by http json request)\"}]}}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 345,
        "y": 1083,
        "wires": [
            [
                "19e88f0.0c32071",
                "b075d2ac.a69f3",
                "6bd61b7.a6a56e4"
            ]
        ]
    },
    {
        "id": "6bd61b7.a6a56e4",
        "type": "change",
        "z": "3426577f90538292",
        "name": "change",
        "rules": [
            {
                "t": "delete",
                "p": "ui_control",
                "pt": "msg"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "change",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 553,
        "y": 1083,
        "wires": [
            [
                "76c4495f.da70f8"
            ]
        ]
    }
]