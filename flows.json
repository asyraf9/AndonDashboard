[
    {
        "id": "562197b4f4a67922",
        "type": "tab",
        "label": "Prodn Dashboard Flow",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "327571d15da5aceb",
        "type": "tab",
        "label": "Calling System Flow",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "b7a483d0be44dbdd",
        "type": "tab",
        "label": "Telegram Messaging Flow",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "1694d57381b3dfec",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "2924702c.b33a7",
        "type": "subflow",
        "name": "ui-table handler",
        "info": "# ui-table handler\nUniversal handler for ui-table.\n## features\n- buffer table data\n- add or update individual rows or cells of the table\n- delete rows\n- clear tableData\n- handle column width\n- handle column order\n- hide und unhide columns\n- hide and unhide rows\n- records row order\n- support for nested columns [(column groups)](http://tabulator.info/examples/4.7#column-groups)\n- support for child rows (_children) [(nested data trees)](http://tabulator.info/examples/4.7#tree)\n\nFor real life example see:\n\n**syslog server** for logfile like table with filters\n\n**remote device table** for dynamically updated table with context menues\n\n**irrigation system** for sortable rows\n\n## sending data to ui-tabel\n\n- sending an `array` as discribed in ui-table will replace the complete table and delete all table edits\n  \n  if `msg.keepEdits=true` is added the existing edits will be kept.\n- send an `object` containing the updated properties of a table row by sending msg.<tableDataProp>.\n\n  The table is updated using the `updateOrAddData` command. You can alter the command used by adding the `msg.tabulatorCommand` and `msg.tabulatorParameter`\n\n```\nmsg.tabulatorCommand=\"addData\";\nmsg.tabulatorParameter=[true];\n```\n## configuration\n- `tabulator` json formatted object containing configuration of the table. See ui-table for more details.\n- `property` property of the msg object that contains the data to be passed to ui-table. I.e. *state* `msg.state`\n- `index` index column to identify individual rows. Each message containing data must have a unique `msg.topic` to identify the row. Messages without this `msg.topic` will be droped. It is not nessesary but possible to display the index column in the table. Do not enable editing on this column otherwise you will loose the connection and another row will be added to the table as soon as a new message arrives!\n\n   Defaults to *$topic* `msg.state.$topic`\n- `maxRows`maximum number of rows held by table widget. If grater than **0** the amount of rows in ui-table is limited. For this to work the index row must be a Number. ´rows < currentID-maxRows´ will be deleted.\n- `maxStore`maximum number of rows stored by this node for replay if a client connects. If grater than **0** the amount of rows in flow context is limited. for this to work the index row must be a Number. ´rows < currentID-maxStore´ will be deleted.\n- `dashboard` name of the dashboard tab to only update the table if the dashboard is visible. If empty the table will be updated on every tab change and connect.\n- `context` configuration of context data. The subflow will save or cache data in the flows context using `$parent.`. \n   **tableData** caches the incoming data to restore it on `ui-control´ *change* messages.\n   **tableConfig** saves column width and order to save the interactive table layot\n   **tableEdit** saves edits on the table data otherwise it would be overwritten when new data arrives\n```json\n{\n    \"tableData\": {\n        \"name\": \"tableData\"\n    },\n    \"tableConfig\": {\n        \"name\": \"tableConfig\",\n        \"storage\": \"file\"\n    },\n    \"tableEdit\": {\n        \"name\": \"tableEdit\",\n        \"storage\": \"file\"\n    }\n}\n```\n\n## commands\ncommands can be passed by sending a object as `msg.payload`\n\n```json\n{\n    \"command\": \"delete\",\n    \"object\": \"columnOrder\"\n}\n```\n\n- `deleteTable` tableCache\n- `deleteRow` delete single row. `object` matching index property\n- `ignoreRow` delete single row and put it on an ignore list. `object` matching index property\n- `unIgnoreRow`remove row from the ignore list.  `object` matching index property\n- `unIgnoreRows`delte the ignore list. \n- `deleteRowOrder` delete custom row order\n- `deleteColumnOrder` delete custom column order\n  This is important if you add or delete columns in the tabulator config otherwise the columns most likely don`t show up\n- `deleteColumnWidth` delete custom column width\n- `columnHide` hide a column. `object` matching column field\n- `columnUnHide` unhide a column. `object` matching column field\n- `columnsUnHide` unhide all hidden columns.\n- `setMaxStore` set maximum amount of rows in cache\n- `setMaxDisplay` set maximum amout of rows in ui-table\n- `getTable` get table data (as displayed) as an array (on 2nd output)\n \n## background\nui-table warps the powerfull tabluator library.  This subflow makes it easier to unleash the powerfull features of ui-table",
        "category": "dashboard",
        "in": [
            {
                "x": 54,
                "y": 85,
                "wires": [
                    {
                        "id": "5eb0bd6b.74b794"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 360,
                "y": 85,
                "wires": [
                    {
                        "id": "5eb0bd6b.74b794",
                        "port": 1
                    }
                ]
            },
            {
                "x": 360,
                "y": 136,
                "wires": [
                    {
                        "id": "5eb0bd6b.74b794",
                        "port": 2
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "tabulator",
                "type": "json",
                "value": "{\"tabulator\":{\"responsiveLayout\":\"collapse\",\"responsiveLayoutCollapseStartOpen\":false,\"index\":\"$name\",\"layout\":\"fitColumns\",\"movableColumns\":true,\"groupBy\":\"\",\"columnResized\":\"function(column){     var newColumn = {         field: column._column.field,         visible: column._column.visible,         width: column._column.width,         widthFixed: column._column.widthFixed,         widthStyled: column._column.widthStyled     }; this.send({topic:this.config.topic,ui_control:{callback:'columnResized',columnWidths:newColumn}}); }\",\"columnMoved\":\"function(column, columns){     var newColumns=[];     columns.forEach(function (column) {         newColumns.push({'field': column._column.definition.field, 'title': column._column.definition.title});     });     this.send({topic:this.config.topic,ui_control:{callback:'columnMoved',columns:newColumns}}); }\",\"rowFormatter\":\"function(row){     var data = row.getData();     switch (data.$state) {         case \\\"lost\\\":             row.getElement().style.backgroundColor = \\\"#9e2e66\\\";             row.getElement().style.color = \\\"#a6a6a6\\\";             break;         case \\\"sleeping\\\":             row.getElement().style.backgroundColor = \\\"#336699\\\";             break;         case \\\"disconnected\\\":             row.getElement().style.backgroundColor = \\\"#cc3300\\\";             row.getElement().style.color = \\\"#a6a6a6\\\";             break;         case \\\"alert\\\":             row.getElement().style.backgroundColor = \\\"#A6A6DF\\\";             break;         case \\\"init\\\":             row.getElement().style.backgroundColor = \\\"#f2f20d\\\";             break;         case \\\"ready\\\":             row.getElement().style.backgroundColor = \\\"\\\";             row.getElement().style.color = \\\"\\\";             break;         } }\",\"columns\":[{\"formatter\":\"responsiveCollapse\",\"width\":30,\"minWidth\":30,\"align\":\"center\",\"resizable\":false,\"headerSort\":false,\"frozen\":true,\"title\":\"expand\",\"field\":\"expand\",\"headerVertical\":\"flip\"},{\"formatter\":\"function(cell, formatterParams, onRendered) {      var html = cell.getValue(); return html;  }\",\"title\":\"State\",\"field\":\"$stateIcon\",\"width\":100,\"frozen\":true,\"headerVertical\":\"flip\"},{\"formatter\":\"function(cell, formatterParams, onRendered) {     var html = cell.getValue(); return html;  }\",\"title\":\"Signal\",\"field\":\"signalIcon\",\"width\":100,\"frozen\":true,\"headerVertical\":\"flip\"},{\"title\":\"Name\",\"field\":\"$name\",\"width\":100,\"frozen\":true,\"headerVertical\":\"flip\"},{\"title\":\"State\",\"field\":\"$state\",\"width\":100,\"align\":\"center\",\"headerVertical\":\"flip\"},{\"title\":\"last-ready\",\"field\":\"lastSeenreadyFormatted\",\"width\":100,\"align\":\"left\",\"headerVertical\":\"flip\"},{\"title\":\"Homie\",\"field\":\"$homie\",\"width\":100,\"align\":\"left\",\"headerVertical\":\"flip\"},{\"title\":\"Platform\",\"field\":\"$implementation\",\"width\":100,\"align\":\"left\",\"headerVertical\":\"flip\"},{\"title\":\"Statistics\",\"columns\":[{\"title\":\"Interval\",\"field\":\"interval\",\"width\":100,\"headerVertical\":\"flip\"},{\"formatterParams\":{\"outputFormat\":\"d hh:mm:ss\",\"inputFormat\":\"seconds\",\"invalidPlaceholder\":\"(unknown)\"},\"title\":\"Uptime\",\"field\":\"uptime\",\"formatter\":\"function(cell, formatterParams, onRendered){     var pad = function (num) {         return (\\\"0\\\"+num).slice(-2);     };     var secs = Number(cell.getValue());     if (Number.isNaN(secs)) return;     var minutes = Math.floor(secs / 60);     secs = secs%60;     var hours = Math.floor(minutes/60);     minutes = minutes%60;     var days = Math.floor(hours/24);     hours = hours%24;     if (days>0)         return days+\\\"d \\\"+pad(hours)+\\\":\\\"+pad(minutes);     else         return pad(hours)+\\\":\\\"+pad(minutes)+\\\":\\\"+pad(secs); }\",\"width\":100,\"headerVertical\":\"flip\"},{\"formatterParams\":{\"min\":0,\"max\":100,\"color\":[\"red\",\"orange\",\"green\"],\"legend\":\"function (value) {if (value>0) return \\\"<span style='color:#FFFFFF;'>\\\"+value+\\\" %</span>\\\"; else return; }\",\"legendColor\":\"#FFFFFF\",\"legendAlign\":\"center\"},\"title\":\"Signal\",\"field\":\"signal\",\"formatter\":\"progress\",\"width\":100,\"headerVertical\":\"flip\"},{\"formatterParams\":{\"min\":2.5,\"max\":3.5,\"color\":[\"red\",\"green\",\"red\"],\"legend\":\"function (value) { if (value>0) return \\\"<span style='color:#FFFFFF;'>\\\"+value+\\\" V</span>\\\"; else return; }\",\"legendColor\":\"#101010\",\"legendAlign\":\"center\"},\"title\":\"Supply\",\"field\":\"supply\",\"formatter\":\"progress\",\"width\":100,\"headerVertical\":\"flip\"},{\"formatterParams\":{\"min\":0,\"max\":100,\"color\":[\"red\",\"orange\",\"green\"],\"legend\":\"function (value) {     if (value>0)         return \\\"<span style='color:#FFFFFF;'>\\\"+value+\\\" %</span>\\\";     else         return; }\",\"legendColor\":\"#101010\",\"legendAlign\":\"center\"},\"title\":\"Battery\",\"field\":\"battery\",\"formatter\":\"progress\",\"width\":100,\"headerVertical\":\"flip\"},{\"formatterParams\":{\"min\":0,\"max\":100000,\"color\":[\"red\",\"orange\",\"green\"],\"legend\":\"function (value) { if (value>0) return \\\"<span style='color:#FFFFFF;'>\\\"+(value/1024).toFixed(2)+\\\" kB</span>\\\"; else return; }\",\"legendColor\":\"#101010\",\"legendAlign\":\"center\"},\"title\":\"Memory\",\"field\":\"freeheap\",\"formatter\":\"progress\",\"width\":100,\"headerVertical\":\"flip\"},{\"formatterParams\":{\"target\":\"_blank\",\"min\":0,\"max\":100,\"color\":[\"red\",\"orange\",\"green\"],\"legend\":\"function (value) {     if (value>0)         return \\\"<span style='color:#FFFFFF;'>\\\"+value+\\\" %</span>\\\";     else         return; }\",\"legendColor\":\"#101010\",\"legendAlign\":\"center\"},\"title\":\"CPU load\",\"field\":\"cpuload\",\"formatter\":\"progress\",\"width\":100,\"headerVertical\":\"flip\"},{\"formatterParams\":{\"min\":20,\"max\":60,\"color\":[\"green\",\"orange\",\"red\"],\"legend\":\"function (value) { if (value>0) return \\\"<span style='color:#FFFFFF;'>\\\"+value+\\\" °C</span>\\\"; else return; }\",\"legendColor\":\"#101010\",\"legendAlign\":\"center\"},\"title\":\"CPU temp\",\"field\":\"cputemp\",\"formatter\":\"progress\",\"width\":100,\"headerVertical\":\"flip\"}]},{\"title\":\"Firmware\",\"columns\":[{\"formatter\":\"link\",\"formatterParams\":{\"labelField\":\"$localip\",\"urlPrefix\":\"http://\",\"target\":\"_blank\"},\"title\":\"IP\",\"field\":\"$localip\",\"width\":100},{\"title\":\"mac\",\"field\":\"$mac\",\"width\":100},{\"title\":\"Accsess Point\",\"field\":\"SSID\",\"width\":100},{\"title\":\"Firmware\",\"field\":\"name\",\"width\":100},{\"title\":\"Version\",\"field\":\"version\",\"width\":100},{\"title\":\"Last Boot Cause\",\"field\":\"lastBootCause\",\"width\":100},{\"title\":\"Reset Reason\",\"field\":\"resetReason\",\"width\":100}]}]},\"customHeight\":12}",
                "ui": {
                    "icon": "font-awesome/fa-table",
                    "label": {
                        "en-US": "Tabulator"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "json",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "tableDataProp",
                "type": "str",
                "value": "row",
                "ui": {
                    "icon": "font-awesome/fa-tag",
                    "label": {
                        "en-US": "rowProperty"
                    }
                }
            },
            {
                "name": "tableIndex",
                "type": "str",
                "value": "$topic",
                "ui": {
                    "icon": "font-awesome/fa-indent",
                    "label": {
                        "en-US": "Index"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "json",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "maxRows",
                "type": "num",
                "value": "0",
                "ui": {
                    "icon": "font-awesome/fa-list-ol",
                    "type": "input",
                    "opts": {
                        "types": [
                            "num",
                            "bool",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "maxStore",
                "type": "num",
                "value": "0",
                "ui": {
                    "icon": "font-awesome/fa-database",
                    "type": "input",
                    "opts": {
                        "types": [
                            "num",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "dashboard",
                "type": "str",
                "value": "Remote Device Table",
                "ui": {
                    "icon": "font-awesome/fa-dashboard",
                    "label": {
                        "en-US": "Dashboard"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "tableContext",
                "type": "json",
                "value": "{\"tableData\":{\"name\":\"tableData\"},\"tableConfig\":{\"name\":\"tableConfig\",\"storage\":\"file\"},\"tableEdit\":{\"name\":\"tableEdit\",\"storage\":\"file\"}}",
                "ui": {
                    "icon": "font-awesome/fa-database",
                    "label": {
                        "en-US": "Context"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "json",
                            "env"
                        ]
                    }
                }
            }
        ],
        "color": "#3FADB5",
        "icon": "node-red-dashboard/ui_slider.png",
        "status": {
            "x": 360,
            "y": 34,
            "wires": [
                {
                    "id": "5eb0bd6b.74b794",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "5958c5854f8ba7cd",
        "type": "subflow",
        "name": "Route & Process MQTT",
        "info": "Used for routing MQTT messages to the relevant database and table updates. \nAlso updates msg.caller with a 'type' property to be displayed on dashboards.\n\nThis is for multiple display handling within the call system\nfor example if you have the following displays within a system:\n 1.   1 dashboard for calling of SV, QC, Maintenance etc\n 2.   1 dashboard for displaying finished goods pickup queue\n 3.   1 dashboard for displaying child part supply queue\n  \nFor each of these displays create one of these nodes and specify the `Message Type` it needs to react to. This needs to be specified in comma separated string of message values. If the value of said message is present within the mqtt msg.payload, then the router will pass on msg to the next node. otherwise, msg stops here. for example: \n\n 1. \"SV,QC,FM\" for calling dashboard\n 2. \"FG\" for finished goods dashboard\n 3. \"CP\" for child parts supply dashboard\n\n",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "ca29863c4aa8e8c4"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 600,
                "y": 80,
                "wires": [
                    {
                        "id": "da8bd97b81da3575",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "Function Topic",
                "type": "str",
                "value": "call",
                "ui": {
                    "icon": "font-awesome/fa-file-text",
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            },
            {
                "name": "Message Types",
                "type": "str",
                "value": "SV,QC,FM",
                "ui": {
                    "icon": "font-awesome/fa-comment",
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            },
            {
                "name": "List",
                "type": "bool",
                "value": "true",
                "ui": {
                    "icon": "font-awesome/fa-list-ul",
                    "label": {
                        "en-US": "List? (false = Queue)"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "bool"
                        ]
                    }
                }
            }
        ],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "02bee84c2c61bcc8",
        "type": "subflow",
        "name": "Update List",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "788fac08512fd696"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 320,
                "y": 80,
                "wires": [
                    {
                        "id": "788fac08512fd696",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "List Name",
                "type": "str",
                "value": "callList"
            }
        ],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "842e4db7b876be11",
        "type": "subflow",
        "name": "Update Queue",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "7bd4bb2e3900da1c"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 340,
                "y": 80,
                "wires": [
                    {
                        "id": "7bd4bb2e3900da1c",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "Queue Name",
                "type": "str",
                "value": "",
                "ui": {
                    "icon": "font-awesome/fa-list-ol",
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            }
        ],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "d2bd110790f6ae19",
        "type": "ui_base",
        "theme": {
            "name": "theme-dark",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0075a3",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#b01c1c",
                "baseFont": "Arial Black,Arial Black,Gadget,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "reset": false
            },
            "themeState": {
                "base-color": {
                    "default": "#097479",
                    "value": "#b01c1c",
                    "edited": true
                },
                "page-titlebar-backgroundColor": {
                    "value": "#b01c1c",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#111111",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#df3939",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#555555",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#eeeeee",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#b01c1c",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": false
                },
                "base-font": {
                    "value": "Arial Black,Arial Black,Gadget,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "true",
            "allowSwipe": "false",
            "lockMenu": "icon",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 10,
                "gy": 10,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "85b12cf0fa38d858",
        "type": "ui_group",
        "name": "Production Output",
        "tab": "d5e27fdb153bf0a3",
        "order": 2,
        "disp": false,
        "width": "26",
        "collapse": false,
        "className": ""
    },
    {
        "id": "d5e27fdb153bf0a3",
        "type": "ui_tab",
        "name": "Data",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "56edfd93d9c67181",
        "type": "mqtt-broker",
        "name": "",
        "broker": "8a8b53b135b04c51bbc202862a1eddc9.s2.eu.hivemq.cloud",
        "port": "8883",
        "tls": "",
        "clientid": "asyraf9-nodered",
        "autoConnect": true,
        "usetls": true,
        "protocolVersion": "5",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "AKSB/SA/CONNECTION",
        "birthQos": "0",
        "birthPayload": "Node Red Line F Connected",
        "birthMsg": {},
        "closeTopic": "AKSB/SA/CONNECTION",
        "closeQos": "0",
        "closePayload": "Node Red Line F Disconnecting",
        "closeMsg": {},
        "willTopic": "AKSB/SA/CONNECTION",
        "willQos": "0",
        "willPayload": "Node Red Line F Disconnected",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": "0"
    },
    {
        "id": "7f97a1b59fccc5ce",
        "type": "ui_tab",
        "name": "Alert",
        "icon": "dashboard",
        "order": 5,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "ea1829c43a6e8ad0",
        "type": "telegram bot",
        "botname": "Autokeen Official Bot",
        "usernames": "",
        "chatids": "",
        "baseapiurl": "",
        "updatemode": "none",
        "pollinterval": "1000",
        "usesocks": false,
        "sockshost": "",
        "socksprotocol": "socks5",
        "socksport": "6667",
        "socksusername": "anonymous",
        "sockspassword": "",
        "bothost": "",
        "botpath": "",
        "localbotport": "8443",
        "publicbotport": "8443",
        "privatekey": "",
        "certificate": "",
        "useselfsignedcertificate": false,
        "sslterminated": false,
        "verboselogging": true
    },
    {
        "id": "02f09ba258bf6625",
        "type": "ui_group",
        "name": "Call Queue",
        "tab": "7f97a1b59fccc5ce",
        "order": 2,
        "disp": true,
        "width": 20,
        "collapse": false,
        "className": ""
    },
    {
        "id": "db830ddbd85f76c5",
        "type": "ui_tab",
        "name": "FG Queue",
        "icon": "dashboard",
        "order": 3,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "569dc256923818f6",
        "type": "ui_group",
        "name": "FG Queue",
        "tab": "db830ddbd85f76c5",
        "order": 1,
        "disp": true,
        "width": 25,
        "collapse": false,
        "className": ""
    },
    {
        "id": "145f52da01ded04e",
        "type": "ui_tab",
        "name": "Kowake",
        "icon": "dashboard",
        "order": 4,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "e5276d6b5a48a00a",
        "type": "ui_group",
        "name": "Kowake Queue",
        "tab": "145f52da01ded04e",
        "order": 1,
        "disp": true,
        "width": 25,
        "collapse": false,
        "className": ""
    },
    {
        "id": "5eb0bd6b.74b794",
        "type": "function",
        "z": "2924702c.b33a7",
        "name": "handle tableData",
        "func": "var status = {fill:\"red\",shape:\"dot\",text: \"payload \"};\nvar tableIndex = env.get(\"tableIndex\") || \"$topic\";\nvar tableDataProp = env.get(\"tableDataProp\") || \"row\";\nvar tableContext = env.get(\"tableContext\");\nvar dashboard = env.get(\"dashboard\");\nvar maxRows = env.get(\"maxRows\") || 0;\nvar maxStore = env.get(\"maxStore\") || 0;\n\nif (!tableContext.hasOwnProperty(\"tableData\") || !tableContext.hasOwnProperty(\"tableConfig\")) {\n    status.text=\"tableContext not defined\";\n    node.error(status.text);\n    return [{payload:status},null];\n}\n\n// context store to cache table data (memoryOnly prefered)\nvar tableData = flow.get(\"$parent.\"+tableContext.tableData.name,tableContext.tableData.storage);\nif (tableData===undefined) {\n    node.warn(\"[ui-table handler] tableData initialized!\");\n    tableData={};\n    flow.set(\"$parent.\"+tableContext.tableData.name,tableData,tableContext.tableData.storage);\n}\n\n// context Store to save table configuration (file)\nvar tableConfig = flow.get(\"$parent.\"+tableContext.tableConfig.name,tableContext.tableConfig.storage);\nif (tableConfig===undefined) {\n    node.warn(\"[ui-table handler] tableConfig initialized!\");\n    tableConfig={ResponsiveLayout:true};\n    flow.set(\"$parent.\"+tableContext.tableConfig.name,tableConfig,tableContext.tableConfig.storage);\n}\n\nif (tableConfig.hasOwnProperty(\"maxStore\")) maxStore=tableConfig.maxStore;\nif (tableConfig.hasOwnProperty(\"maxRows\")) maxRows=tableConfig.maxRows;\n\n// context Store to save table configuration (file)\nvar tableEdit;\nif (tableContext.hasOwnProperty(\"tableEdit\")) {\n    tableEdit = flow.get(\"$parent.\"+tableContext.tableEdit.name,tableContext.tableEdit.storage);\n    if (tableEdit===undefined) {\n        node.warn(\"[ui-table handler] tableEdit initialized!\");\n        tableEdit={};\n        flow.set(\"$parent.\"+tableContext.tableEdit.name,tableEdit,tableContext.tableEdit.storage);\n    }\n}\n\n// function to merge partial data into existing table row\nvar mergeObject = function (destination, source, filter) {\n    for (let currentSource in source) {\n        if (source.hasOwnProperty(currentSource)) {\n            if (filter!==undefined && tableEdit && tableEdit.hasOwnProperty(filter) && tableEdit[filter].hasOwnProperty(currentSource)) {\n                destination[currentSource]= tableEdit[filter][currentSource];\n                source[currentSource]=tableEdit[filter][currentSource];\n            } else {\n                destination[currentSource]= source[currentSource];\n            }\n        }    \n    }\n    return source;\n};\n\n// merge edits into a destination object respecting _children\nvar mergeEdits = function(destination) {\n    \n    var mergeChildEdits = function(children) {\n        children.forEach(child => {\n            if (child.hasOwnProperty(tableIndex) && tableEdit.hasOwnProperty(child[tableIndex])) {\n//                node.warn([\"mergeChild\",child])\n                Object.keys(tableEdit[child[tableIndex]]).forEach(edit => {\n                    if (child.hasOwnProperty(edit)) {\n                        child[edit]=tableEdit[child[tableIndex]][edit];\n//                        node.warn([\"mergeChild edit \",edit,child[edit]])\n                    }\n                });\n            }\n            if (child.hasOwnProperty(\"_children\")) {\n                mergeChildEdits(child._children);\n            }\n        })\n    }\n    \n\n    Object.keys(destination).forEach(row => {\n        if (destination[row].hasOwnProperty(tableIndex)) {\n            if (tableEdit.hasOwnProperty(row)) {\n                Object.keys(tableEdit[row]).forEach(edit => {\n                    destination[row][edit]=tableEdit[row][edit];\n                });\n            }\n            if (destination[row].hasOwnProperty(\"_children\")) {\n                mergeChildEdits(destination[row]._children);\n            }\n       }\n    });\n}\n\n// deep search for a column including nested columns\nvar searchTabulatorColumn = function (columns,key,match) {\n    var result;\n    for (let column of columns) {\n        if (column.hasOwnProperty(\"columns\")) {\n            result = searchTabulatorColumn(column.columns,key,match);\n            if (result!==undefined) return result;\n        } else if (column.hasOwnProperty(key) && column[key]===match) {\n            return column;\n        }\n    }\n};\n\n// command message to update add or update data on ui-table\nvar msgToTable={};\nmsgToTable.payload={\n    \"command\":msg.tabulatorCommand || \"updateOrAddData\",\n    \"arguments\": [],\n    \"returnPromise\": false\n};\n\n// store data in tableData\nif (msg.hasOwnProperty(tableDataProp)) {\n    // store data for later recover\n    if (!msg.hasOwnProperty(\"topic\")) { // check if index existst\n        status.text=\"msg.topic not defined!\";\n        return [{payload:status},null];\n    }\n    if (!tableData.hasOwnProperty(msg.topic)){ // first seen\n        if (maxRows>0 && Object.keys(tableData).lenght===0) {\n            tableConfig.currentFirstRow=msg.topic;\n        }\n        tableData[msg.topic]={};\n        if (tableEdit && tableEdit.hasOwnProperty(msg.topic)) { // table edits available!\n            Object.keys(tableEdit[msg.topic]).forEach((key) => {\n                msg[tableDataProp][key]=tableEdit[msg.topic][key];\n                tableData[msg.topic][key]=tableEdit[msg.topic][key];\n            })\n        }\n        if (maxStore>0 && typeof msg.topic === \"number\") { // limit rows in tableData\n            let rowKeys = Object.keys(tableData);\n            if (rowKeys.length>maxStore) {\n                for (let i=0; i<(rowKeys.length-maxStore); i++) {\n                    delete tableData[rowKeys[i]];\n                }\n            }\n        }\n    }\n    if (!tableData[msg.topic].hasOwnProperty(tableIndex)) tableData[msg.topic][tableIndex]=msg.topic;\n    msg[tableDataProp]=mergeObject(tableData[msg.topic],msg[tableDataProp],msg.topic);\n    msg[tableDataProp][tableIndex]=msg.topic;\n    msgToTable.payload.arguments=[[msg[tableDataProp]]];\n    // add aditional parameters\n    if (msg.hasOwnProperty(\"tabulatorParameter\") && Array.isArray(msg.tabulatorParameter)) {\n        for (let arg in msg.tabulatorParameter) msgToTable.payload.arguments.push(arg);\n    }\n    // delete rows if rows exceed maxRows\n    /*\n    if (maxRows>0 && tableConfig.hasOwnProperty(\"currentFirstRow\") && typeof tableData[msg.topic][tableIndex]===\"number\") {\n        //node.warn([maxRows,tableConfig.hasOwnProperty(\"currentFirstRow\"),typeof tableData[msg.topic][tableIndex],tableConfig.currentFirstRow,tableData[msg.topic][tableIndex]-maxRows])\n        if (tableConfig.currentFirstRow<tableData[msg.topic][tableIndex]-maxRows) {\n            node.warn([\"maxRowExeeded\",tableConfig.currentFirstRow]);\n            node.send([null,{payload:{\"command\":\"deleteRow\",\"arguments\": [tableConfig.currentFirstRow],\"returnPromise\": false}},null]);\n            tableConfig.currentFirstRow++;\n        }\n    }*/\n    if (maxRows>0 && typeof tableData[msg.topic][tableIndex]===\"number\" && msg.topic-maxRows>0) {\n        node.send([null,{payload:{\"command\":\"deleteRow\",\"arguments\": [msg.topic-maxRows],\"returnPromise\": false}},null]);\n    }\n    status.fill=\"green\";\n    status.text=msg.topic+\" updated\";\n    return [{payload:status},msgToTable,null];\n} if (msg.payload===\"connect\" || (msg.payload===\"change\" && msg.name===dashboard) || (msg.hasOwnProperty(\"payload\") && msg.payload.hasOwnProperty(\"command\"))) { \n    if (!msg.hasOwnProperty(\"ui_control\")) {\n        msg.ui_control = env.get('tabulator');\n        status.text+=\" ui_control added\";\n    }\n    //process commands\n    //node.warn({\"command\":msg.payload.command,\"msg\":msg,\"object\":msg.payload.object})\n    if (msg.payload.hasOwnProperty(\"command\") && msg.payload.command!=='getTable') {\n        status.fill=\"blue\";\n        switch(msg.payload.command) {\n            case 'deleteTable':\n                flow.set(\"$parent.\"+tableContext.tableData.name,undefined,tableContext.tableData.storage);\n                tableData={};\n                status.text=\"tabledata deleted\";\n                node.warn(\"[ui-table handler] \"+\"tabledata deleted\");\n                break;\n            case 'deleteRow':\n            case 'deleteDevice':\n                var deleteRow = function(id) {\n                    // check if row is in root\n                    if (tableData.hasOwnProperty(id)) {\n                        delete tableData[id]\n                        return true;\n                    }\n                    // check if row is a child\n                    let deleteChildRow = function(children, id) {\n                        for(let i = 0; i < children.length; i++){\n                            if (children[i].hasOwnProperty(tableIndex) && children[i][tableIndex]===id) {\n                                children.splice(i, 1); \n                                return true; \n                            }\n                            if (children[i].hasOwnProperty(\"_children\")) {\n                                if (deleteChildRow(children[i]._children,id)) {\n                                    if (children[i]._children.length === 0) {\n                                        delete children[i]._children;\n                                    }\n                                    return true;\n                                }\n                            }\n                        }\n                        return false;\n                    };\n                    \n                    for (let row in tableData) {\n                        if (tableData[row].hasOwnProperty(\"_children\")) {\n                            if (deleteChildRow(tableData[row]._children,id)) return true;\n                        }\n                    }\n                    return false;\n                }\n                \n                if (deleteRow(msg.payload.object)) {\n                    status.text=msg.payload.object+\" deleted\";\n                } else {\n                    status.fill=\"yellow\";\n                    status.text=msg.payload.object+\" undefined\";\n                }\n                break;\n            case 'ignoreRow':\n            case 'ignoreDevice':\n                if (tableData.hasOwnProperty(msg.payload.object)) {\n                    delete tableData[msg.payload.object];\n                    status.text=msg.payload.object+\" will be ignored\";\n                    if (!tableConfig.hasOwnProperty('ignoreDevice')) tableConfig.ignoreDevice={};\n                    tableConfig.ignoreDevice[msg.payload.object]=true;\n                }\n                break;\n            case 'unIgnoreRow':\n            case 'unIgnoreDevice':\n                if (tableConfig.hasOwnProperty('ignoreDevice')) {\n                    delete tableConfig.ignoreDevice[msg.payload.object];\n                }\n                break;\n            case 'unIgnoreRows':\n            case 'unIgnoreDevices':\n                delete tableConfig.ignoreDevice;\n                break;\n            case 'updateData':\n                status.text=\"column \"+msg.payload.column+\" updated\";\n                delete msg.ui_control;\n                return [{payload:status},msg];\n            case 'updateTable':\n                status.text=msg.payload.command+\": \";\n                break;\n            case 'columnHide':\n                if (!tableConfig.hasOwnProperty('columnVisible')) tableConfig.columnVisible={};\n                tableConfig.columnVisible[msg.payload.object]=false;\n                break;\n            case 'columnUnHide':\n                if (!tableConfig.hasOwnProperty('columnVisible')) tableConfig.columnVisible={};\n                tableConfig.columnVisible[msg.payload.object]=true;\n                break;\n            case 'columnsUnHide':\n                for (let column in tableConfig.columnVisible) {\n                    if (tableConfig.columnVisible.hasOwnProperty(column)) tableConfig.columnVisible[column]=true;\n                }\n                break;\n            case 'refreshTable':\n                break;\n            case 'deleteColumnOrder':\n            case 'restoreColumnOrder':\n                delete tableConfig.columns;\n                break;\n            case 'deleteColumnWidth':\n            case 'resetColumnWidth':\n                delete tableConfig.columnWidths;\n                break;\n            case 'setResponsiveLayout':\n                tableConfig.ResponsiveLayout=!tableConfig.ResponsiveLayout;\n                break;\n            case 'deleteRowOrder':\n                delete tableConfig.rowOrder;\n                break;\n            case 'setMaxStore':\n                tableConfig.maxStore=msg.payload.object;\n                maxStore=msg.payload.object;\n                break;\n            case 'setMaxRows':\n                tableConfig.maxRows=msg.payload.object;\n                maxRows=msg.payload.object;\n                break;\n            default:\n                status.fill=\"red\";\n                status.text=\"unknown command \"+msg.payload.command;\n                node.warn(\"[ui-table handler] \"+status.text);\n                break;\n        }\n        flow.set(\"$parent.\"+tableContext.tableConfig.name,tableConfig,tableContext.tableConfig.storage);\n        node.send([{payload:status},null,null]);\n    }\n\n    // crawl through tabulator arrays and updated user defined values\n    var crawlTabulator = function (columns,match,config,property) {\n        for (let column of columns) {\n            if (column.hasOwnProperty(\"columns\")) {\n                crawlTabulator(column.columns,match,config,property);\n            } else if (config.hasOwnProperty(column[match])) column[property]=config[column.field];\n        }\n    };\n    \n    // restore custom column width\n    if (tableConfig.hasOwnProperty(\"columnWidths\") && msg.hasOwnProperty(\"ui_control\")) {\n        crawlTabulator(msg.ui_control.tabulator.columns,\"field\",tableConfig.columnWidths,\"width\");\n    }\n    \n    // restore custom column hide/show\n    if (tableConfig.hasOwnProperty(\"columnVisible\") && msg.hasOwnProperty(\"ui_control\")) {\n        crawlTabulator(msg.ui_control.tabulator.columns,\"field\",tableConfig.columnVisible,\"visible\");\n    }\n    \n    // restore custom responsive / standard view\n    if (tableConfig.hasOwnProperty(\"ResponsiveLayout\")) {\n        if (!tableConfig.ResponsiveLayout) {\n            msg.ui_control.tabulator.responsiveLayout=false;\n        }\n        msg.ui_control.tabulator.columns.forEach((column,index) => {\n            if (column.formatter===\"responsiveCollapse\") { // hide expand column on any position\n                column.visible=tableConfig.ResponsiveLayout;\n                return;\n            }\n        });\n    }\n\n    // sort columns\n    if (tableConfig.hasOwnProperty(\"columns\") && msg.hasOwnProperty(\"ui_control\") && msg.ui_control.hasOwnProperty(\"tabulator\")) {\n        var addedColumns = 0;\n        var sortColumnsByLayout = function (sortColumns, columnsLayout, targetColumns) {\n            for (var layoutColumn=0;  layoutColumn<columnsLayout.length; layoutColumn++) {\n                for (var sortColumn in sortColumns) {\n                    if (sortColumns[sortColumn].hasOwnProperty(\"columns\")) {\n                        targetColumns.push({\"title\":sortColumns[sortColumn].title, \"columns\":[]});\n                        sortColumnsByLayout(sortColumns[sortColumn].columns,columnsLayout,targetColumns[targetColumns.length-1].columns);\n                        layoutColumn=addedColumns; // jump forward after childes added\n                    } else {\n                        if (columnsLayout[layoutColumn].field===sortColumns[sortColumn].field){\n                            targetColumns.push(sortColumns[sortColumn]);\n                            addedColumns++;\n                            break;\n                        }\n                    }\n                }\n            }\n        };                 \n        var newColumns=[];\n        sortColumnsByLayout(msg.ui_control.tabulator.columns,tableConfig.columns,newColumns);\n        msg.ui_control.tabulator.columns=newColumns;\n    }\n\n    // restore stored lines after connect\n\n    let command = msg.payload.command;\n    var tableArray;\n    if (command===\"getTable\") {\n        msg.payload.tableArray=[];\n        tableArray=msg.payload.tableArray\n    } else {\n        msg.payload=[];\n        tableArray=msg.payload;\n    }\n    \n    var pushRowData = function(rowData) {\n        // ignore rows in ignoreRows array\n        if (tableConfig && tableConfig.hasOwnProperty(\"ignoreDevice\") && tableConfig.ignoreDevice[rowData]) {\n            // do nothing\n        } else {\n            // merge edits into table\n            if (tableEdit && tableEdit.hasOwnProperty(rowData)) {\n                let tableRow = RED.util.cloneMessage(tableData[rowData]);\n                Object.keys(tableEdit[rowData]).forEach((field) => {\n                    tableRow[field]=tableEdit[rowData][field];\n                });\n                tableArray.push(tableRow);\n            } else {\n                tableArray.push(tableData[rowData]);\n            }\n        }\n    }\n    \n    if (tableConfig.hasOwnProperty(\"rowOrder\")) {\n        // first check if new rows exits which are not in rowOrder\n        Object.keys(tableData).forEach((key) => {\n            if (tableConfig.rowOrder.indexOf(tableData[key][tableIndex])<0) {\n                tableConfig.rowOrder.push(tableData[key][tableIndex]); // add row to the end of rowOrder\n            }\n        });\n        tableConfig.rowOrder.forEach((value,index) => {\n            node.warn([\"pushRowOrder\",value,tableData.hasOwnProperty(value),tableData[value]]);\n            if (tableData.hasOwnProperty(value)) { // push rows in rowOrder sequence\n                pushRowData(value);\n            } else { // delete not existing rows from rowOrder\n                tableConfig.rowOrder.splice(index,1)\n            }\n       });\n    } else {\n        for (let rowData in tableData) {\n            pushRowData(rowData);\n        }\n    }\n    // store the first index if maxRows limits amount of displayed lines\n    if (maxRows>0 && tableData) {\n        let tableKeys=Object.keys(tableData);\n        if (tableKeys.length>0 && typeof tableData[tableKeys[0]][tableIndex] === \"number\") {\n            tableConfig.currentFirstRow=tableData[tableKeys[0]][tableIndex];\n        }\n    }\n    \n    if (command=='getTable'){\n        status.fill=\"blue\";\n        status.text+=\" \"+tableArray.length+\" rows emitted\";\n        return [{payload:status},null,msg];\n    } else {\n        status.fill=\"blue\";\n        status.text+=\" \"+tableArray.length+\" rows restored\";\n        return [{payload:status},msg,[{topic:\"maxRows\",payload:maxRows},{topic:\"maxStore\",payload:maxStore}]];\n    }\n} if (msg.hasOwnProperty(\"ui_control\")) {\n    // callback from tabulator\n    status.fill=\"blue\";\n    status.text=\"callback \"+msg.ui_control.callback;\n    switch(msg.ui_control.callback) {\n        case \"columnResized\": // save new column width\n            if (tableConfig.columnWidths===undefined) tableConfig.columnWidths={};\n            tableConfig.columnWidths[msg.ui_control.columnWidths.field]=msg.ui_control.columnWidths.width;\n            flow.set(\"$parent.\"+tableContext.tableConfig.name,tableConfig,tableContext.tableConfig.storage);\n            status.text=msg.ui_control.columnWidths.field+\"=\"+msg.ui_control.columnWidths.width+\"px\";\n            break;\n        case \"columnMoved\": // save new column order\n            if (tableConfig.columns===undefined) tableConfig.columns=[];\n            tableConfig.columns=msg.ui_control.columns;\n            flow.set(\"$parent.\"+tableContext.tableConfig.name,tableConfig,tableContext.tableConfig.storage);\n            status.text=\"new column order\";\n            break;\n        case \"cellEdited\":\n            if (tableEdit) {\n                if (!tableEdit.hasOwnProperty(msg[tableIndex])) tableEdit[msg[tableIndex]]={};\n                tableEdit[msg[tableIndex]][msg.field] = msg.payload; // save data and mark as edited field\n                flow.set(\"$parent.\"+tableContext.tableEdit.name,tableEdit,tableContext.tableEdit.storage);\n                mergeEdits(tableData);\n                flow.set(\"$parent.\"+tableContext.tableData.name,tableData,tableContext.tableData.storage);\n                status.text=msg[tableIndex]+\" \"+msg.field+\" edited to \"+msg.payload;\n                msg[tableDataProp]={};\n                msg[tableDataProp][tableIndex]=msg[tableIndex];\n                msg[tableDataProp][msg.field]=msg.payload;\n                msgToTable.payload.arguments=[[msg[tableDataProp]]];\n                node.send([{payload:status},null,msg]); // was node.send([{payload:status},msgToTable,msg]);\n            } else {\n                node.error(\"[ui-table handler] no tableEdit store defined!\")\n            }\n            break;\n        case \"rowContext\":\n            msg.ignoredDevices=[];\n            for (let rowData in tableConfig.ignoreDevice) {\n                if (tableConfig.ignoreDevice.hasOwnProperty(rowData)) {\n                    msg.ignoredDevices.push({\"text\":rowData,\"icon\":\"fa fa-plug\",\"topic\":\"unIgnoreDevice\",\"payload\":rowData})  \n                }\n            }\n            break;\n        case \"headerContext\":\n            msg.hiddenColumns=[];\n            let tabulatorConfig = env.get('tabulator');\n            for (let column in tableConfig.columnVisible) {\n                if (tableConfig.columnVisible.hasOwnProperty(column) &&\n                    !tableConfig.columnVisible[column]) {\n                    let configColumn=searchTabulatorColumn(tabulatorConfig.tabulator.columns,\"field\",column);\n                    let icon;\n                    if (configColumn.hasOwnProperty('title') && configColumn.title.toLowerCase().includes('</i>')) {\n                        // <i class='fa fa-star-half-o'></i> State\n                        let start=configColumn.title.indexOf(\"'fa \");\n                        let end=configColumn.title.indexOf(\"'\",start+1);\n                        icon=configColumn.title.substring(start+4,end);\n                    }\n                    msg.hiddenColumns.push({\"text\":column,\"icon\":icon,\"topic\":\"columnUnHide\",\"payload\":configColumn.field})  \n                }\n            }\n            break;\n        case \"rowMoved\":\n            if (tableConfig.rowOrder===undefined) tableConfig.rowOrder={};\n            tableConfig.rowOrder=msg.ui_control.rowOrder;\n            flow.set(\"$parent.\"+tableContext.tableConfig.name,tableConfig,tableContext.tableConfig.storage);\n            status.text=\"new row order\";\n            break;\n        default:\n            // if rowIndex exists pass complete object\n            if (msg.hasOwnProperty(tableIndex)) {\n                msg.rowData=tableData[msg[tableIndex]];\n            }\n            status.text=\"pass message\";\n    }\n    return [{payload:status},null,msg];\n} \nif (Array.isArray(msg.payload)) {\n    tableData={};\n    \n    msg.payload.forEach((row) => {\n        if (row.hasOwnProperty(tableIndex)) {\n            tableData[row[tableIndex]]=row;\n        }\n    });\n    if (msg.keepEdits) {\n        mergeEdits(tableData);\n    }\n\n    \n    flow.set(\"$parent.\"+tableContext.tableData.name,tableData,tableContext.tableData.storage);\n    if (tableContext.hasOwnProperty(\"tableEdit\") && !msg.keepEdits) {\n        tableEdit={};\n        flow.set(\"$parent.\"+tableContext.tableEdit.name,tableEdit,tableContext.tableEdit.storage);\n    }\n    status.fill=\"blue\"\n    status.text=\"table replaced \"+msg.payload.length+\" rows\";\n    return [{payload:status},msg,null];\n}    \n    \n// nothing to do bejond this point\nstatus.text+=\" [\"+msg.payload+\"]\";\nreturn [{payload:status},null];\n",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 190,
        "y": 80,
        "wires": [
            [],
            [],
            []
        ],
        "icon": "font-awesome/fa-table"
    },
    {
        "id": "ca29863c4aa8e8c4",
        "type": "function",
        "z": "5958c5854f8ba7cd",
        "name": "Route MQTT Msg",
        "func": "let target = env.get(\"Message Types\");\nlet isList = env.get(\"List\");\nlet message = msg.payload;\nlet type = \"\";\nlet targetFound = false;\nlet otherTargetFound = false;\nmsg.caller = msg.caller ? msg.caller : {};\n\ntarget = target.split(\",\")\ntarget.forEach((val,i,arr) => {\n    arr[i] = val.trim();\n});\n\nfor(let i in target){\n    if(message[target[i]] == true){\n        targetFound = true;\n        type += target[i] + \", \";\n        delete message[target[i]];\n    } \n} \n\ntype = type.slice(0,-2);\nmsg.caller.type = type;\n\nif (Object.keys(message) > 0) {\n    message.forEach((val) => {\n        if(val) {\n            otherTargetFound = true;\n        }\n    })\n}\n\n\nif(targetFound || (isList && !otherTargetFound)){\n    return msg;\n} else {\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 80,
        "wires": [
            [
                "da8bd97b81da3575"
            ]
        ]
    },
    {
        "id": "da8bd97b81da3575",
        "type": "function",
        "z": "5958c5854f8ba7cd",
        "name": "Process MQTT Topic",
        "func": "let callName = env.get(\"Function Topic\");\nlet topic = msg.topic.split(\"/\"+callName+\"/\");\n// node.warn(topic);\nlet caller = {\n    \"plant\" : topic[0],\n    \"id\" : topic[1],\n    \"timestamp\": Date.now()\n}\ntopic = caller.id.split(\"/\");\n// node.warn(topic);\n\nfor (let word of topic) {\n    word = word.split(\"-\");\n    caller[word[0]] = word[1].toUpperCase();\n}\n\nObject.assign(msg.caller, caller);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "788fac08512fd696",
        "type": "function",
        "z": "02bee84c2c61bcc8",
        "name": "Update List",
        "func": "// caller is already prepared from previous nodes.\n// it will either have a list of call types, or be empty. \nlet caller = msg.caller;\nlet list = \"$parent.\" + env.get(\"List Name\");\nlet dbList = flow.get(list);\n// node.warn(dbList);\n\nif (caller.type.length < 1){\n    //if caller.type is empty, means call from caller is cleared\n    //delete caller row in list\n    dbList = dbList.filter((call) => { return call.id != caller.id });\n    flow.set(list, dbList);\n} else {\n    //else if caller.type is not empty, means call from caller is a new call\n    //if caller already exists in list, update that caller row\n    //else add caller to list. \n    let index = dbList.findIndex((call) => { return call.id == caller.id });\n    if (index != -1) {\n        dbList[index] = caller;\n    } else {    \n        dbList.push(caller);\n    }\n    flow.set(list, dbList);\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "7bd4bb2e3900da1c",
        "type": "function",
        "z": "842e4db7b876be11",
        "name": "Update Queue",
        "func": "let queue = \"$parent.\"+env.get(\"Queue Name\");\nlet dbQueue = flow.get(queue);\nlet caller = msg.caller;\n\ndbQueue.push(caller);\nflow.set(queue, dbQueue);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "3bb529f3123a381b",
        "type": "inject",
        "z": "562197b4f4a67922",
        "name": "Insert Raw Data",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[{\"Id\":\"1\",\"Line\":\"F\",\"Cell\":\"A-1\",\"Back No\":\"AUK013\",\"Plan\":0,\"Actual\":0},{\"Id\":\"2\",\"Line\":\"F\",\"Cell\":\"A-2\",\"Back No\":\"AUK005\",\"Plan\":0,\"Actual\":0},{\"Id\":\"3\",\"Line\":\"F\",\"Cell\":\"B-1\",\"Back No\":\"AUK012\",\"Plan\":0,\"Actual\":0},{\"Id\":\"4\",\"Line\":\"F\",\"Cell\":\"B-2\",\"Back No\":\"AUK004\",\"Plan\":0,\"Actual\":0},{\"Id\":\"5\",\"Line\":\"F\",\"Cell\":\"C-1\",\"Back No\":\"AUK006\",\"Plan\":0,\"Actual\":0},{\"Id\":\"6\",\"Line\":\"F\",\"Cell\":\"C-2\",\"Back No\":\"AUK007\",\"Plan\":0,\"Actual\":0},{\"Id\":\"7\",\"Line\":\"F\",\"Cell\":\"C-3\",\"Back No\":\"AUK009\",\"Plan\":0,\"Actual\":0},{\"Id\":\"8\",\"Line\":\"F\",\"Cell\":\"C-4\",\"Back No\":\"AUK024\",\"Plan\":0,\"Actual\":0},{\"Id\":\"9\",\"Line\":\"F\",\"Cell\":\"C-5\",\"Back No\":\"AUK025\",\"Plan\":0,\"Actual\":0},{\"Id\":\"10\",\"Line\":\"F\",\"Cell\":\"D1-1\",\"Back No\":\"AUK002\",\"Plan\":0,\"Actual\":0},{\"Id\":\"11\",\"Line\":\"F\",\"Cell\":\"D1-2\",\"Back No\":\"AUK011\",\"Plan\":0,\"Actual\":0},{\"Id\":\"12\",\"Line\":\"F\",\"Cell\":\"D2-1\",\"Back No\":\"AUK003\",\"Plan\":0,\"Actual\":0},{\"Id\":\"13\",\"Line\":\"F\",\"Cell\":\"D2-2\",\"Back No\":\"AUK010\",\"Plan\":0,\"Actual\":0},{\"Id\":\"14\",\"Line\":\"F\",\"Cell\":\"E1-1\",\"Back No\":\"AUK017\",\"Plan\":0,\"Actual\":0},{\"Id\":\"15\",\"Line\":\"F\",\"Cell\":\"E1-2\",\"Back No\":\"AUK020\",\"Plan\":0,\"Actual\":0},{\"Id\":\"16\",\"Line\":\"F\",\"Cell\":\"E2-1\",\"Back No\":\"AUK016\",\"Plan\":0,\"Actual\":0},{\"Id\":\"17\",\"Line\":\"F\",\"Cell\":\"E2-2\",\"Back No\":\"AUK021\",\"Plan\":0,\"Actual\":0}]",
        "payloadType": "json",
        "x": 120,
        "y": 140,
        "wires": [
            [
                "fc35efef32c5cf97"
            ]
        ]
    },
    {
        "id": "fc35efef32c5cf97",
        "type": "change",
        "z": "562197b4f4a67922",
        "name": "Transform & filesave raw data",
        "rules": [
            {
                "t": "set",
                "p": "tableData",
                "pt": "flow",
                "to": "payload[].{\t    \"Id\":`Id`,\t    \"Line\":`Line`,\t    \"Cell\":`Cell`,\t    \"TM\":\"\",\t    \"Back No\":`Back No`,\t    \"Plan\":`Plan`,\t    \"Actual\":`Actual`\t}",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 450,
        "y": 140,
        "wires": [
            [
                "5418e74923417250"
            ]
        ]
    },
    {
        "id": "9765f3da2d535ee3",
        "type": "ui_table",
        "z": "562197b4f4a67922",
        "group": "85b12cf0fa38d858",
        "name": "Line Table",
        "order": 1,
        "width": 26,
        "height": 13,
        "columns": [],
        "outputs": 1,
        "cts": true,
        "x": 350,
        "y": 440,
        "wires": [
            [
                "aea8981076227a62",
                "e1c8c5460b5100ea"
            ]
        ]
    },
    {
        "id": "9429cca408847a85",
        "type": "ui_ui_control",
        "z": "562197b4f4a67922",
        "name": "",
        "events": "all",
        "x": 100,
        "y": 380,
        "wires": [
            [
                "657d21fce3ecd7ea"
            ]
        ]
    },
    {
        "id": "657d21fce3ecd7ea",
        "type": "change",
        "z": "562197b4f4a67922",
        "name": "Setup payload and ui_control",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "tableData",
                "tot": "flow",
                "dc": true
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload ~> |$|{ \"Progress\" : $round(Actual *100 / Plan) }|",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "ui_control",
                "pt": "msg",
                "to": "{\"tabulator\":{\"responsiveLayout\":\"collapse\",\"layout\":\"fitColumns\",\"movableColumns\":true,\"index\":\"Id\",\"groupBy\":\"Line\",\"columns\":[{\"frozen\":true,\"title\":\"ID\",\"field\":\"Id\"},{\"frozen\":true,\"title\":\"Line\",\"field\":\"Line\"},{\"title\":\"Cell\",\"field\":\"Cell\",\"frozen\":true},{\"title\":\"Back No\",\"field\":\"Back No\",\"frozen\":true,\"editor\":\"input\",\"editorParams\":{\"selectContents\":true,\"verticalNavigation\":\"table\"}},{\"title\":\"Team Member\",\"field\":\"TM\",\"editor\":\"input\",\"editorParams\":{\"selectContents\":true,\"verticalNavigation\":\"table\"}},{\"title\":\"Plan\",\"field\":\"Plan\",\"align\":\"left\",\"editor\":\"number\",\"editorParams\":{\"selectContents\":true,\"verticalNavigation\":\"table\"}},{\"title\":\"Actual\",\"field\":\"Actual\",\"align\":\"left\",\"editor\":\"number\",\"editorParams\":{\"selectContents\":true,\"verticalNavigation\":\"table\"}},{\"title\":\"Progress\",\"field\":\"Progress\",\"align\":\"left\",\"formatter\":\"progress\"}],\"columnResized\":\"function(column){     var newColumn = {         field: column._column.field,         visible: column._column.visible,         width: column._column.width,         widthFixed: column._column.widthFixed,         widthStyled: column._column.widthStyled     }; this.send({topic:this.config.topic,ui_control:{callback:'columnResized',columnWidths:newColumn}}); }\",\"columnMoved\":\"function(column, columns){     var newColumns=[];     columns.forEach(function (column) {         newColumns.push({'field': column._column.definition.field, 'title': column._column.definition.title});     });     this.send({topic:this.config.topic,ui_control:{callback:'columnMoved',columns:newColumns}}); }\",\"rowFormatter\":\"function(row){     var data = row.getData();     switch (data.$state) {         case \\\"lost\\\":             row.getElement().style.backgroundColor = \\\"#9e2e66\\\";             row.getElement().style.color = \\\"#a6a6a6\\\";             break;         case \\\"sleeping\\\":             row.getElement().style.backgroundColor = \\\"#336699\\\";             break;         case \\\"disconnected\\\":             row.getElement().style.backgroundColor = \\\"#cc3300\\\";             row.getElement().style.color = \\\"#a6a6a6\\\";             break;         case \\\"alert\\\":             row.getElement().style.backgroundColor = \\\"#A6A6DF\\\";             break;         case \\\"init\\\":             row.getElement().style.backgroundColor = \\\"#f2f20d\\\";             break;         case \\\"ready\\\":             row.getElement().style.backgroundColor = \\\"\\\";             row.getElement().style.color = \\\"\\\";             break;         } }\",\"cellEdited\":\"celledited = function (cell) {         console.log('celledited callback called');    this.send(                 {                          ui_control: {callback:'cellEdited'},            payload: cell.getValue(),            oldValue: cell.getOldValue(),            field: cell.getColumn().getField(),            id: cell.getRow().getCell('Id').getValue()         });    console.log('table edit success');}\"}}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 440,
        "y": 380,
        "wires": [
            [
                "a3445a1b7a99a2aa"
            ]
        ]
    },
    {
        "id": "d46645c44a1a1553",
        "type": "comment",
        "z": "562197b4f4a67922",
        "name": "Gunakan ni utk masukkan data permulaan",
        "info": "",
        "x": 180,
        "y": 100,
        "wires": []
    },
    {
        "id": "80625bcdc3601279",
        "type": "comment",
        "z": "562197b4f4a67922",
        "name": "data diambil drpd flow.tableData",
        "info": "",
        "x": 150,
        "y": 340,
        "wires": []
    },
    {
        "id": "190544d376618b4e",
        "type": "function",
        "z": "562197b4f4a67922",
        "d": true,
        "name": "node to edit celledited callback",
        "func": "celledited = function (cell) {     \n    console.log('celledited callback called');\n    this.send(         \n        {              \n            ui_control: {callback:'cellEdited'},\n            payload: cell.getValue(),\n            oldValue: cell.getOldValue(),\n            field: cell.getColumn().getField(),\n            id: call.getRow().getCell('Id').getValue() \n        });\n    console.log('table edit success');\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "aea8981076227a62",
        "type": "debug",
        "z": "562197b4f4a67922",
        "name": "from table",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 520,
        "y": 480,
        "wires": []
    },
    {
        "id": "ca748a580d870274",
        "type": "function",
        "z": "562197b4f4a67922",
        "name": "process cell edit",
        "func": "var tableData = flow.get(\"tableData\");\ntableData[msg.id-1][msg.field] = msg.payload;\ntableData[msg.id-1][\"Modified\"] = Date.now();\nflow.set(\"tableData\",tableData);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 440,
        "wires": [
            [
                "eb08a14f33272cc0"
            ]
        ]
    },
    {
        "id": "e1c8c5460b5100ea",
        "type": "switch",
        "z": "562197b4f4a67922",
        "name": "select only cellEdited",
        "property": "ui_control.callback",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "cellEdited",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 560,
        "y": 440,
        "wires": [
            [
                "ca748a580d870274",
                "bd7d5aadbbade7a9"
            ]
        ]
    },
    {
        "id": "5418e74923417250",
        "type": "change",
        "z": "562197b4f4a67922",
        "name": "set lastUpdatedAt",
        "rules": [
            {
                "t": "set",
                "p": "lastUpdatedAt",
                "pt": "flow",
                "to": "",
                "tot": "date"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 770,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "eb08a14f33272cc0",
        "type": "change",
        "z": "562197b4f4a67922",
        "name": "update lastUpdatedAt",
        "rules": [
            {
                "t": "set",
                "p": "lastUpdatedAt",
                "pt": "flow",
                "to": "",
                "tot": "date"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 960,
        "y": 440,
        "wires": [
            [
                "657d21fce3ecd7ea",
                "1464ea4a3fcb1231"
            ]
        ]
    },
    {
        "id": "21da1cf5e4453d55",
        "type": "inject",
        "z": "562197b4f4a67922",
        "name": "refresh lastUpdatedAt",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "900",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "lastUpdatedAt",
        "payloadType": "flow",
        "x": 150,
        "y": 220,
        "wires": [
            [
                "ba12c49728ef2158",
                "419b7cf998ee85b6"
            ]
        ]
    },
    {
        "id": "6f1e36e8e531547c",
        "type": "comment",
        "z": "562197b4f4a67922",
        "name": "untuk update bila last update data kat dashboard dan htr telegram kalau belum update",
        "info": "",
        "x": 320,
        "y": 180,
        "wires": []
    },
    {
        "id": "1464ea4a3fcb1231",
        "type": "debug",
        "z": "562197b4f4a67922",
        "name": "from cellEdited",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1100,
        "y": 480,
        "wires": []
    },
    {
        "id": "a3445a1b7a99a2aa",
        "type": "switch",
        "z": "562197b4f4a67922",
        "name": "tabName = Data only",
        "property": "name",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Data",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 1,
        "x": 160,
        "y": 440,
        "wires": [
            [
                "9765f3da2d535ee3"
            ]
        ]
    },
    {
        "id": "ba12c49728ef2158",
        "type": "switch",
        "z": "562197b4f4a67922",
        "name": "> 1 hour?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "jsonata_exp",
                "v": "$toMillis($now()) - payload > 3600000\t",
                "vt": "jsonata"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 440,
        "y": 260,
        "wires": [
            [
                "6f0919e127cfcf6b"
            ]
        ]
    },
    {
        "id": "6f0919e127cfcf6b",
        "type": "change",
        "z": "562197b4f4a67922",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"chatId\":21709557,\"type\":\"message\",\"content\":\"Reminder: pls update hourly production data\"}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 620,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "419b7cf998ee85b6",
        "type": "change",
        "z": "562197b4f4a67922",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "$moment(payload).fromNow()",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 400,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "bd7d5aadbbade7a9",
        "type": "debug",
        "z": "562197b4f4a67922",
        "name": "select only celledited",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 480,
        "wires": []
    },
    {
        "id": "aed69bd7994a8096",
        "type": "ui_template",
        "z": "562197b4f4a67922",
        "group": "85b12cf0fa38d858",
        "name": "Tabulator CSS",
        "order": 1,
        "width": 0,
        "height": 0,
        "format": "<style>\n    .tabulator {\n        font-size: 1.5em !important; \n    }\n</style>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "global",
        "className": "",
        "x": 120,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "4b14e7763a1cb2d9",
        "type": "ui_svg_graphics",
        "z": "562197b4f4a67922",
        "group": "02f09ba258bf6625",
        "order": 2,
        "width": 0,
        "height": 0,
        "svgString": "<svg x=\"0\" y=\"0\" height=\"100\" viewBox=\"0 0 100 100\" width=\"100\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:svg=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<!-- Add here your SVG shapes (circles, rectangles, ...) -->\n<!-- Or remove everything, if you want to paste an entire drawing (<svg...>...</svg>).-->\n</svg>",
        "clickableShapes": [],
        "javascriptHandlers": [],
        "smilAnimations": [],
        "bindings": [],
        "showCoordinates": false,
        "autoFormatAfterEdit": false,
        "showBrowserErrors": false,
        "showBrowserEvents": false,
        "enableJsDebugging": false,
        "sendMsgWhenLoaded": false,
        "noClickWhenDblClick": false,
        "outputField": "payload",
        "editorUrl": "//drawsvg.org/drawsvg.html",
        "directory": "",
        "panning": "disabled",
        "zooming": "disabled",
        "panOnlyWhenZoomed": false,
        "doubleClickZoomEnabled": false,
        "mouseWheelZoomEnabled": false,
        "dblClickZoomPercentage": 150,
        "cssString": "div.ui-svg svg{\n    color: var(--nr-dashboard-widgetColor);\n    fill: currentColor !important;\n}\ndiv.ui-svg path {\n    fill: inherit;\n}",
        "name": "",
        "x": 360,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "d3a0745948b821c9",
        "type": "comment",
        "z": "562197b4f4a67922",
        "name": "Dont Delete this!",
        "info": "",
        "x": 100,
        "y": 500,
        "wires": []
    },
    {
        "id": "2fa6a4a0490e047a",
        "type": "link out",
        "z": "562197b4f4a67922",
        "name": "send telegram message",
        "mode": "link",
        "links": [
            "21f38c7085dac4ce"
        ],
        "x": 425,
        "y": 620,
        "wires": []
    },
    {
        "id": "f7ec67567aefe7c7",
        "type": "link out",
        "z": "562197b4f4a67922",
        "name": "send telegram message",
        "mode": "link",
        "links": [
            "21f38c7085dac4ce"
        ],
        "x": 755,
        "y": 260,
        "wires": []
    },
    {
        "id": "eda96cbe4fa18198",
        "type": "inject",
        "z": "562197b4f4a67922",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"target\":[\"asyraf\",\"Press Mtce\"],\"type\":\"message\",\"content\":\"Call: Testing Call system for groups\"}",
        "payloadType": "json",
        "x": 330,
        "y": 620,
        "wires": [
            [
                "2fa6a4a0490e047a"
            ]
        ]
    },
    {
        "id": "b7501e0898e46344",
        "type": "inject",
        "z": "562197b4f4a67922",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"target\":\"Press Mtce\",\"type\":\"message\",\"content\":\"Call: Testing Call system for groups\"}",
        "payloadType": "json",
        "x": 330,
        "y": 660,
        "wires": [
            [
                "2fa6a4a0490e047a"
            ]
        ]
    },
    {
        "id": "d7197fbf265fda54",
        "type": "mqtt in",
        "z": "327571d15da5aceb",
        "name": "from trial WISE ",
        "topic": "AKSB/SA/call/#",
        "qos": "1",
        "datatype": "json",
        "broker": "56edfd93d9c67181",
        "nl": false,
        "rap": true,
        "rh": "2",
        "inputs": 0,
        "x": 100,
        "y": 320,
        "wires": [
            [
                "db3d86086a08ee76",
                "e039e2b37c45b70f",
                "61765029e1a65f4f"
            ]
        ]
    },
    {
        "id": "79d2dbe7240fa5dc",
        "type": "debug",
        "z": "327571d15da5aceb",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 540,
        "y": 280,
        "wires": []
    },
    {
        "id": "80b1fb2dd47643d8",
        "type": "ui_ui_control",
        "z": "327571d15da5aceb",
        "name": "",
        "events": "all",
        "x": 920,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "2022fca4a20f48d0",
        "type": "change",
        "z": "327571d15da5aceb",
        "name": "false: Dashboard",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"tab\":\"Data\"}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 750,
        "y": 180,
        "wires": [
            [
                "80b1fb2dd47643d8"
            ]
        ]
    },
    {
        "id": "39f563b3717d924b",
        "type": "ui_ui_control",
        "z": "327571d15da5aceb",
        "name": "",
        "events": "all",
        "x": 920,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "60ec8fc7c03081d6",
        "type": "change",
        "z": "327571d15da5aceb",
        "name": "true: Alert",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"tab\":\"Alert\"}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 720,
        "y": 140,
        "wires": [
            [
                "39f563b3717d924b"
            ]
        ]
    },
    {
        "id": "db3d86086a08ee76",
        "type": "function",
        "z": "327571d15da5aceb",
        "d": true,
        "name": "process MQTT msg",
        "func": "let callList = flow.get(\"callList\") || [];\nlet updateCall = { payload: false } ;\nlet FGQueue = flow.get(\"fgQueue\") || [];\nlet updateFGQ = { payload: false };\nlet KWQueue = flow.get(\"kwQueue\") || [];\nlet updateKWQ = { payload: false };\nlet changeTab = { payload: false };\n\nlet topic = msg.topic.split(\"/call/\");\n\nlet caller = {\n    \"id\" : topic[1],\n    \"plant\" : topic[0],\n    \"dept\" : \"\",\n    \"line\" : \"\",\n    \"cell\" : \"\",\n    \"type\" : \"\",\n    \"timestamp\": Date.now()\n}\ntopic = caller.id.split(\"/\");\n//node.warn(topic);\n\nfor (let word of topic) {\n    word = word.split(\"-\");\n    //node.warn(word);\n    switch(word[0]) {\n        case \"dept\":\n            caller.dept = word[1].toUpperCase();\n            break;\n        case \"line\":\n            caller.line = word[1].toUpperCase();\n            break;\n        case \"cell\":\n            caller.cell = word[1].toUpperCase();\n            break;\n        default:\n    }\n}\n// node.warn(caller);\n\nif (!msg.payload.MT && !msg.payload.QC && !msg.payload.SV){\n    callList = callList.filter((call) => { return call.id != caller.id });\n    flow.set(\"callList\", callList);\n    updateCall.payload = true;\n} else {\n    let callIndex = callList.findIndex((call) => { return call.id == caller.id });\n    //node.warn(callIndex);\n    if (msg.payload.MT && msg.payload.QC && msg.payload.SV){\n        caller.type = \"SV,QC,MTCE\";\n        updateCall.payload = true;\n    } else if (msg.payload.SV && msg.payload.QC && !msg.payload.MT) {\n        caller.type = \"SV,QC\";\n        updateCall.payload = true;\n    } else if (msg.payload.SV && msg.payload.MT && !msg.payload.QC) {\n        caller.type = \"SV, MTCE\";\n        updateCall.payload = true;\n    } else if (msg.payload.MT && msg.payload.QC && !msg.payload.SV) {\n        caller.type = \"QC, MTCE\";\n        updateCall.payload = true;\n    } else {\n        if (msg.payload.MT){\n            caller.type = \"MTCE\";\n        }\n        if (msg.payload.QC){\n            caller.type = \"QC\";\n        }\n        if (msg.payload.SV){\n            caller.type = \"SV\";\n        }\n        updateCall.payload = true;\n    }\n    if (callIndex != -1) {\n        callList[callIndex] = caller;\n    } else {    \n        callList.push(caller);\n    }\n    flow.set(\"callList\", callList);\n}\n\nif(msg.payload.FG){\n    FGQueue.push(caller);\n    flow.set(\"fgQueue\", FGQueue);\n    updateFGQ.payload = true;\n}\nif(msg.payload.KW){\n    KWQueue.push(caller);\n    flow.set(\"kwQueue\", KWQueue);\n    updateKWQ.payload = true;\n}\n\nchangeTab.payload = callList.length > 0;\nreturn [changeTab, updateCall, updateFGQ, updateKWQ];",
        "outputs": 4,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 200,
        "wires": [
            [
                "eb8b7ad763ba6eb8"
            ],
            [],
            [],
            [
                "443a9f25028c9c89"
            ]
        ]
    },
    {
        "id": "eb8b7ad763ba6eb8",
        "type": "switch",
        "z": "327571d15da5aceb",
        "d": true,
        "name": "Change Tab?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 550,
        "y": 160,
        "wires": [
            [
                "60ec8fc7c03081d6"
            ],
            [
                "2022fca4a20f48d0"
            ]
        ]
    },
    {
        "id": "443a9f25028c9c89",
        "type": "switch",
        "z": "327571d15da5aceb",
        "name": "Update KW Queue?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 560,
        "y": 580,
        "wires": [
            [
                "91f6b3446bbbacb5"
            ]
        ]
    },
    {
        "id": "0c1c8a6450ad2cdc",
        "type": "change",
        "z": "327571d15da5aceb",
        "name": "true: Update List",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "callList",
                "tot": "flow",
                "dc": true
            },
            {
                "t": "set",
                "p": "ui_control",
                "pt": "msg",
                "to": "{}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1060,
        "y": 280,
        "wires": [
            [
                "0b668fefdd7e1138"
            ]
        ]
    },
    {
        "id": "e095abbdc378dd80",
        "type": "change",
        "z": "327571d15da5aceb",
        "name": "true: Update Queue",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "fgQueue",
                "tot": "flow"
            },
            {
                "t": "set",
                "p": "ui_control",
                "pt": "msg",
                "to": "{\"tabulator\":{\"responsiveLayout\":\"collapse\",\"layout\":\"fitColumns\",\"movableColumns\":true,\"index\":\"Id\",\"columns\":[{\"frozen\":true,\"title\":\"ID\",\"align\":\"center\",\"width\":\"5%\",\"formatter\":\"rownum\"},{\"frozen\":true,\"title\":\"Department\",\"field\":\"Department\"},{\"frozen\":true,\"title\":\"Line\",\"field\":\"Line\"},{\"frozen\":true,\"title\":\"Cell\",\"field\":\"Cell\"},{\"title\":\"Time (mins)\",\"field\":\"Time\"},{\"title\":\"Action\",\"align\":\"center\",\"width\":\"10%\",\"formatter\":\"buttonCross\"}],\"columnResized\":\"function(column){     var newColumn = {         field: column._column.field,         visible: column._column.visible,         width: column._column.width,         widthFixed: column._column.widthFixed,         widthStyled: column._column.widthStyled     }; this.send({topic:this.config.topic,ui_control:{callback:'columnResized',columnWidths:newColumn}}); }\",\"columnMoved\":\"function(column, columns){     var newColumns=[];     columns.forEach(function (column) {         newColumns.push({'field': column._column.definition.field, 'title': column._column.definition.title});     });     this.send({topic:this.config.topic,ui_control:{callback:'columnMoved',columns:newColumns}}); }\",\"rowFormatter\":\"function(row){     var data = row.getData();     switch (data.$state) {         case \\\"lost\\\":             row.getElement().style.backgroundColor = \\\"#9e2e66\\\";             row.getElement().style.color = \\\"#a6a6a6\\\";             break;         case \\\"sleeping\\\":             row.getElement().style.backgroundColor = \\\"#336699\\\";             break;         case \\\"disconnected\\\":             row.getElement().style.backgroundColor = \\\"#cc3300\\\";             row.getElement().style.color = \\\"#a6a6a6\\\";             break;         case \\\"alert\\\":             row.getElement().style.backgroundColor = \\\"#A6A6DF\\\";             break;         case \\\"init\\\":             row.getElement().style.backgroundColor = \\\"#f2f20d\\\";             break;         case \\\"ready\\\":             row.getElement().style.backgroundColor = \\\"\\\";             row.getElement().style.color = \\\"\\\";             break;         } }\",\"cellEdited\":\"celledited = function (cell) {         console.log('celledited callback called');    this.send(                 {                          ui_control: {callback:'cellEdited'},            payload: cell.getValue(),            oldValue: cell.getOldValue(),            field: cell.getColumn().getField(),            id: cell.getRow().getCell('Id').getValue()         });    console.log('table edit success');}\"}}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1070,
        "y": 420,
        "wires": [
            [
                "fdfeeb33a12745aa"
            ]
        ]
    },
    {
        "id": "a48c49277460197f",
        "type": "ui_table",
        "z": "327571d15da5aceb",
        "group": "02f09ba258bf6625",
        "name": "Call Queue",
        "order": 1,
        "width": 20,
        "height": 7,
        "columns": [],
        "outputs": 0,
        "cts": false,
        "x": 1490,
        "y": 320,
        "wires": []
    },
    {
        "id": "93a21d5dcdc32268",
        "type": "ui_table",
        "z": "327571d15da5aceb",
        "group": "569dc256923818f6",
        "name": "FG Queue",
        "order": 1,
        "width": 25,
        "height": 7,
        "columns": [],
        "outputs": 1,
        "cts": true,
        "x": 1490,
        "y": 460,
        "wires": [
            [
                "99f5d5d010547613",
                "26197aba70f1aa94"
            ]
        ]
    },
    {
        "id": "0b668fefdd7e1138",
        "type": "change",
        "z": "327571d15da5aceb",
        "name": "transform timestamps",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload[].{ \t    \"Plant\":plant,\t    \"Department\":dept,\t    \"Line\":line,\t    \"Cell\":cell,\t    \"Calling\":type,\t    \"Time (sec)\":-1 * $moment(timestamp).diff($moment(), 'seconds')\t}",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1280,
        "y": 280,
        "wires": [
            [
                "a48c49277460197f",
                "5b3dd757e53da23a",
                "4e83d9db6a3b8bb5"
            ]
        ]
    },
    {
        "id": "7429e2bad420c896",
        "type": "debug",
        "z": "327571d15da5aceb",
        "name": "debug 4",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1520,
        "y": 400,
        "wires": []
    },
    {
        "id": "4e83d9db6a3b8bb5",
        "type": "debug",
        "z": "327571d15da5aceb",
        "name": "debug 5",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1500,
        "y": 240,
        "wires": []
    },
    {
        "id": "0408a92bd9d1a49c",
        "type": "template",
        "z": "327571d15da5aceb",
        "name": "Send call message to group",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{\n    \"target\": \"asyraf\",\n    \"type\": \"message\",\n    \"content\": \"Call Queue: \\n| For | Dept | Line | Cell |\\n{{#payload}} | {{type}} | {{dept}} | {{line}} | {{cell}} |\\n{{/payload}}\"\n}",
        "output": "json",
        "x": 1020,
        "y": 240,
        "wires": [
            [
                "bd1b0393d3b158c1"
            ]
        ]
    },
    {
        "id": "388823226a3f39ea",
        "type": "change",
        "z": "327571d15da5aceb",
        "d": true,
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "callList",
                "tot": "flow",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 760,
        "y": 240,
        "wires": [
            [
                "0408a92bd9d1a49c"
            ]
        ]
    },
    {
        "id": "40c648f526c3cd63",
        "type": "delay",
        "z": "327571d15da5aceb",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 900,
        "y": 360,
        "wires": [
            [
                "0c1c8a6450ad2cdc"
            ]
        ]
    },
    {
        "id": "99f5d5d010547613",
        "type": "debug",
        "z": "327571d15da5aceb",
        "name": "debug 8",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1700,
        "y": 440,
        "wires": []
    },
    {
        "id": "fdfeeb33a12745aa",
        "type": "change",
        "z": "327571d15da5aceb",
        "name": "transform timestamps",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload[].{ \t    \"Plant\":plant,\t    \"Department\":dept,\t    \"Line\":line,\t    \"Cell\":cell,\t    \"Time\":$round(-1*$moment(timestamp).diff($moment(), 'minutes', 1), 2)\t}",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1280,
        "y": 420,
        "wires": [
            [
                "93a21d5dcdc32268",
                "7429e2bad420c896",
                "5572052e45be3a2f"
            ]
        ]
    },
    {
        "id": "2d665c92d372ae93",
        "type": "delay",
        "z": "327571d15da5aceb",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 900,
        "y": 500,
        "wires": [
            [
                "e095abbdc378dd80"
            ]
        ]
    },
    {
        "id": "5b3dd757e53da23a",
        "type": "switch",
        "z": "327571d15da5aceb",
        "name": "is not empty?",
        "property": "callList",
        "propertyType": "flow",
        "rules": [
            {
                "t": "nempty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 750,
        "y": 360,
        "wires": [
            [
                "40c648f526c3cd63"
            ]
        ]
    },
    {
        "id": "26197aba70f1aa94",
        "type": "function",
        "z": "327571d15da5aceb",
        "name": "Delete rows onclick",
        "func": "let queue = flow.get(\"fgQueue\");\n\nif(msg.row > -1){\n    if(queue.length > 1) {\n        queue.splice(msg.row, 1);\n    } else {\n        queue=[]; \n    }\n}\n\nflow.set(\"fgQueue\", queue);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 520,
        "wires": [
            [
                "9b3585928247d412"
            ]
        ]
    },
    {
        "id": "9b3585928247d412",
        "type": "switch",
        "z": "327571d15da5aceb",
        "name": "is not empty?",
        "property": "fgQueue",
        "propertyType": "flow",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "empty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 750,
        "y": 440,
        "wires": [
            [
                "e095abbdc378dd80"
            ],
            [
                "194f316c416ded39"
            ]
        ]
    },
    {
        "id": "194f316c416ded39",
        "type": "change",
        "z": "327571d15da5aceb",
        "name": "false: empty table",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "[]",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1070,
        "y": 460,
        "wires": [
            [
                "93a21d5dcdc32268"
            ]
        ]
    },
    {
        "id": "5572052e45be3a2f",
        "type": "switch",
        "z": "327571d15da5aceb",
        "name": "is not empty?",
        "property": "fgQueue",
        "propertyType": "flow",
        "rules": [
            {
                "t": "nempty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 750,
        "y": 500,
        "wires": [
            [
                "2d665c92d372ae93"
            ]
        ]
    },
    {
        "id": "e7a6aef5978e156b",
        "type": "change",
        "z": "327571d15da5aceb",
        "name": "true: Update Queue",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "kwQueue",
                "tot": "flow"
            },
            {
                "t": "set",
                "p": "ui_control",
                "pt": "msg",
                "to": "{\"tabulator\":{\"responsiveLayout\":\"collapse\",\"layout\":\"fitColumns\",\"movableColumns\":true,\"index\":\"Id\",\"columns\":[{\"frozen\":true,\"title\":\"ID\",\"align\":\"center\",\"width\":\"5%\",\"formatter\":\"rownum\"},{\"frozen\":true,\"title\":\"Department\",\"field\":\"Department\"},{\"frozen\":true,\"title\":\"Line\",\"field\":\"Line\"},{\"frozen\":true,\"title\":\"Cell\",\"field\":\"Cell\"},{\"title\":\"Time (mins)\",\"field\":\"Time\"},{\"title\":\"Action\",\"align\":\"center\",\"width\":\"10%\",\"formatter\":\"buttonCross\"}],\"columnResized\":\"function(column){     var newColumn = {         field: column._column.field,         visible: column._column.visible,         width: column._column.width,         widthFixed: column._column.widthFixed,         widthStyled: column._column.widthStyled     }; this.send({topic:this.config.topic,ui_control:{callback:'columnResized',columnWidths:newColumn}}); }\",\"columnMoved\":\"function(column, columns){     var newColumns=[];     columns.forEach(function (column) {         newColumns.push({'field': column._column.definition.field, 'title': column._column.definition.title});     });     this.send({topic:this.config.topic,ui_control:{callback:'columnMoved',columns:newColumns}}); }\",\"rowFormatter\":\"function(row){     var data = row.getData();     switch (data.$state) {         case \\\"lost\\\":             row.getElement().style.backgroundColor = \\\"#9e2e66\\\";             row.getElement().style.color = \\\"#a6a6a6\\\";             break;         case \\\"sleeping\\\":             row.getElement().style.backgroundColor = \\\"#336699\\\";             break;         case \\\"disconnected\\\":             row.getElement().style.backgroundColor = \\\"#cc3300\\\";             row.getElement().style.color = \\\"#a6a6a6\\\";             break;         case \\\"alert\\\":             row.getElement().style.backgroundColor = \\\"#A6A6DF\\\";             break;         case \\\"init\\\":             row.getElement().style.backgroundColor = \\\"#f2f20d\\\";             break;         case \\\"ready\\\":             row.getElement().style.backgroundColor = \\\"\\\";             row.getElement().style.color = \\\"\\\";             break;         } }\",\"cellEdited\":\"celledited = function (cell) {         console.log('celledited callback called');    this.send(                 {                          ui_control: {callback:'cellEdited'},            payload: cell.getValue(),            oldValue: cell.getOldValue(),            field: cell.getColumn().getField(),            id: cell.getRow().getCell('Id').getValue()         });    console.log('table edit success');}\"}}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1090,
        "y": 580,
        "wires": [
            [
                "77c8340879363b84"
            ]
        ]
    },
    {
        "id": "e054f574d3e939c0",
        "type": "ui_table",
        "z": "327571d15da5aceb",
        "group": "e5276d6b5a48a00a",
        "name": "KW Queue",
        "order": 1,
        "width": 25,
        "height": 7,
        "columns": [],
        "outputs": 1,
        "cts": true,
        "x": 1510,
        "y": 620,
        "wires": [
            [
                "c4d311be3afeebfe"
            ]
        ]
    },
    {
        "id": "77c8340879363b84",
        "type": "change",
        "z": "327571d15da5aceb",
        "name": "transform timestamps",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload[].{ \t    \"Plant\":plant,\t    \"Department\":dept,\t    \"Line\":line,\t    \"Cell\":cell,\t    \"Time\":$round(-1*$moment(timestamp).diff($moment(), 'minutes', 1), 2)\t}",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1300,
        "y": 580,
        "wires": [
            [
                "e054f574d3e939c0",
                "7c13368efceb0c8a"
            ]
        ]
    },
    {
        "id": "7864380f40932de4",
        "type": "delay",
        "z": "327571d15da5aceb",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 920,
        "y": 660,
        "wires": [
            [
                "e7a6aef5978e156b"
            ]
        ]
    },
    {
        "id": "c4d311be3afeebfe",
        "type": "function",
        "z": "327571d15da5aceb",
        "name": "Delete rows onclick",
        "func": "let queue = flow.get(\"kwQueue\");\n\nif(msg.row > -1){\n    if(queue.length > 1) {\n        queue.splice(msg.row, 1);\n    } else {\n        queue=[]; \n    }\n}\n\nflow.set(\"kwQueue\", queue);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 680,
        "wires": [
            [
                "91f6b3446bbbacb5"
            ]
        ]
    },
    {
        "id": "91f6b3446bbbacb5",
        "type": "switch",
        "z": "327571d15da5aceb",
        "name": "is not empty?",
        "property": "kwQueue",
        "propertyType": "flow",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "empty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 770,
        "y": 600,
        "wires": [
            [
                "e7a6aef5978e156b"
            ],
            [
                "9c95bf426dc58e26"
            ]
        ]
    },
    {
        "id": "9c95bf426dc58e26",
        "type": "change",
        "z": "327571d15da5aceb",
        "name": "false: empty table",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "[]",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1090,
        "y": 620,
        "wires": [
            [
                "e054f574d3e939c0"
            ]
        ]
    },
    {
        "id": "7c13368efceb0c8a",
        "type": "switch",
        "z": "327571d15da5aceb",
        "name": "is not empty?",
        "property": "kwQueue",
        "propertyType": "flow",
        "rules": [
            {
                "t": "nempty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 770,
        "y": 660,
        "wires": [
            [
                "7864380f40932de4"
            ]
        ]
    },
    {
        "id": "ab9809ea3c7053e3",
        "type": "switch",
        "z": "327571d15da5aceb",
        "name": "is not empty?",
        "property": "callList",
        "propertyType": "flow",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "empty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 750,
        "y": 300,
        "wires": [
            [
                "0c1c8a6450ad2cdc"
            ],
            [
                "6bd420886a8214f9"
            ]
        ]
    },
    {
        "id": "6bd420886a8214f9",
        "type": "change",
        "z": "327571d15da5aceb",
        "name": "false: empty table",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "[]",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1070,
        "y": 320,
        "wires": [
            [
                "a48c49277460197f"
            ]
        ]
    },
    {
        "id": "bd1b0393d3b158c1",
        "type": "link out",
        "z": "327571d15da5aceb",
        "name": "send telegram message",
        "mode": "link",
        "links": [
            "21f38c7085dac4ce"
        ],
        "x": 1195,
        "y": 240,
        "wires": []
    },
    {
        "id": "e039e2b37c45b70f",
        "type": "subflow:5958c5854f8ba7cd",
        "z": "327571d15da5aceb",
        "name": "Route & Process MQTT",
        "x": 330,
        "y": 320,
        "wires": [
            [
                "79d2dbe7240fa5dc",
                "0263eb07610f7c0a"
            ]
        ]
    },
    {
        "id": "4d51428a87e920be",
        "type": "function",
        "z": "327571d15da5aceb",
        "name": "Update Database",
        "func": "let caller = msg.caller;\nlet list = env.get(\"List\");\nlet dbList = flow.get(list);\n\nif (caller.type.length < 1){\n    //if caller.type is empty, means call from caller is cleared\n    //delete caller row in list\n    dbList = dbList.filter((call) => { return call.id != caller.id });\n    flow.set(list, dbList);\n} else {\n    //else if caller.type is not empty, means call from caller is a new call\n    //if caller already exists in list, update that caller row\n    //else add caller to list. \n    let index = dbList.findIndex((call) => { return call.id == caller.id });\n    if (index != -1) {\n        dbList[index] = caller;\n    } else {    \n        dbList.push(caller);\n    }\n    flow.set(list, dbList);\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 130,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "0263eb07610f7c0a",
        "type": "subflow:02bee84c2c61bcc8",
        "z": "327571d15da5aceb",
        "name": "",
        "x": 550,
        "y": 320,
        "wires": [
            [
                "ab9809ea3c7053e3"
            ]
        ]
    },
    {
        "id": "114adc50fe6e8c1d",
        "type": "subflow:842e4db7b876be11",
        "z": "327571d15da5aceb",
        "name": "",
        "env": [
            {
                "name": "Queue Name",
                "value": "fgQueue",
                "type": "str"
            }
        ],
        "x": 540,
        "y": 440,
        "wires": [
            [
                "9b3585928247d412"
            ]
        ]
    },
    {
        "id": "61765029e1a65f4f",
        "type": "subflow:5958c5854f8ba7cd",
        "z": "327571d15da5aceb",
        "name": "Route & Process MQTT",
        "env": [
            {
                "name": "Message Types",
                "value": "FG",
                "type": "str"
            },
            {
                "name": "List",
                "value": "false",
                "type": "bool"
            }
        ],
        "x": 330,
        "y": 440,
        "wires": [
            [
                "114adc50fe6e8c1d"
            ]
        ]
    },
    {
        "id": "0e5e988da6ace305",
        "type": "telegram sender",
        "z": "b7a483d0be44dbdd",
        "name": "send message ",
        "bot": "ea1829c43a6e8ad0",
        "haserroroutput": true,
        "outputs": 2,
        "x": 600,
        "y": 320,
        "wires": [
            [
                "5f6be6d7ecced755"
            ],
            [
                "c0dc87d6283b17a7"
            ]
        ]
    },
    {
        "id": "c0dc87d6283b17a7",
        "type": "debug",
        "z": "b7a483d0be44dbdd",
        "name": "debug 9",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 800,
        "y": 340,
        "wires": []
    },
    {
        "id": "5f6be6d7ecced755",
        "type": "debug",
        "z": "b7a483d0be44dbdd",
        "name": "debug 10",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 800,
        "y": 300,
        "wires": []
    },
    {
        "id": "21f38c7085dac4ce",
        "type": "link in",
        "z": "b7a483d0be44dbdd",
        "name": "telegram input link",
        "links": [
            "2fa6a4a0490e047a",
            "bd1b0393d3b158c1",
            "f7ec67567aefe7c7"
        ],
        "x": 225,
        "y": 320,
        "wires": [
            [
                "53a3a84b4660c265"
            ]
        ]
    },
    {
        "id": "78eba51fe7dbbeb4",
        "type": "change",
        "z": "b7a483d0be44dbdd",
        "name": "Setup Chat Ids Here",
        "rules": [
            {
                "t": "set",
                "p": "chatIds",
                "pt": "flow",
                "to": "{\"asyraf\":21709557,\"IT\":123,\"Press\":123,\"Assy\":123,\"Press Mtce\":-1001957517829,\"Die Mtce\":123,\"Assy Mtce\":123,\"Press QC\":123,\"Assy QC\":123,\"HOD\":123}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 440,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "69b847464ff1d895",
        "type": "comment",
        "z": "b7a483d0be44dbdd",
        "name": "How to configure link out msg (click here to read!)",
        "info": "Instead of specifying chatIds, specify chat group nicknames as setup in the node below. here is an example:\n\n{\n    target: [\"IT\", \"Press Mtce\"]\n    type: \"message\"\n    content: \"this is an example message\"\n}\n\nchatIds will be generated before the message is sent to telegram. ",
        "x": 220,
        "y": 40,
        "wires": []
    },
    {
        "id": "53a3a84b4660c265",
        "type": "function",
        "z": "b7a483d0be44dbdd",
        "name": "convert target to chatId",
        "func": "let chatIds = flow.get(\"chatIds\");\nlet target = msg.payload.target;\n\nif(Array.isArray(target)) {\n    msg.payload[\"chatId\"] = [];\n    for(let index in target) {\n        msg.payload.chatId.push(chatIds[target[index]]);\n    }\n} else {\n    msg.payload[\"chatId\"] = chatIds[target];\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 320,
        "wires": [
            [
                "0e5e988da6ace305",
                "dbf1d935725ab591"
            ]
        ]
    },
    {
        "id": "dbf1d935725ab591",
        "type": "debug",
        "z": "b7a483d0be44dbdd",
        "name": "debug 12",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 580,
        "y": 380,
        "wires": []
    },
    {
        "id": "d3ac7ed0b7278db7",
        "type": "inject",
        "z": "b7a483d0be44dbdd",
        "name": "Inject telegram id data into flow",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 80,
        "wires": [
            [
                "78eba51fe7dbbeb4"
            ]
        ]
    },
    {
        "id": "2d6258541bda347b",
        "type": "mqtt in",
        "z": "1694d57381b3dfec",
        "name": "Temp Sensors",
        "topic": "Advantech/#",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "56edfd93d9c67181",
        "nl": false,
        "rap": true,
        "rh": "1",
        "inputs": 0,
        "x": 110,
        "y": 200,
        "wires": [
            [
                "619d49c989b8af21"
            ]
        ]
    },
    {
        "id": "619d49c989b8af21",
        "type": "debug",
        "z": "1694d57381b3dfec",
        "name": "analyze mqtt output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 330,
        "y": 160,
        "wires": []
    }
]